
smiglo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb4  08006bb4  000205bc  2**0
                  CONTENTS
  4 .ARM          00000000  08006bb4  08006bb4  000205bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bb4  08006bb4  000205bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005bc  20000000  08006bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200005bc  08007178  000205bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  2000098c  08007178  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
 12 .debug_line   00031fbf  00000000  00000000  000205e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003d6f2  00000000  00000000  000525a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000664b  00000000  00000000  0008fc95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  000962e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007d1ee  00000000  00000000  00097870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003800  00000000  00000000  00114a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018c2a  00000000  00000000  00118260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  00130e8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  00130f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001bb62  00000000  00000000  00134a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200005bc 	.word	0x200005bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d70 	.word	0x08005d70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200005c0 	.word	0x200005c0
 8000104:	08005d70 	.word	0x08005d70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490e      	ldr	r1, [pc, #56]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0b      	ldr	r4, [pc, #44]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800041e:	f002 f8ef 	bl	8002600 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000422:	f005 fc6f 	bl	8005d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f000 f851 	bl	80004cc <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	200005bc 	.word	0x200005bc
  ldr r2, =_sidata
 8000438:	08006bbc 	.word	0x08006bbc
  ldr r2, =_sbss
 800043c:	200005bc 	.word	0x200005bc
  ldr r4, =_ebss
 8000440:	2000098c 	.word	0x2000098c

08000444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_IRQHandler>
	...

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044c:	222c      	movs	r2, #44	; 0x2c
 800044e:	2100      	movs	r1, #0
 8000450:	a809      	add	r0, sp, #36	; 0x24
 8000452:	f005 fc84 	bl	8005d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	2210      	movs	r2, #16
 8000458:	2100      	movs	r1, #0
 800045a:	4668      	mov	r0, sp
 800045c:	f005 fc7f 	bl	8005d5e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	2210      	movs	r2, #16
 8000462:	2100      	movs	r1, #0
 8000464:	a804      	add	r0, sp, #16
 8000466:	f005 fc7a 	bl	8005d5e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800046a:	2312      	movs	r3, #18
 800046c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	3b10      	subs	r3, #16
 8000470:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000472:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000478:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800047e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000482:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000484:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f002 fbe5 	bl	8002c54 <HAL_RCC_OscConfig>
 800048a:	2800      	cmp	r0, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	2207      	movs	r2, #7
 8000494:	2302      	movs	r3, #2
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800049e:	2101      	movs	r1, #1
 80004a0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	9202      	str	r2, [sp, #8]
 80004a4:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a6:	f002 fe2f 	bl	8003108 <HAL_RCC_ClockConfig>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x6a>
 80004ae:	b672      	cpsid	i
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <SystemClock_Config+0x68>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004b2:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004b6:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b8:	f002 ff3c 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	2800      	cmp	r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x7c>
 80004c0:	b672      	cpsid	i
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <SystemClock_Config+0x7a>
  HAL_RCC_EnableCSS();
 80004c4:	f002 fede 	bl	8003284 <HAL_RCC_EnableCSS>
}
 80004c8:	b015      	add	sp, #84	; 0x54
 80004ca:	bd30      	pop	{r4, r5, pc}

080004cc <main>:
{
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80004d0:	f002 f8be 	bl	8002650 <HAL_Init>
  SystemClock_Config();
 80004d4:	f7ff ffb8 	bl	8000448 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	2214      	movs	r2, #20
 80004da:	2100      	movs	r1, #0
 80004dc:	a80e      	add	r0, sp, #56	; 0x38
 80004de:	f005 fc3e 	bl	8005d5e <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	4cd5      	ldr	r4, [pc, #852]	; (800083c <main+0x370>)
 80004e6:	03c9      	lsls	r1, r1, #15
 80004e8:	6962      	ldr	r2, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80004ea:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ec:	430a      	orrs	r2, r1
 80004ee:	6162      	str	r2, [r4, #20]
 80004f0:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80004f2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f4:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	6962      	ldr	r2, [r4, #20]
 80004fe:	0289      	lsls	r1, r1, #10
 8000500:	430a      	orrs	r2, r1
 8000502:	6162      	str	r2, [r4, #20]
 8000504:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000506:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	9302      	str	r3, [sp, #8]
 800050e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000510:	6962      	ldr	r2, [r4, #20]
 8000512:	02c9      	lsls	r1, r1, #11
 8000514:	430a      	orrs	r2, r1
 8000516:	6162      	str	r2, [r4, #20]
 8000518:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800051e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000522:	0109      	lsls	r1, r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000526:	f002 fb8f 	bl	8002c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	2090      	movs	r0, #144	; 0x90
 800052e:	2200      	movs	r2, #0
 8000530:	0149      	lsls	r1, r1, #5
 8000532:	05c0      	lsls	r0, r0, #23
 8000534:	f002 fb88 	bl	8002c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY2_GPIO_Port, OCTH_STBY2_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	48c0      	ldr	r0, [pc, #768]	; (8000840 <main+0x374>)
 800053e:	f002 fb83 	bl	8002c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY1_GPIO_Port, OCTH_STBY1_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	48be      	ldr	r0, [pc, #760]	; (8000840 <main+0x374>)
 8000548:	f002 fb7e 	bl	8002c48 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800054c:	2384      	movs	r3, #132	; 0x84
 800054e:	2201      	movs	r2, #1
 8000550:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000552:	48bb      	ldr	r0, [pc, #748]	; (8000840 <main+0x374>)
 8000554:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000556:	920e      	str	r2, [sp, #56]	; 0x38
 8000558:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055a:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800055c:	f002 fa68 	bl	8002a30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8000560:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8000564:	2301      	movs	r3, #1
 8000566:	2602      	movs	r6, #2
 8000568:	2700      	movs	r7, #0
 800056a:	0152      	lsls	r2, r2, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	a90e      	add	r1, sp, #56	; 0x38
 800056e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8000570:	920e      	str	r2, [sp, #56]	; 0x38
 8000572:	930f      	str	r3, [sp, #60]	; 0x3c
 8000574:	9610      	str	r6, [sp, #64]	; 0x40
 8000576:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f002 fa5a 	bl	8002a30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 800057c:	22c0      	movs	r2, #192	; 0xc0
 800057e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000580:	48af      	ldr	r0, [pc, #700]	; (8000840 <main+0x374>)
 8000582:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 8000584:	920e      	str	r2, [sp, #56]	; 0x38
 8000586:	930f      	str	r3, [sp, #60]	; 0x3c
 8000588:	9610      	str	r6, [sp, #64]	; 0x40
 800058a:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800058c:	f002 fa50 	bl	8002a30 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000590:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000594:	432b      	orrs	r3, r5
 8000596:	6163      	str	r3, [r4, #20]
 8000598:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059c:	402b      	ands	r3, r5
 800059e:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a0:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	9b00      	ldr	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a4:	f005 fbdb 	bl	8005d5e <memset>
  hadc.Instance = ADC1;
 80005a8:	4ca6      	ldr	r4, [pc, #664]	; (8000844 <main+0x378>)
 80005aa:	4ba7      	ldr	r3, [pc, #668]	; (8000848 <main+0x37c>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ac:	2704      	movs	r7, #4
  hadc.Instance = ADC1;
 80005ae:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	60a3      	str	r3, [r4, #8]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005b6:	61a3      	str	r3, [r4, #24]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80005b8:	61e3      	str	r3, [r4, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80005c0:	2324      	movs	r3, #36	; 0x24
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80005c2:	361e      	adds	r6, #30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005c4:	0020      	movs	r0, r4
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80005c6:	60e6      	str	r6, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005c8:	6125      	str	r5, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	6167      	str	r7, [r4, #20]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80005cc:	54e5      	strb	r5, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ce:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005d0:	f002 f860 	bl	8002694 <HAL_ADC_Init>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d001      	beq.n	80005dc <main+0x110>
 80005d8:	b672      	cpsid	i
  while (1)
 80005da:	e7fe      	b.n	80005da <main+0x10e>
  sConfig.Channel = ADC_CHANNEL_3;
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	2203      	movs	r2, #3
 80005e0:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005e2:	0020      	movs	r0, r4
 80005e4:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_3;
 80005e6:	920e      	str	r2, [sp, #56]	; 0x38
 80005e8:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80005ea:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005ec:	f002 f8fc 	bl	80027e8 <HAL_ADC_ConfigChannel>
 80005f0:	2800      	cmp	r0, #0
 80005f2:	d001      	beq.n	80005f8 <main+0x12c>
 80005f4:	b672      	cpsid	i
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x12a>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005f8:	0020      	movs	r0, r4
 80005fa:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 80005fc:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005fe:	f002 f8f3 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8000602:	2800      	cmp	r0, #0
 8000604:	d001      	beq.n	800060a <main+0x13e>
 8000606:	b672      	cpsid	i
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x13c>
  sConfig.Channel = ADC_CHANNEL_5;
 800060a:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800060c:	0020      	movs	r0, r4
 800060e:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 8000610:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000612:	f002 f8e9 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8000616:	2800      	cmp	r0, #0
 8000618:	d001      	beq.n	800061e <main+0x152>
 800061a:	b672      	cpsid	i
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x150>
  sConfig.Channel = ADC_CHANNEL_9;
 800061e:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000620:	0020      	movs	r0, r4
 8000622:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 8000624:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000626:	f002 f8df 	bl	80027e8 <HAL_ADC_ConfigChannel>
 800062a:	1e07      	subs	r7, r0, #0
 800062c:	d001      	beq.n	8000632 <main+0x166>
 800062e:	b672      	cpsid	i
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x164>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	0001      	movs	r1, r0
 8000634:	2208      	movs	r2, #8
 8000636:	a804      	add	r0, sp, #16
 8000638:	f005 fb91 	bl	8005d5e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063c:	221c      	movs	r2, #28
 800063e:	0039      	movs	r1, r7
 8000640:	a806      	add	r0, sp, #24
 8000642:	f005 fb8c 	bl	8005d5e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000646:	2220      	movs	r2, #32
 8000648:	0039      	movs	r1, r7
 800064a:	a80e      	add	r0, sp, #56	; 0x38
 800064c:	f005 fb87 	bl	8005d5e <memset>
  htim1.Instance = TIM1;
 8000650:	4c7e      	ldr	r4, [pc, #504]	; (800084c <main+0x380>)
 8000652:	4b7f      	ldr	r3, [pc, #508]	; (8000850 <main+0x384>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000654:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8000656:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000658:	4b7e      	ldr	r3, [pc, #504]	; (8000854 <main+0x388>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800065a:	6067      	str	r7, [r4, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800065c:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	005b      	lsls	r3, r3, #1
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000662:	60a6      	str	r6, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000664:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000666:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800066a:	f002 ff79 	bl	8003560 <HAL_TIM_PWM_Init>
 800066e:	2800      	cmp	r0, #0
 8000670:	d001      	beq.n	8000676 <main+0x1aa>
 8000672:	b672      	cpsid	i
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x1a8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000676:	2270      	movs	r2, #112	; 0x70
 8000678:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800067a:	0020      	movs	r0, r4
 800067c:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800067e:	9204      	str	r2, [sp, #16]
 8000680:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000682:	f003 fad5 	bl	8003c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000686:	1e02      	subs	r2, r0, #0
 8000688:	d001      	beq.n	800068e <main+0x1c2>
 800068a:	b672      	cpsid	i
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x1c0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068e:	2060      	movs	r0, #96	; 0x60
 8000690:	2100      	movs	r1, #0
 8000692:	9006      	str	r0, [sp, #24]
 8000694:	9107      	str	r1, [sp, #28]
 8000696:	2000      	movs	r0, #0
 8000698:	2100      	movs	r1, #0
 800069a:	9008      	str	r0, [sp, #32]
 800069c:	9109      	str	r1, [sp, #36]	; 0x24
 800069e:	900a      	str	r0, [sp, #40]	; 0x28
 80006a0:	910b      	str	r1, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a2:	0020      	movs	r0, r4
 80006a4:	a906      	add	r1, sp, #24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006a6:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a8:	f002 ffd2 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d001      	beq.n	80006b4 <main+0x1e8>
 80006b0:	b672      	cpsid	i
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x1e6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b4:	2204      	movs	r2, #4
 80006b6:	0020      	movs	r0, r4
 80006b8:	a906      	add	r1, sp, #24
 80006ba:	f002 ffc9 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 80006be:	2800      	cmp	r0, #0
 80006c0:	d001      	beq.n	80006c6 <main+0x1fa>
 80006c2:	b672      	cpsid	i
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x1f8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c6:	2208      	movs	r2, #8
 80006c8:	0020      	movs	r0, r4
 80006ca:	a906      	add	r1, sp, #24
 80006cc:	f002 ffc0 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d001      	beq.n	80006d8 <main+0x20c>
 80006d4:	b672      	cpsid	i
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <main+0x20a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80006d8:	2270      	movs	r2, #112	; 0x70
 80006da:	4b5f      	ldr	r3, [pc, #380]	; (8000858 <main+0x38c>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006dc:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80006de:	9206      	str	r2, [sp, #24]
 80006e0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006e2:	a906      	add	r1, sp, #24
 80006e4:	3a64      	subs	r2, #100	; 0x64
 80006e6:	f002 ffb3 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d001      	beq.n	80006f2 <main+0x226>
 80006ee:	b672      	cpsid	i
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x224>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	920e      	str	r2, [sp, #56]	; 0x38
 80006fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	2313      	movs	r3, #19
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	9210      	str	r2, [sp, #64]	; 0x40
 8000706:	9311      	str	r3, [sp, #68]	; 0x44
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	0152      	lsls	r2, r2, #5
 800070e:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000710:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000712:	a90e      	add	r1, sp, #56	; 0x38
 8000714:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000716:	9212      	str	r2, [sp, #72]	; 0x48
 8000718:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800071a:	f003 fab7 	bl	8003c8c <HAL_TIMEx_ConfigBreakDeadTime>
 800071e:	1e05      	subs	r5, r0, #0
 8000720:	d001      	beq.n	8000726 <main+0x25a>
 8000722:	b672      	cpsid	i
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x258>
  HAL_TIM_MspPostInit(&htim1);
 8000726:	0020      	movs	r0, r4
 8000728:	f001 fb48 	bl	8001dbc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072c:	2210      	movs	r2, #16
 800072e:	0029      	movs	r1, r5
 8000730:	a80e      	add	r0, sp, #56	; 0x38
 8000732:	f005 fb14 	bl	8005d5e <memset>
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000736:	2210      	movs	r2, #16
 8000738:	0029      	movs	r1, r5
 800073a:	a806      	add	r0, sp, #24
 800073c:	f005 fb0f 	bl	8005d5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	2208      	movs	r2, #8
 8000742:	0029      	movs	r1, r5
 8000744:	a804      	add	r0, sp, #16
 8000746:	f005 fb0a 	bl	8005d5e <memset>
  htim2.Instance = TIM2;
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	4c43      	ldr	r4, [pc, #268]	; (800085c <main+0x390>)
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000752:	4b43      	ldr	r3, [pc, #268]	; (8000860 <main+0x394>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000754:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 8000756:	6065      	str	r5, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 800075a:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000760:	f002 fe86 	bl	8003470 <HAL_TIM_Base_Init>
 8000764:	2800      	cmp	r0, #0
 8000766:	d001      	beq.n	800076c <main+0x2a0>
 8000768:	b672      	cpsid	i
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x29e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076e:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000772:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000776:	f003 f88d 	bl	8003894 <HAL_TIM_ConfigClockSource>
 800077a:	2800      	cmp	r0, #0
 800077c:	d001      	beq.n	8000782 <main+0x2b6>
 800077e:	b672      	cpsid	i
  while (1)
 8000780:	e7fe      	b.n	8000780 <main+0x2b4>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000782:	2200      	movs	r2, #0
 8000784:	2300      	movs	r3, #0
 8000786:	9206      	str	r2, [sp, #24]
 8000788:	9307      	str	r3, [sp, #28]
 800078a:	220f      	movs	r2, #15
 800078c:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800078e:	0020      	movs	r0, r4
 8000790:	a906      	add	r1, sp, #24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000792:	9208      	str	r2, [sp, #32]
 8000794:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000796:	f003 f9eb 	bl	8003b70 <HAL_TIMEx_HallSensor_Init>
 800079a:	2800      	cmp	r0, #0
 800079c:	d001      	beq.n	80007a2 <main+0x2d6>
 800079e:	b672      	cpsid	i
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x2d4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80007a2:	2300      	movs	r3, #0
 80007a4:	2250      	movs	r2, #80	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a6:	0020      	movs	r0, r4
 80007a8:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80007aa:	9204      	str	r2, [sp, #16]
 80007ac:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ae:	f003 fa3f 	bl	8003c30 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <main+0x2ee>
 80007b6:	b672      	cpsid	i
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x2ec>
  huart1.Instance = USART1;
 80007ba:	482a      	ldr	r0, [pc, #168]	; (8000864 <main+0x398>)
 80007bc:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <main+0x39c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 80007c0:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 38400;
 80007c2:	2296      	movs	r2, #150	; 0x96
 80007c4:	0212      	lsls	r2, r2, #8
 80007c6:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007cc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ce:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d2:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d4:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d6:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d8:	f003 fb6a 	bl	8003eb0 <HAL_UART_Init>
 80007dc:	1e04      	subs	r4, r0, #0
 80007de:	d001      	beq.n	80007e4 <main+0x318>
 80007e0:	b672      	cpsid	i
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <main+0x316>
  MX_MotorControl_Init();
 80007e4:	f000 fff6 	bl	80017d4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80007e8:	0022      	movs	r2, r4
 80007ea:	0021      	movs	r1, r4
 80007ec:	200d      	movs	r0, #13
 80007ee:	f002 f88d 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007f2:	200d      	movs	r0, #13
 80007f4:	f002 f8bc 	bl	8002970 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80007f8:	0022      	movs	r2, r4
 80007fa:	2101      	movs	r1, #1
 80007fc:	2009      	movs	r0, #9
 80007fe:	f002 f885 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000802:	2009      	movs	r0, #9
 8000804:	f002 f8b4 	bl	8002970 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000808:	0022      	movs	r2, r4
 800080a:	2103      	movs	r1, #3
 800080c:	200f      	movs	r0, #15
 800080e:	f002 f87d 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000812:	200f      	movs	r0, #15
 8000814:	f002 f8ac 	bl	8002970 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000818:	0022      	movs	r2, r4
 800081a:	2103      	movs	r1, #3
 800081c:	201b      	movs	r0, #27
 800081e:	f002 f875 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000822:	201b      	movs	r0, #27
 8000824:	f002 f8a4 	bl	8002970 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000828:	2005      	movs	r0, #5
 800082a:	0022      	movs	r2, r4
 800082c:	2103      	movs	r1, #3
 800082e:	f002 f86d 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000832:	2005      	movs	r0, #5
 8000834:	f002 f89c 	bl	8002970 <HAL_NVIC_EnableIRQ>
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0x36c>
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40021000 	.word	0x40021000
 8000840:	48001400 	.word	0x48001400
 8000844:	200005d8 	.word	0x200005d8
 8000848:	40012400 	.word	0x40012400
 800084c:	2000065c 	.word	0x2000065c
 8000850:	40012c00 	.word	0x40012c00
 8000854:	000006b2 	.word	0x000006b2
 8000858:	000006b1 	.word	0x000006b1
 800085c:	200006a4 	.word	0x200006a4
 8000860:	0000ffff 	.word	0x0000ffff
 8000864:	200006ec 	.word	0x200006ec
 8000868:	40013800 	.word	0x40013800

0800086c <Error_Handler>:
 800086c:	b672      	cpsid	i
  while (1)
 800086e:	e7fe      	b.n	800086e <Error_Handler+0x2>

08000870 <MC_StartMotor1>:
  * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8000870:	b510      	push	{r4, lr}
	return MCI_StartMotor( pMCI[M1] );
 8000872:	4b02      	ldr	r3, [pc, #8]	; (800087c <MC_StartMotor1+0xc>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	f000 f837 	bl	80008e8 <MCI_StartMotor>
}
 800087a:	bd10      	pop	{r4, pc}
 800087c:	20000878 	.word	0x20000878

08000880 <MC_StopMotor1>:
  * #IDLE state has been reached back.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8000880:	b510      	push	{r4, lr}
	return MCI_StopMotor( pMCI[M1] );
 8000882:	4b02      	ldr	r3, [pc, #8]	; (800088c <MC_StopMotor1+0xc>)
 8000884:	6818      	ldr	r0, [r3, #0]
 8000886:	f000 f83b 	bl	8000900 <MCI_StopMotor>
}
 800088a:	bd10      	pop	{r4, pc}
 800088c:	20000878 	.word	0x20000878

08000890 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
 8000890:	b510      	push	{r4, lr}
	return MCI_GetSTMState( pMCI[M1] );
 8000892:	4b02      	ldr	r3, [pc, #8]	; (800089c <MC_GetSTMStateMotor1+0xc>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	f000 f883 	bl	80009a0 <MCI_GetSTMState>
}
 800089a:	bd10      	pop	{r4, pc}
 800089c:	20000878 	.word	0x20000878

080008a0 <MCI_Init>:
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
 80008a0:	6083      	str	r3, [r0, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80008a2:	2300      	movs	r3, #0
  pHandle->pSTM = pSTM;
 80008a4:	6001      	str	r1, [r0, #0]
  pHandle->pSTC = pSTC;
 80008a6:	6042      	str	r2, [r0, #4]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80008a8:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80008aa:	81c3      	strh	r3, [r0, #14]
  pHandle->hFinalTorque = 0;
 80008ac:	8203      	strh	r3, [r0, #16]
  pHandle->hDurationms = 0;
 80008ae:	82c3      	strh	r3, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80008b0:	7603      	strb	r3, [r0, #24]
}
 80008b2:	4770      	bx	lr

080008b4 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008b8:	2302      	movs	r3, #2
 80008ba:	33ff      	adds	r3, #255	; 0xff
  pHandle->hFinalSpeed = hFinalSpeed;
 80008bc:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 80008be:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008c0:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 80008c2:	4770      	bx	lr

080008c4 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008c8:	3b01      	subs	r3, #1
  pHandle->hFinalTorque = hFinalTorque;
 80008ca:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 80008cc:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008ce:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80008d0:	4770      	bx	lr
 80008d2:	46c0      	nop			; (mov r8, r8)

080008d4 <MCI_SetCurrentReferences>:
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80008d4:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008d6:	2301      	movs	r3, #1
{
 80008d8:	b082      	sub	sp, #8
  pHandle->Iqdref.q = Iqdref.q;
 80008da:	8241      	strh	r1, [r0, #18]
  pHandle->Iqdref.d = Iqdref.d;
 80008dc:	0c09      	lsrs	r1, r1, #16
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80008de:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.d = Iqdref.d;
 80008e0:	8281      	strh	r1, [r0, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008e2:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80008e4:	b002      	add	sp, #8
 80008e6:	4770      	bx	lr

080008e8 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80008e8:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80008ea:	2103      	movs	r1, #3
{
 80008ec:	0004      	movs	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80008ee:	6800      	ldr	r0, [r0, #0]
 80008f0:	f005 f816 	bl	8005920 <STM_NextState>

  if ( RetVal == true )
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d001      	beq.n	80008fc <MCI_StartMotor+0x14>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008f8:	2301      	movs	r3, #1
 80008fa:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)

08000900 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 8000900:	b510      	push	{r4, lr}
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000902:	2107      	movs	r1, #7
 8000904:	6800      	ldr	r0, [r0, #0]
 8000906:	f005 f80b 	bl	8005920 <STM_NextState>
}
 800090a:	bd10      	pop	{r4, pc}

0800090c <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 800090c:	b510      	push	{r4, lr}
  return STM_FaultAcknowledged( pHandle->pSTM );
 800090e:	6800      	ldr	r0, [r0, #0]
 8000910:	f005 f87c 	bl	8005a0c <STM_FaultAcknowledged>
}
 8000914:	bd10      	pop	{r4, pc}
 8000916:	46c0      	nop			; (mov r8, r8)

08000918 <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8000918:	b510      	push	{r4, lr}
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 800091a:	2101      	movs	r1, #1
 800091c:	6800      	ldr	r0, [r0, #0]
 800091e:	f004 ffff 	bl	8005920 <STM_NextState>
}
 8000922:	bd10      	pop	{r4, pc}

08000924 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8000924:	b510      	push	{r4, lr}
 8000926:	1e04      	subs	r4, r0, #0
  if ( pHandle != MC_NULL )
 8000928:	d002      	beq.n	8000930 <MCI_ExecBufferedCommands+0xc>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800092a:	7e03      	ldrb	r3, [r0, #24]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d000      	beq.n	8000932 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000930:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000932:	7b02      	ldrb	r2, [r0, #12]
 8000934:	2a02      	cmp	r2, #2
 8000936:	d023      	beq.n	8000980 <MCI_ExecBufferedCommands+0x5c>
 8000938:	2a03      	cmp	r2, #3
 800093a:	d004      	beq.n	8000946 <MCI_ExecBufferedCommands+0x22>
 800093c:	2a01      	cmp	r2, #1
 800093e:	d00e      	beq.n	800095e <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000940:	2303      	movs	r3, #3
 8000942:	7623      	strb	r3, [r4, #24]
}
 8000944:	e7f4      	b.n	8000930 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000946:	2224      	movs	r2, #36	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000948:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800094a:	6880      	ldr	r0, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800094c:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800094e:	5483      	strb	r3, [r0, r2]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000950:	3010      	adds	r0, #16
 8000952:	3a20      	subs	r2, #32
 8000954:	f005 f9fa 	bl	8005d4c <memcpy>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000958:	2302      	movs	r3, #2
 800095a:	7623      	strb	r3, [r4, #24]
 800095c:	e7e8      	b.n	8000930 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800095e:	2200      	movs	r2, #0
 8000960:	6881      	ldr	r1, [r0, #8]
 8000962:	3323      	adds	r3, #35	; 0x23
 8000964:	54ca      	strb	r2, [r1, r3]
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000966:	6840      	ldr	r0, [r0, #4]
 8000968:	2101      	movs	r1, #1
 800096a:	f004 ff19 	bl	80057a0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 800096e:	8ae2      	ldrh	r2, [r4, #22]
 8000970:	230e      	movs	r3, #14
 8000972:	5ee1      	ldrsh	r1, [r4, r3]
 8000974:	6860      	ldr	r0, [r4, #4]
 8000976:	f004 ff17 	bl	80057a8 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800097a:	2800      	cmp	r0, #0
 800097c:	d0e0      	beq.n	8000940 <MCI_ExecBufferedCommands+0x1c>
 800097e:	e7eb      	b.n	8000958 <MCI_ExecBufferedCommands+0x34>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000980:	2324      	movs	r3, #36	; 0x24
 8000982:	2200      	movs	r2, #0
 8000984:	6881      	ldr	r1, [r0, #8]
 8000986:	54ca      	strb	r2, [r1, r3]
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000988:	6840      	ldr	r0, [r0, #4]
 800098a:	2100      	movs	r1, #0
 800098c:	f004 ff08 	bl	80057a0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000990:	8ae2      	ldrh	r2, [r4, #22]
 8000992:	2310      	movs	r3, #16
 8000994:	5ee1      	ldrsh	r1, [r4, r3]
 8000996:	6860      	ldr	r0, [r4, #4]
 8000998:	f004 ff06 	bl	80057a8 <STC_ExecRamp>
        break;
 800099c:	e7ed      	b.n	800097a <MCI_ExecBufferedCommands+0x56>
 800099e:	46c0      	nop			; (mov r8, r8)

080009a0 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 80009a0:	b510      	push	{r4, lr}
  return STM_GetState( pHandle->pSTM );
 80009a2:	6800      	ldr	r0, [r0, #0]
 80009a4:	f005 f830 	bl	8005a08 <STM_GetState>
}
 80009a8:	bd10      	pop	{r4, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)

080009ac <MCI_GetControlMode>:
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
 80009ac:	7e40      	ldrb	r0, [r0, #25]
}
 80009ae:	4770      	bx	lr

080009b0 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 80009b0:	7b02      	ldrb	r2, [r0, #12]
{
 80009b2:	0003      	movs	r3, r0
  int16_t hRetVal = 0;
 80009b4:	2000      	movs	r0, #0
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 80009b6:	2a01      	cmp	r2, #1
 80009b8:	d101      	bne.n	80009be <MCI_GetLastRampFinalSpeed+0xe>
  {
    hRetVal = pHandle->hFinalSpeed;
 80009ba:	200e      	movs	r0, #14
 80009bc:	5e18      	ldrsh	r0, [r3, r0]
  }
  return hRetVal;
}
 80009be:	4770      	bx	lr

080009c0 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 80009c0:	b510      	push	{r4, lr}
   STC_StopRamp( pHandle->pSTC );
 80009c2:	6840      	ldr	r0, [r0, #4]
 80009c4:	f004 ff36 	bl	8005834 <STC_StopRamp>
}
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)

080009cc <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80009cc:	b510      	push	{r4, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80009ce:	6840      	ldr	r0, [r0, #4]
 80009d0:	f004 feca 	bl	8005768 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80009d4:	f004 fe72 	bl	80056bc <SPD_GetAvrgMecSpeedUnit>
}
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	46c0      	nop			; (mov r8, r8)

080009dc <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 80009dc:	b510      	push	{r4, lr}
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80009de:	6840      	ldr	r0, [r0, #4]
 80009e0:	f004 fece 	bl	8005780 <STC_GetMecSpeedRefUnit>
}
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)

080009e8 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 80009e8:	b500      	push	{lr}
 80009ea:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iab );
 80009ec:	6881      	ldr	r1, [r0, #8]
 80009ee:	2204      	movs	r2, #4
 80009f0:	a801      	add	r0, sp, #4
 80009f2:	f005 f9ab 	bl	8005d4c <memcpy>
 80009f6:	466b      	mov	r3, sp
 80009f8:	466a      	mov	r2, sp
 80009fa:	88db      	ldrh	r3, [r3, #6]
 80009fc:	8890      	ldrh	r0, [r2, #4]
 80009fe:	041b      	lsls	r3, r3, #16
 8000a00:	4318      	orrs	r0, r3
}
 8000a02:	b003      	add	sp, #12
 8000a04:	bd00      	pop	{pc}
 8000a06:	46c0      	nop			; (mov r8, r8)

08000a08 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8000a08:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Ialphabeta );
 8000a0a:	6881      	ldr	r1, [r0, #8]
{
 8000a0c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Ialphabeta );
 8000a0e:	2204      	movs	r2, #4
 8000a10:	3104      	adds	r1, #4
 8000a12:	a801      	add	r0, sp, #4
 8000a14:	f005 f99a 	bl	8005d4c <memcpy>
 8000a18:	466b      	mov	r3, sp
 8000a1a:	466a      	mov	r2, sp
 8000a1c:	88db      	ldrh	r3, [r3, #6]
 8000a1e:	8890      	ldrh	r0, [r2, #4]
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	4318      	orrs	r0, r3
}
 8000a24:	b003      	add	sp, #12
 8000a26:	bd00      	pop	{pc}

08000a28 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 8000a28:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Iqd );
 8000a2a:	6881      	ldr	r1, [r0, #8]
{
 8000a2c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iqd );
 8000a2e:	2204      	movs	r2, #4
 8000a30:	310c      	adds	r1, #12
 8000a32:	a801      	add	r0, sp, #4
 8000a34:	f005 f98a 	bl	8005d4c <memcpy>
 8000a38:	466b      	mov	r3, sp
 8000a3a:	466a      	mov	r2, sp
 8000a3c:	88db      	ldrh	r3, [r3, #6]
 8000a3e:	8890      	ldrh	r0, [r2, #4]
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	4318      	orrs	r0, r3
}
 8000a44:	b003      	add	sp, #12
 8000a46:	bd00      	pop	{pc}

08000a48 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 8000a48:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Iqdref );
 8000a4a:	6881      	ldr	r1, [r0, #8]
{
 8000a4c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iqdref );
 8000a4e:	2204      	movs	r2, #4
 8000a50:	3110      	adds	r1, #16
 8000a52:	a801      	add	r0, sp, #4
 8000a54:	f005 f97a 	bl	8005d4c <memcpy>
 8000a58:	466b      	mov	r3, sp
 8000a5a:	466a      	mov	r2, sp
 8000a5c:	88db      	ldrh	r3, [r3, #6]
 8000a5e:	8890      	ldrh	r0, [r2, #4]
 8000a60:	041b      	lsls	r3, r3, #16
 8000a62:	4318      	orrs	r0, r3
}
 8000a64:	b003      	add	sp, #12
 8000a66:	bd00      	pop	{pc}

08000a68 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 8000a68:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Vqd );
 8000a6a:	6881      	ldr	r1, [r0, #8]
{
 8000a6c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Vqd );
 8000a6e:	2204      	movs	r2, #4
 8000a70:	3116      	adds	r1, #22
 8000a72:	a801      	add	r0, sp, #4
 8000a74:	f005 f96a 	bl	8005d4c <memcpy>
 8000a78:	466b      	mov	r3, sp
 8000a7a:	466a      	mov	r2, sp
 8000a7c:	88db      	ldrh	r3, [r3, #6]
 8000a7e:	8890      	ldrh	r0, [r2, #4]
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	4318      	orrs	r0, r3
}
 8000a84:	b003      	add	sp, #12
 8000a86:	bd00      	pop	{pc}

08000a88 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8000a88:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Valphabeta );
 8000a8a:	6881      	ldr	r1, [r0, #8]
{
 8000a8c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Valphabeta );
 8000a8e:	2204      	movs	r2, #4
 8000a90:	311a      	adds	r1, #26
 8000a92:	a801      	add	r0, sp, #4
 8000a94:	f005 f95a 	bl	8005d4c <memcpy>
 8000a98:	466b      	mov	r3, sp
 8000a9a:	466a      	mov	r2, sp
 8000a9c:	88db      	ldrh	r3, [r3, #6]
 8000a9e:	8890      	ldrh	r0, [r2, #4]
 8000aa0:	041b      	lsls	r3, r3, #16
 8000aa2:	4318      	orrs	r0, r3
}
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd00      	pop	{pc}

08000aa8 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000aa8:	6883      	ldr	r3, [r0, #8]
 8000aaa:	201e      	movs	r0, #30
 8000aac:	5e18      	ldrsh	r0, [r3, r0]
}
 8000aae:	4770      	bx	lr

08000ab0 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000ab0:	6883      	ldr	r3, [r0, #8]
 8000ab2:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000ab4:	8299      	strh	r1, [r3, #20]
}
 8000ab6:	4770      	bx	lr

08000ab8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000ab8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000aba:	6884      	ldr	r4, [r0, #8]
 8000abc:	6840      	ldr	r0, [r0, #4]
 8000abe:	f004 feff 	bl	80058c0 <STC_GetDefaultIqdref>
 8000ac2:	8220      	strh	r0, [r4, #16]
 8000ac4:	0c00      	lsrs	r0, r0, #16
 8000ac6:	8260      	strh	r0, [r4, #18]
}
 8000ac8:	bd10      	pop	{r4, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)

08000acc <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000acc:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <MCM_Clarke+0x48>)
 8000ace:	b201      	sxth	r1, r0
 8000ad0:	1400      	asrs	r0, r0, #16
 8000ad2:	4350      	muls	r0, r2
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000ad4:	434a      	muls	r2, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000ad6:	4253      	negs	r3, r2
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000ad8:	2280      	movs	r2, #128	; 0x80
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	1a1b      	subs	r3, r3, r0
{
 8000ade:	b084      	sub	sp, #16
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000ae0:	13db      	asrs	r3, r3, #15
  if ( wbeta_tmp > INT16_MAX )
 8000ae2:	0212      	lsls	r2, r2, #8
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	da04      	bge.n	8000af2 <MCM_Clarke+0x26>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <MCM_Clarke+0x4c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	da08      	bge.n	8000b00 <MCM_Clarke+0x34>
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MCM_Clarke+0x50>)
 8000af0:	e000      	b.n	8000af4 <MCM_Clarke+0x28>
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MCM_Clarke+0x54>)
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000af4:	0409      	lsls	r1, r1, #16
 8000af6:	041b      	lsls	r3, r3, #16
 8000af8:	0c08      	lsrs	r0, r1, #16
 8000afa:	4318      	orrs	r0, r3
}
 8000afc:	b004      	add	sp, #16
 8000afe:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <MCM_Clarke+0x50>)
 8000b02:	1c18      	adds	r0, r3, #0
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4293      	cmp	r3, r2
 8000b08:	db01      	blt.n	8000b0e <MCM_Clarke+0x42>
 8000b0a:	b203      	sxth	r3, r0
 8000b0c:	e7f2      	b.n	8000af4 <MCM_Clarke+0x28>
 8000b0e:	1c10      	adds	r0, r2, #0
 8000b10:	b203      	sxth	r3, r0
 8000b12:	e7ef      	b.n	8000af4 <MCM_Clarke+0x28>
 8000b14:	000049e6 	.word	0x000049e6
 8000b18:	ffff8000 	.word	0xffff8000
 8000b1c:	ffff8001 	.word	0xffff8001
 8000b20:	00007fff 	.word	0x00007fff

08000b24 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0209      	lsls	r1, r1, #8
 8000b28:	468c      	mov	ip, r1
 8000b2a:	4460      	add	r0, ip
  uhindex = ( uint16_t )shindex;
 8000b2c:	b280      	uxth	r0, r0
{
 8000b2e:	b530      	push	{r4, r5, lr}
  uhindex /= ( uint16_t )64;
 8000b30:	0980      	lsrs	r0, r0, #6

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000b32:	24c0      	movs	r4, #192	; 0xc0
 8000b34:	0001      	movs	r1, r0
 8000b36:	2580      	movs	r5, #128	; 0x80
 8000b38:	00a4      	lsls	r4, r4, #2
{
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	b083      	sub	sp, #12
 8000b40:	4021      	ands	r1, r4
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000b42:	00ad      	lsls	r5, r5, #2
 8000b44:	42a9      	cmp	r1, r5
 8000b46:	d023      	beq.n	8000b90 <MCM_Trig_Functions+0x6c>
 8000b48:	d815      	bhi.n	8000b76 <MCM_Trig_Functions+0x52>
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d029      	beq.n	8000ba2 <MCM_Trig_Functions+0x7e>
 8000b4e:	2480      	movs	r4, #128	; 0x80
 8000b50:	0064      	lsls	r4, r4, #1
 8000b52:	42a1      	cmp	r1, r4
 8000b54:	d109      	bne.n	8000b6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b56:	b2c0      	uxtb	r0, r0
 8000b58:	43c3      	mvns	r3, r0
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <MCM_Trig_Functions+0x98>)
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	5a9b      	ldrh	r3, [r3, r2]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b62:	0040      	lsls	r0, r0, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b64:	425b      	negs	r3, r3
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b66:	5e82      	ldrsh	r2, [r0, r2]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b68:	b21b      	sxth	r3, r3
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000b6a:	0412      	lsls	r2, r2, #16
 8000b6c:	041b      	lsls	r3, r3, #16
 8000b6e:	0c10      	lsrs	r0, r2, #16
 8000b70:	4318      	orrs	r0, r3
}
 8000b72:	b003      	add	sp, #12
 8000b74:	bd30      	pop	{r4, r5, pc}
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000b76:	42a1      	cmp	r1, r4
 8000b78:	d1f7      	bne.n	8000b6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b7a:	b2c0      	uxtb	r0, r0
 8000b7c:	43c3      	mvns	r3, r0
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <MCM_Trig_Functions+0x98>)
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	005b      	lsls	r3, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b84:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b86:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b88:	5a82      	ldrh	r2, [r0, r2]
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	b212      	sxth	r2, r2
      break;
 8000b8e:	e7ec      	b.n	8000b6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b90:	b2c0      	uxtb	r0, r0
 8000b92:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b94:	43c0      	mvns	r0, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b98:	b2c0      	uxtb	r0, r0
 8000b9a:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b9c:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b9e:	5e82      	ldrsh	r2, [r0, r2]
      break;
 8000ba0:	e7e3      	b.n	8000b6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ba2:	b2c0      	uxtb	r0, r0
 8000ba4:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ba6:	43c0      	mvns	r0, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000baa:	b2c0      	uxtb	r0, r0
 8000bac:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bae:	5a9b      	ldrh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bb0:	5a82      	ldrh	r2, [r0, r2]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bb2:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bb4:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bb6:	b21b      	sxth	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bb8:	b212      	sxth	r2, r2
      break;
 8000bba:	e7d6      	b.n	8000b6a <MCM_Trig_Functions+0x46>
 8000bbc:	08005d88 	.word	0x08005d88

08000bc0 <MCM_Park>:
{
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	9001      	str	r0, [sp, #4]
 8000bc6:	b205      	sxth	r5, r0
 8000bc8:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000bca:	0008      	movs	r0, r1
 8000bcc:	f7ff ffaa 	bl	8000b24 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000bd0:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000bd2:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000bd4:	000b      	movs	r3, r1
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000bd6:	0002      	movs	r2, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000bd8:	436b      	muls	r3, r5
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000bda:	4362      	muls	r2, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000bdc:	1a9b      	subs	r3, r3, r2
  if ( wqd_tmp > INT16_MAX )
 8000bde:	2280      	movs	r2, #128	; 0x80
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000be0:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000be2:	0212      	lsls	r2, r2, #8
 8000be4:	4293      	cmp	r3, r2
 8000be6:	da12      	bge.n	8000c0e <MCM_Park+0x4e>
  else if ( wqd_tmp < ( -32768 ) )
 8000be8:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <MCM_Park+0x94>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	da24      	bge.n	8000c38 <MCM_Park+0x78>
  if ( wqd_tmp > INT16_MAX )
 8000bee:	2380      	movs	r3, #128	; 0x80
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8000bf0:	4368      	muls	r0, r5
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000bf2:	4361      	muls	r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000bf4:	1840      	adds	r0, r0, r1
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <MCM_Park+0x98>)
 8000bf8:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	4298      	cmp	r0, r3
 8000bfe:	db0f      	blt.n	8000c20 <MCM_Park+0x60>
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MCM_Park+0x9c>)
  return ( Output );
 8000c02:	0410      	lsls	r0, r2, #16
 8000c04:	041b      	lsls	r3, r3, #16
 8000c06:	0c00      	lsrs	r0, r0, #16
 8000c08:	4318      	orrs	r0, r3
}
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MCM_Park+0x9c>)
  if ( wqd_tmp > INT16_MAX )
 8000c10:	2380      	movs	r3, #128	; 0x80
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8000c12:	4368      	muls	r0, r5
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000c14:	4361      	muls	r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000c16:	1840      	adds	r0, r0, r1
 8000c18:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	4298      	cmp	r0, r3
 8000c1e:	daef      	bge.n	8000c00 <MCM_Park+0x40>
  else if ( wqd_tmp < ( -32768 ) )
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MCM_Park+0x94>)
 8000c22:	4298      	cmp	r0, r3
 8000c24:	da01      	bge.n	8000c2a <MCM_Park+0x6a>
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MCM_Park+0x98>)
 8000c28:	e7eb      	b.n	8000c02 <MCM_Park+0x42>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000c2a:	490b      	ldr	r1, [pc, #44]	; (8000c58 <MCM_Park+0x98>)
 8000c2c:	1c03      	adds	r3, r0, #0
 8000c2e:	b200      	sxth	r0, r0
 8000c30:	4288      	cmp	r0, r1
 8000c32:	db0b      	blt.n	8000c4c <MCM_Park+0x8c>
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	e7e4      	b.n	8000c02 <MCM_Park+0x42>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000c38:	4e07      	ldr	r6, [pc, #28]	; (8000c58 <MCM_Park+0x98>)
 8000c3a:	1c1a      	adds	r2, r3, #0
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	42b3      	cmp	r3, r6
 8000c40:	db01      	blt.n	8000c46 <MCM_Park+0x86>
 8000c42:	b212      	sxth	r2, r2
 8000c44:	e7e4      	b.n	8000c10 <MCM_Park+0x50>
 8000c46:	1c32      	adds	r2, r6, #0
 8000c48:	b212      	sxth	r2, r2
 8000c4a:	e7e1      	b.n	8000c10 <MCM_Park+0x50>
 8000c4c:	1c0b      	adds	r3, r1, #0
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	e7d7      	b.n	8000c02 <MCM_Park+0x42>
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	ffff8000 	.word	0xffff8000
 8000c58:	ffff8001 	.word	0xffff8001
 8000c5c:	00007fff 	.word	0x00007fff

08000c60 <MCM_Rev_Park>:
{
 8000c60:	b530      	push	{r4, r5, lr}
 8000c62:	b085      	sub	sp, #20
 8000c64:	b205      	sxth	r5, r0
 8000c66:	9001      	str	r0, [sp, #4]
 8000c68:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000c6a:	0008      	movs	r0, r1
 8000c6c:	f7ff ff5a 	bl	8000b24 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000c70:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000c72:	1400      	asrs	r0, r0, #16
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000c74:	0013      	movs	r3, r2
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000c76:	0001      	movs	r1, r0
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000c78:	436b      	muls	r3, r5
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000c7a:	4361      	muls	r1, r4
  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8000c7c:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000c7e:	4354      	muls	r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000c80:	185b      	adds	r3, r3, r1
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000c82:	1a20      	subs	r0, r4, r0
 8000c84:	13c0      	asrs	r0, r0, #15
  return ( Output );
 8000c86:	005c      	lsls	r4, r3, #1
 8000c88:	0c24      	lsrs	r4, r4, #16
 8000c8a:	0400      	lsls	r0, r0, #16
 8000c8c:	4320      	orrs	r0, r4
}
 8000c8e:	b005      	add	sp, #20
 8000c90:	bd30      	pop	{r4, r5, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)

08000c94 <FOC_Clear>:
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000c94:	2126      	movs	r1, #38	; 0x26
 8000c96:	2200      	movs	r2, #0
 8000c98:	4341      	muls	r1, r0
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <FOC_Clear+0x50>)
{
 8000c9c:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8000c9e:	52ca      	strh	r2, [r1, r3]
 8000ca0:	185b      	adds	r3, r3, r1
 8000ca2:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000ca4:	809a      	strh	r2, [r3, #4]
 8000ca6:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ca8:	819a      	strh	r2, [r3, #12]
 8000caa:	81da      	strh	r2, [r3, #14]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8000cac:	821a      	strh	r2, [r3, #16]
 8000cae:	825a      	strh	r2, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000cb0:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000cb2:	82da      	strh	r2, [r3, #22]
 8000cb4:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8000cb6:	835a      	strh	r2, [r3, #26]
 8000cb8:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000cba:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <FOC_Clear+0x54>)
 8000cbe:	0084      	lsls	r4, r0, #2
 8000cc0:	58e0      	ldr	r0, [r4, r3]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 feee 	bl	8004aa4 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <FOC_Clear+0x58>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	58e0      	ldr	r0, [r4, r3]
 8000cce:	f003 fee9 	bl	8004aa4 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <FOC_Clear+0x5c>)
 8000cd4:	58e0      	ldr	r0, [r4, r3]
 8000cd6:	f004 fd49 	bl	800576c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <FOC_Clear+0x60>)
 8000cdc:	58e0      	ldr	r0, [r4, r3]
 8000cde:	f004 f881 	bl	8004de4 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000ce2:	bd10      	pop	{r4, pc}
 8000ce4:	2000079c 	.word	0x2000079c
 8000ce8:	20000858 	.word	0x20000858
 8000cec:	20000854 	.word	0x20000854
 8000cf0:	20000864 	.word	0x20000864
 8000cf4:	2000086c 	.word	0x2000086c

08000cf8 <MCboot>:
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	46de      	mov	lr, fp
 8000cfc:	4657      	mov	r7, sl
 8000cfe:	464e      	mov	r6, r9
 8000d00:	4645      	mov	r5, r8
  bMCBootCompleted = 0;
 8000d02:	2400      	movs	r4, #0
{
 8000d04:	b5e0      	push	{r5, r6, r7, lr}
 8000d06:	b087      	sub	sp, #28
 8000d08:	9002      	str	r0, [sp, #8]
  STM_Init(&STM[M1]);
 8000d0a:	4853      	ldr	r0, [pc, #332]	; (8000e58 <MCboot+0x160>)
{
 8000d0c:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 8000d0e:	f004 fde7 	bl	80058e0 <STM_Init>
  bMCBootCompleted = 0;
 8000d12:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <MCboot+0x164>)
  pCLM[M1] = &CircleLimitationM1;
 8000d14:	4a52      	ldr	r2, [pc, #328]	; (8000e60 <MCboot+0x168>)
  bMCBootCompleted = 0;
 8000d16:	701c      	strb	r4, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000d18:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <MCboot+0x16c>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000d1a:	4853      	ldr	r0, [pc, #332]	; (8000e68 <MCboot+0x170>)
  pCLM[M1] = &CircleLimitationM1;
 8000d1c:	601a      	str	r2, [r3, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000d1e:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <MCboot+0x174>)
 8000d20:	6018      	str	r0, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8000d22:	f004 f995 	bl	8005050 <R3_1_Init>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000d26:	4d52      	ldr	r5, [pc, #328]	; (8000e70 <MCboot+0x178>)
 8000d28:	0028      	movs	r0, r5
 8000d2a:	f003 fea7 	bl	8004a7c <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000d2e:	4b51      	ldr	r3, [pc, #324]	; (8000e74 <MCboot+0x17c>)
  HALL_Init (&HALL_M1);
 8000d30:	4851      	ldr	r0, [pc, #324]	; (8000e78 <MCboot+0x180>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000d32:	4698      	mov	r8, r3
 8000d34:	601d      	str	r5, [r3, #0]
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000d36:	4d51      	ldr	r5, [pc, #324]	; (8000e7c <MCboot+0x184>)
 8000d38:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <MCboot+0x188>)
 8000d3a:	602b      	str	r3, [r5, #0]
  HALL_Init (&HALL_M1);
 8000d3c:	f003 fa1c 	bl	8004178 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000d40:	4643      	mov	r3, r8
 8000d42:	4a4d      	ldr	r2, [pc, #308]	; (8000e78 <MCboot+0x180>)
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	6828      	ldr	r0, [r5, #0]
 8000d48:	f004 fcfc 	bl	8005744 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000d4c:	4f4d      	ldr	r7, [pc, #308]	; (8000e84 <MCboot+0x18c>)
 8000d4e:	0038      	movs	r0, r7
 8000d50:	f003 fe94 	bl	8004a7c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000d54:	4e4c      	ldr	r6, [pc, #304]	; (8000e88 <MCboot+0x190>)
 8000d56:	0030      	movs	r0, r6
 8000d58:	f003 fe90 	bl	8004a7c <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <MCboot+0x194>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d5e:	484c      	ldr	r0, [pc, #304]	; (8000e90 <MCboot+0x198>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000d60:	601f      	str	r7, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000d62:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <MCboot+0x19c>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d64:	4f4c      	ldr	r7, [pc, #304]	; (8000e98 <MCboot+0x1a0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000d66:	601e      	str	r6, [r3, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d68:	6038      	str	r0, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8000d6a:	f004 fc4b 	bl	8005604 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d6e:	4b4b      	ldr	r3, [pc, #300]	; (8000e9c <MCboot+0x1a4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d70:	683e      	ldr	r6, [r7, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d72:	469a      	mov	sl, r3
 8000d74:	4652      	mov	r2, sl
 8000d76:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <MCboot+0x1a8>)
 8000d78:	6013      	str	r3, [r2, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d7a:	2288      	movs	r2, #136	; 0x88
 8000d7c:	0052      	lsls	r2, r2, #1
 8000d7e:	509e      	str	r6, [r3, r2]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000d80:	4e48      	ldr	r6, [pc, #288]	; (8000ea4 <MCboot+0x1ac>)
 8000d82:	3a04      	subs	r2, #4
 8000d84:	509e      	str	r6, [r3, r2]
  NTC_Init(&TempSensorParamsM1);
 8000d86:	4b48      	ldr	r3, [pc, #288]	; (8000ea8 <MCboot+0x1b0>)
 8000d88:	4699      	mov	r9, r3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f003 fe2e 	bl	80049ec <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d90:	464a      	mov	r2, r9
 8000d92:	4b46      	ldr	r3, [pc, #280]	; (8000eac <MCboot+0x1b4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d94:	4846      	ldr	r0, [pc, #280]	; (8000eb0 <MCboot+0x1b8>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	469b      	mov	fp, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d9a:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <MCboot+0x1bc>)
 8000d9c:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8000d9e:	f004 fc7d 	bl	800569c <REMNG_Init>
  FOC_Clear(M1);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff ff76 	bl	8000c94 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000da8:	2324      	movs	r3, #36	; 0x24
 8000daa:	2201      	movs	r2, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000dac:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000dae:	54f2      	strb	r2, [r6, r3]
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000db0:	f004 fd86 	bl	80058c0 <STC_GetDefaultIqdref>
 8000db4:	6130      	str	r0, [r6, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000db6:	6828      	ldr	r0, [r5, #0]
 8000db8:	f004 fd82 	bl	80058c0 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <MCboot+0x1c0>)
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000dbe:	0c00      	lsrs	r0, r0, #16
  oMCInterface[M1] = & Mci[M1];
 8000dc0:	4699      	mov	r9, r3
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000dc2:	82b0      	strh	r0, [r6, #20]
  oMCInterface[M1] = & Mci[M1];
 8000dc4:	483d      	ldr	r0, [pc, #244]	; (8000ebc <MCboot+0x1c4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000dc6:	682a      	ldr	r2, [r5, #0]
 8000dc8:	4923      	ldr	r1, [pc, #140]	; (8000e58 <MCboot+0x160>)
  oMCInterface[M1] = & Mci[M1];
 8000dca:	6018      	str	r0, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000dcc:	0033      	movs	r3, r6
 8000dce:	f7ff fd67 	bl	80008a0 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	6828      	ldr	r0, [r5, #0]
 8000dd6:	681e      	ldr	r6, [r3, #0]
 8000dd8:	f004 fd68 	bl	80058ac <STC_GetMecSpeedRefUnitDefault>
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0001      	movs	r1, r0
 8000de0:	0030      	movs	r0, r6
 8000de2:	f7ff fd67 	bl	80008b4 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000de6:	464b      	mov	r3, r9
 8000de8:	681b      	ldr	r3, [r3, #0]
  bMCBootCompleted = 1;
 8000dea:	2201      	movs	r2, #1
  pMCIList[M1] = oMCInterface[M1];
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	9801      	ldr	r0, [sp, #4]
 8000df0:	9b02      	ldr	r3, [sp, #8]
 8000df2:	6018      	str	r0, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000df4:	4640      	mov	r0, r8
 8000df6:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <MCboot+0x1c8>)
 8000df8:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000dfa:	60dc      	str	r4, [r3, #12]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000dfc:	6018      	str	r0, [r3, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <MCboot+0x194>)
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8000e00:	615c      	str	r4, [r3, #20]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e02:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000e04:	61dc      	str	r4, [r3, #28]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e06:	6058      	str	r0, [r3, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8000e08:	4822      	ldr	r0, [pc, #136]	; (8000e94 <MCboot+0x19c>)
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000e0a:	621c      	str	r4, [r3, #32]
  MCT[M1].pPIDId = pPIDId[M1];
 8000e0c:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8000e0e:	635c      	str	r4, [r3, #52]	; 0x34
  MCT[M1].pPIDId = pPIDId[M1];
 8000e10:	6098      	str	r0, [r3, #8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000e12:	4816      	ldr	r0, [pc, #88]	; (8000e6c <MCboot+0x174>)
 8000e14:	6800      	ldr	r0, [r0, #0]
 8000e16:	6118      	str	r0, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000e18:	4817      	ldr	r0, [pc, #92]	; (8000e78 <MCboot+0x180>)
 8000e1a:	6198      	str	r0, [r3, #24]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000e1c:	6828      	ldr	r0, [r5, #0]
 8000e1e:	6258      	str	r0, [r3, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MCboot+0x160>)
 8000e22:	6298      	str	r0, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000e24:	4658      	mov	r0, fp
 8000e26:	6800      	ldr	r0, [r0, #0]
 8000e28:	62d8      	str	r0, [r3, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000e2a:	6838      	ldr	r0, [r7, #0]
 8000e2c:	6318      	str	r0, [r3, #48]	; 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000e2e:	4650      	mov	r0, sl
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000e30:	639c      	str	r4, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000e32:	6800      	ldr	r0, [r0, #0]
  pMCTList[M1] = &MCT[M1];
 8000e34:	9903      	ldr	r1, [sp, #12]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000e36:	63d8      	str	r0, [r3, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 8000e38:	641c      	str	r4, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 8000e3a:	645c      	str	r4, [r3, #68]	; 0x44
  MCT[M1].pPosCtrl = MC_NULL;
 8000e3c:	649c      	str	r4, [r3, #72]	; 0x48
  MCT[M1].pSCC = MC_NULL;
 8000e3e:	64dc      	str	r4, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8000e40:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000e42:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <MCboot+0x164>)
 8000e46:	701a      	strb	r2, [r3, #0]
}
 8000e48:	b007      	add	sp, #28
 8000e4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e4c:	46bb      	mov	fp, r7
 8000e4e:	46b2      	mov	sl, r6
 8000e50:	46a9      	mov	r9, r5
 8000e52:	46a0      	mov	r8, r4
 8000e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000834 	.word	0x20000834
 8000e5c:	2000083a 	.word	0x2000083a
 8000e60:	20000000 	.word	0x20000000
 8000e64:	2000084c 	.word	0x2000084c
 8000e68:	20000314 	.word	0x20000314
 8000e6c:	2000086c 	.word	0x2000086c
 8000e70:	200001d4 	.word	0x200001d4
 8000e74:	2000085c 	.word	0x2000085c
 8000e78:	200000b4 	.word	0x200000b4
 8000e7c:	20000864 	.word	0x20000864
 8000e80:	20000410 	.word	0x20000410
 8000e84:	200001a8 	.word	0x200001a8
 8000e88:	2000017c 	.word	0x2000017c
 8000e8c:	20000858 	.word	0x20000858
 8000e90:	200003e8 	.word	0x200003e8
 8000e94:	20000854 	.word	0x20000854
 8000e98:	20000848 	.word	0x20000848
 8000e9c:	20000850 	.word	0x20000850
 8000ea0:	20000200 	.word	0x20000200
 8000ea4:	2000079c 	.word	0x2000079c
 8000ea8:	20000444 	.word	0x20000444
 8000eac:	20000868 	.word	0x20000868
 8000eb0:	20000390 	.word	0x20000390
 8000eb4:	20000860 	.word	0x20000860
 8000eb8:	20000844 	.word	0x20000844
 8000ebc:	20000818 	.word	0x20000818
 8000ec0:	200007c4 	.word	0x200007c4

08000ec4 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000ec4:	4770      	bx	lr
 8000ec6:	46c0      	nop			; (mov r8, r8)

08000ec8 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8000ec8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000eca:	2426      	movs	r4, #38	; 0x26
 8000ecc:	4344      	muls	r4, r0
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <FOC_CalcCurrRef+0x28>)
 8000ed0:	191c      	adds	r4, r3, r4
 8000ed2:	0023      	movs	r3, r4
 8000ed4:	3324      	adds	r3, #36	; 0x24
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d000      	beq.n	8000ede <FOC_CalcCurrRef+0x16>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000edc:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <FOC_CalcCurrRef+0x2c>)
 8000ee0:	0080      	lsls	r0, r0, #2
 8000ee2:	58c0      	ldr	r0, [r0, r3]
 8000ee4:	f004 fcaa 	bl	800583c <STC_CalcTorqueReference>
 8000ee8:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000eea:	8220      	strh	r0, [r4, #16]
}
 8000eec:	e7f6      	b.n	8000edc <FOC_CalcCurrRef+0x14>
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	2000079c 	.word	0x2000079c
 8000ef4:	20000864 	.word	0x20000864

08000ef8 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000ef8:	4b01      	ldr	r3, [pc, #4]	; (8000f00 <TSK_SetChargeBootCapDelayM1+0x8>)
 8000efa:	8018      	strh	r0, [r3, #0]
}
 8000efc:	4770      	bx	lr
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	2000083c 	.word	0x2000083c

08000f04 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8000f06:	8818      	ldrh	r0, [r3, #0]
 8000f08:	4243      	negs	r3, r0
 8000f0a:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000f0c:	b2c0      	uxtb	r0, r0
}
 8000f0e:	4770      	bx	lr
 8000f10:	2000083c 	.word	0x2000083c

08000f14 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000f14:	4b01      	ldr	r3, [pc, #4]	; (8000f1c <TSK_SetStopPermanencyTimeM1+0x8>)
 8000f16:	8018      	strh	r0, [r3, #0]
}
 8000f18:	4770      	bx	lr
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000840 	.word	0x20000840

08000f20 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8000f22:	8818      	ldrh	r0, [r3, #0]
 8000f24:	4243      	negs	r3, r0
 8000f26:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000f28:	b2c0      	uxtb	r0, r0
}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000840 	.word	0x20000840

08000f30 <TSK_MediumFrequencyTaskM1>:
{
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8000f34:	466b      	mov	r3, sp
 8000f36:	1d99      	adds	r1, r3, #6
 8000f38:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000f3a:	4e4b      	ldr	r6, [pc, #300]	; (8001068 <TSK_MediumFrequencyTaskM1+0x138>)
  int16_t wAux = 0;
 8000f3c:	800b      	strh	r3, [r1, #0]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000f3e:	0030      	movs	r0, r6
 8000f40:	f003 fa6e 	bl	8004420 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000f44:	4d49      	ldr	r5, [pc, #292]	; (800106c <TSK_MediumFrequencyTaskM1+0x13c>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000f46:	0007      	movs	r7, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000f48:	6828      	ldr	r0, [r5, #0]
 8000f4a:	f003 fdf9 	bl	8004b40 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000f4e:	4c48      	ldr	r4, [pc, #288]	; (8001070 <TSK_MediumFrequencyTaskM1+0x140>)
 8000f50:	0020      	movs	r0, r4
 8000f52:	f004 fd59 	bl	8005a08 <STM_GetState>
  switch ( StateM1 )
 8000f56:	3803      	subs	r0, #3
 8000f58:	b2c0      	uxtb	r0, r0
 8000f5a:	280f      	cmp	r0, #15
 8000f5c:	d807      	bhi.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
 8000f5e:	4a45      	ldr	r2, [pc, #276]	; (8001074 <TSK_MediumFrequencyTaskM1+0x144>)
 8000f60:	0083      	lsls	r3, r0, #2
 8000f62:	58d3      	ldr	r3, [r2, r3]
 8000f64:	469f      	mov	pc, r3
    STM_NextState( &STM[M1], IDLE );
 8000f66:	2100      	movs	r1, #0
 8000f68:	0020      	movs	r0, r4
 8000f6a:	f004 fcd9 	bl	8005920 <STM_NextState>
}
 8000f6e:	b003      	add	sp, #12
 8000f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HALL_Clear( &HALL_M1 );
 8000f72:	0030      	movs	r0, r6
 8000f74:	f003 f98c 	bl	8004290 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8000f78:	2104      	movs	r1, #4
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	f004 fcd0 	bl	8005920 <STM_NextState>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0f4      	beq.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
      FOC_Clear( M1 );
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe85 	bl	8000c94 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <TSK_MediumFrequencyTaskM1+0x148>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	f004 f95d 	bl	800524c <R3_1_SwitchOnPWM>
 8000f92:	e7ec      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <TSK_MediumFrequencyTaskM1+0x148>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f004 f934 	bl	8005204 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8000f9c:	2014      	movs	r0, #20
 8000f9e:	f7ff ffab 	bl	8000ef8 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	0020      	movs	r0, r4
 8000fa6:	f004 fcbb 	bl	8005920 <STM_NextState>
    break;
 8000faa:	e7e0      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8000fac:	2105      	movs	r1, #5
 8000fae:	0020      	movs	r0, r4
 8000fb0:	f004 fcb6 	bl	8005920 <STM_NextState>
    break;
 8000fb4:	e7db      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
	  FOC_InitAdditionalMethods(M1);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff ff84 	bl	8000ec4 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ff83 	bl	8000ec8 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8000fc2:	2106      	movs	r1, #6
 8000fc4:	0020      	movs	r0, r4
 8000fc6:	f004 fcab 	bl	8005920 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <TSK_MediumFrequencyTaskM1+0x14c>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f004 fc7f 	bl	80058d0 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <TSK_MediumFrequencyTaskM1+0x150>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	f7ff fca5 	bl	8000924 <MCI_ExecBufferedCommands>
    break;
 8000fda:	e7c8      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <TSK_MediumFrequencyTaskM1+0x150>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f7ff fca0 	bl	8000924 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff ff6f 	bl	8000ec8 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8000fea:	2f00      	cmp	r7, #0
 8000fec:	d1bf      	bne.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	0020      	movs	r0, r4
 8000ff4:	f004 fc7a 	bl	80058ec <STM_FaultProcessing>
 8000ff8:	e7b9      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <TSK_MediumFrequencyTaskM1+0x148>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f004 f99b 	bl	8005338 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fe46 	bl	8000c94 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001008:	6828      	ldr	r0, [r5, #0]
 800100a:	f003 fca7 	bl	800495c <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800100e:	20c8      	movs	r0, #200	; 0xc8
 8001010:	0080      	lsls	r0, r0, #2
 8001012:	f7ff ff7f 	bl	8000f14 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001016:	2108      	movs	r1, #8
 8001018:	0020      	movs	r0, r4
 800101a:	f004 fc81 	bl	8005920 <STM_NextState>
    break;
 800101e:	e7a6      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001020:	f7ff ff7e 	bl	8000f20 <TSK_StopPermanencyTimeHasElapsedM1>
 8001024:	2800      	cmp	r0, #0
 8001026:	d0a2      	beq.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001028:	2109      	movs	r1, #9
 800102a:	0020      	movs	r0, r4
 800102c:	f004 fc78 	bl	8005920 <STM_NextState>
 8001030:	e79d      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001032:	f7ff ff67 	bl	8000f04 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001036:	2800      	cmp	r0, #0
 8001038:	d099      	beq.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <TSK_MediumFrequencyTaskM1+0x148>)
 800103c:	2100      	movs	r1, #0
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f003 fed4 	bl	8004dec <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001044:	2111      	movs	r1, #17
 8001046:	0020      	movs	r0, r4
 8001048:	f004 fc6a 	bl	8005920 <STM_NextState>
 800104c:	e78f      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <TSK_MediumFrequencyTaskM1+0x148>)
 8001050:	2101      	movs	r1, #1
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f003 feca 	bl	8004dec <PWMC_CurrentReadingCalibr>
 8001058:	2800      	cmp	r0, #0
 800105a:	d100      	bne.n	800105e <TSK_MediumFrequencyTaskM1+0x12e>
 800105c:	e787      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
      STM_NextState( &STM[M1], CLEAR );
 800105e:	2112      	movs	r1, #18
 8001060:	0020      	movs	r0, r4
 8001062:	f004 fc5d 	bl	8005920 <STM_NextState>
 8001066:	e782      	b.n	8000f6e <TSK_MediumFrequencyTaskM1+0x3e>
 8001068:	200000b4 	.word	0x200000b4
 800106c:	20000850 	.word	0x20000850
 8001070:	20000834 	.word	0x20000834
 8001074:	08005ffc 	.word	0x08005ffc
 8001078:	2000086c 	.word	0x2000086c
 800107c:	20000864 	.word	0x20000864
 8001080:	20000844 	.word	0x20000844

08001084 <MC_Scheduler>:
{
 8001084:	b570      	push	{r4, r5, r6, lr}
  if (bMCBootCompleted == 1)
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MC_Scheduler+0x48>)
 8001088:	781c      	ldrb	r4, [r3, #0]
 800108a:	2c01      	cmp	r4, #1
 800108c:	d000      	beq.n	8001090 <MC_Scheduler+0xc>
}
 800108e:	bd70      	pop	{r4, r5, r6, pc}
    if(hMFTaskCounterM1 > 0u)
 8001090:	4d0f      	ldr	r5, [pc, #60]	; (80010d0 <MC_Scheduler+0x4c>)
 8001092:	882b      	ldrh	r3, [r5, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d014      	beq.n	80010c2 <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 8001098:	882b      	ldrh	r3, [r5, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	b29b      	uxth	r3, r3
 800109e:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MC_Scheduler+0x50>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d003      	beq.n	80010b0 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	3a01      	subs	r2, #1
 80010ac:	b292      	uxth	r2, r2
 80010ae:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MC_Scheduler+0x54>)
 80010b2:	881a      	ldrh	r2, [r3, #0]
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	d0ea      	beq.n	800108e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	3a01      	subs	r2, #1
 80010bc:	b292      	uxth	r2, r2
 80010be:	801a      	strh	r2, [r3, #0]
}
 80010c0:	e7e5      	b.n	800108e <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 80010c2:	f7ff ff35 	bl	8000f30 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80010c6:	802c      	strh	r4, [r5, #0]
 80010c8:	e7ea      	b.n	80010a0 <MC_Scheduler+0x1c>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	2000083a 	.word	0x2000083a
 80010d0:	2000083e 	.word	0x2000083e
 80010d4:	2000083c 	.word	0x2000083c
 80010d8:	20000840 	.word	0x20000840

080010dc <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	46ce      	mov	lr, r9
 80010e0:	4647      	mov	r7, r8
 80010e2:	b580      	push	{r7, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 80010e4:	4835      	ldr	r0, [pc, #212]	; (80011bc <TSK_HighFrequencyTask+0xe0>)
{
 80010e6:	b087      	sub	sp, #28
  HALL_CalcElAngle (&HALL_M1);
 80010e8:	f003 f97c 	bl	80043e4 <HALL_CalcElAngle>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <TSK_HighFrequencyTask+0xe4>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f004 fb3a 	bl	8005768 <STC_GetSpeedSensor>
 80010f4:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80010f6:	f004 fadd 	bl	80056b4 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80010fa:	4f32      	ldr	r7, [pc, #200]	; (80011c4 <TSK_HighFrequencyTask+0xe8>)
  hElAngle = SPD_GetElAngle(speedHandle);
 80010fc:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80010fe:	a903      	add	r1, sp, #12
 8001100:	6838      	ldr	r0, [r7, #0]
 8001102:	f003 fd71 	bl	8004be8 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 8001106:	f000 fd11 	bl	8001b2c <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800110a:	9803      	ldr	r0, [sp, #12]
 800110c:	f7ff fcde 	bl	8000acc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001110:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001112:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001114:	f7ff fd54 	bl	8000bc0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001118:	4c2b      	ldr	r4, [pc, #172]	; (80011c8 <TSK_HighFrequencyTask+0xec>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800111a:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800111c:	2310      	movs	r3, #16
 800111e:	5ee1      	ldrsh	r1, [r4, r3]
 8001120:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001122:	1ac9      	subs	r1, r1, r3
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <TSK_HighFrequencyTask+0xf0>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f003 fcc8 	bl	8004abc <PI_Controller>
 800112c:	4680      	mov	r8, r0

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800112e:	2312      	movs	r3, #18
 8001130:	5ee1      	ldrsh	r1, [r4, r3]
 8001132:	ab01      	add	r3, sp, #4
 8001134:	2202      	movs	r2, #2
 8001136:	5e9b      	ldrsh	r3, [r3, r2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001138:	1ac9      	subs	r1, r1, r3
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <TSK_HighFrequencyTask+0xf4>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f003 fcbd 	bl	8004abc <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001142:	4641      	mov	r1, r8
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <TSK_HighFrequencyTask+0xf8>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	ab02      	add	r3, sp, #8
 800114a:	8058      	strh	r0, [r3, #2]
 800114c:	8019      	strh	r1, [r3, #0]
 800114e:	0010      	movs	r0, r2
 8001150:	9902      	ldr	r1, [sp, #8]
 8001152:	f002 ffb3 	bl	80040bc <Circle_Limitation>
 8001156:	b203      	sxth	r3, r0
 8001158:	4699      	mov	r9, r3
 800115a:	9002      	str	r0, [sp, #8]
 800115c:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800115e:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001160:	4698      	mov	r8, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001162:	f004 faaf 	bl	80056c4 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001166:	0029      	movs	r1, r5
 8001168:	9802      	ldr	r0, [sp, #8]
 800116a:	f7ff fd79 	bl	8000c60 <MCM_Rev_Park>
 800116e:	0001      	movs	r1, r0
 8001170:	9005      	str	r0, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001172:	6838      	ldr	r0, [r7, #0]
 8001174:	f003 fd3c 	bl	8004bf0 <PWMC_SetPhaseVoltage>
 8001178:	0006      	movs	r6, r0
  RCM_ReadOngoingConv();
 800117a:	f000 fd15 	bl	8001ba8 <RCM_ReadOngoingConv>
  FOCVars[M1].Vqd = Vqd;
 800117e:	464b      	mov	r3, r9
 8001180:	82e3      	strh	r3, [r4, #22]
 8001182:	4643      	mov	r3, r8
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001184:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 8001186:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 8001188:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800118a:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 800118c:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800118e:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001190:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001192:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001194:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001196:	a905      	add	r1, sp, #20
  FOCVars[M1].Iqd = Iqd;
 8001198:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800119a:	f004 fdd7 	bl	8005d4c <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 800119e:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 80011a0:	2e01      	cmp	r6, #1
 80011a2:	d005      	beq.n	80011b0 <TSK_HighFrequencyTask+0xd4>
}
 80011a4:	2000      	movs	r0, #0
 80011a6:	b007      	add	sp, #28
 80011a8:	bcc0      	pop	{r6, r7}
 80011aa:	46b9      	mov	r9, r7
 80011ac:	46b0      	mov	r8, r6
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2101      	movs	r1, #1
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <TSK_HighFrequencyTask+0xfc>)
 80011b6:	f004 fb99 	bl	80058ec <STM_FaultProcessing>
 80011ba:	e7f3      	b.n	80011a4 <TSK_HighFrequencyTask+0xc8>
 80011bc:	200000b4 	.word	0x200000b4
 80011c0:	20000864 	.word	0x20000864
 80011c4:	2000086c 	.word	0x2000086c
 80011c8:	2000079c 	.word	0x2000079c
 80011cc:	20000858 	.word	0x20000858
 80011d0:	20000854 	.word	0x20000854
 80011d4:	2000084c 	.word	0x2000084c
 80011d8:	20000834 	.word	0x20000834

080011dc <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	46ce      	mov	lr, r9
 80011e0:	4647      	mov	r7, r8
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <TSK_SafetyTask_PWMOFF+0x8c>)
{
 80011e4:	b580      	push	{r7, lr}
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011e6:	0087      	lsls	r7, r0, #2
{
 80011e8:	0005      	movs	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011ea:	59d8      	ldr	r0, [r3, r7]
 80011ec:	f003 fc12 	bl	8004a14 <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011f2:	0006      	movs	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80011f4:	59d8      	ldr	r0, [r3, r7]
 80011f6:	4698      	mov	r8, r3
 80011f8:	f003 fe1c 	bl	8004e34 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011fc:	2308      	movs	r3, #8
 80011fe:	439e      	bics	r6, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001200:	4306      	orrs	r6, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001202:	4699      	mov	r9, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001204:	b2b4      	uxth	r4, r6
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001206:	2d00      	cmp	r5, #0
 8001208:	d025      	beq.n	8001256 <TSK_SafetyTask_PWMOFF+0x7a>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800120a:	43e2      	mvns	r2, r4
 800120c:	006b      	lsls	r3, r5, #1
 800120e:	4e18      	ldr	r6, [pc, #96]	; (8001270 <TSK_SafetyTask_PWMOFF+0x94>)
 8001210:	195b      	adds	r3, r3, r5
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	18f6      	adds	r6, r6, r3
 8001216:	0021      	movs	r1, r4
 8001218:	0030      	movs	r0, r6
 800121a:	b292      	uxth	r2, r2
 800121c:	f004 fb66 	bl	80058ec <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001220:	0030      	movs	r0, r6
 8001222:	f004 fbf1 	bl	8005a08 <STM_GetState>
 8001226:	280a      	cmp	r0, #10
 8001228:	d009      	beq.n	800123e <TSK_SafetyTask_PWMOFF+0x62>
 800122a:	280b      	cmp	r0, #11
 800122c:	d103      	bne.n	8001236 <TSK_SafetyTask_PWMOFF+0x5a>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800122e:	4643      	mov	r3, r8
 8001230:	59d8      	ldr	r0, [r3, r7]
 8001232:	f003 fdd7 	bl	8004de4 <PWMC_SwitchOffPWM>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001236:	bcc0      	pop	{r6, r7}
 8001238:	46b9      	mov	r9, r7
 800123a:	46b0      	mov	r8, r6
 800123c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800123e:	4643      	mov	r3, r8
 8001240:	59d8      	ldr	r0, [r3, r7]
 8001242:	f003 fdcf 	bl	8004de4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001246:	0028      	movs	r0, r5
 8001248:	f7ff fd24 	bl	8000c94 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <TSK_SafetyTask_PWMOFF+0x98>)
 800124e:	59d8      	ldr	r0, [r3, r7]
 8001250:	f003 fb84 	bl	800495c <MPM_Clear>
    break;
 8001254:	e7ef      	b.n	8001236 <TSK_SafetyTask_PWMOFF+0x5a>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f004 f9eb 	bl	8005634 <RVBS_CalcAvVbus>
 800125e:	464b      	mov	r3, r9
 8001260:	4398      	bics	r0, r3
 8001262:	4304      	orrs	r4, r0
 8001264:	b2a4      	uxth	r4, r4
 8001266:	e7d0      	b.n	800120a <TSK_SafetyTask_PWMOFF+0x2e>
 8001268:	20000868 	.word	0x20000868
 800126c:	2000086c 	.word	0x2000086c
 8001270:	20000834 	.word	0x20000834
 8001274:	20000850 	.word	0x20000850
 8001278:	20000848 	.word	0x20000848

0800127c <TSK_SafetyTask>:
{
 800127c:	b510      	push	{r4, lr}
  if (bMCBootCompleted == 1)
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <TSK_SafetyTask+0x18>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d000      	beq.n	8001288 <TSK_SafetyTask+0xc>
}
 8001286:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff ffa7 	bl	80011dc <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv ();
 800128e:	f000 fc1f 	bl	8001ad0 <RCM_ExecUserConv>
}
 8001292:	e7f8      	b.n	8001286 <TSK_SafetyTask+0xa>
 8001294:	2000083a 	.word	0x2000083a

08001298 <MC_RunMotorControlTasks>:
{
 8001298:	b510      	push	{r4, lr}
  if ( bMCBootCompleted ) {
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MC_RunMotorControlTasks+0x1c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <MC_RunMotorControlTasks+0xc>
}
 80012a2:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 80012a4:	f7ff feee 	bl	8001084 <MC_Scheduler>
    TSK_SafetyTask();
 80012a8:	f7ff ffe8 	bl	800127c <TSK_SafetyTask>
    UI_Scheduler();
 80012ac:	f000 ff1c 	bl	80020e8 <UI_Scheduler>
}
 80012b0:	e7f7      	b.n	80012a2 <MC_RunMotorControlTasks+0xa>
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	2000083a 	.word	0x2000083a

080012b8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80012b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <TSK_HardwareFaultTask+0x18>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	f004 f83b 	bl	8005338 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <TSK_HardwareFaultTask+0x1c>)
 80012c8:	f004 fb10 	bl	80058ec <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80012cc:	bd10      	pop	{r4, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	2000086c 	.word	0x2000086c
 80012d4:	20000834 	.word	0x20000834

080012d8 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012d8:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012da:	2108      	movs	r1, #8
 80012dc:	2002      	movs	r0, #2
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80012de:	b510      	push	{r4, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e0:	4a3e      	ldr	r2, [pc, #248]	; (80013dc <mc_lock_pins+0x104>)
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012e6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012ea:	69da      	ldr	r2, [r3, #28]
 80012ec:	b08e      	sub	sp, #56	; 0x38
 80012ee:	920d      	str	r2, [sp, #52]	; 0x34
  (void) temp;
 80012f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f2:	4a3b      	ldr	r2, [pc, #236]	; (80013e0 <mc_lock_pins+0x108>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012f4:	3118      	adds	r1, #24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012f8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012fa:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012fc:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012fe:	3910      	subs	r1, #16
  temp = READ_REG(GPIOx->LCKR);
 8001300:	920c      	str	r2, [sp, #48]	; 0x30
  (void) temp;
 8001302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001304:	4a37      	ldr	r2, [pc, #220]	; (80013e4 <mc_lock_pins+0x10c>)
 8001306:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001308:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800130a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800130c:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800130e:	4936      	ldr	r1, [pc, #216]	; (80013e8 <mc_lock_pins+0x110>)
  temp = READ_REG(GPIOx->LCKR);
 8001310:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 8001312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001314:	4a35      	ldr	r2, [pc, #212]	; (80013ec <mc_lock_pins+0x114>)
 8001316:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001318:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800131a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800131c:	69d4      	ldr	r4, [r2, #28]
 800131e:	940a      	str	r4, [sp, #40]	; 0x28
  (void) temp;
 8001320:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001322:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001324:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001326:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001328:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800132a:	3002      	adds	r0, #2
  temp = READ_REG(GPIOx->LCKR);
 800132c:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 800132e:	9909      	ldr	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001330:	492f      	ldr	r1, [pc, #188]	; (80013f0 <mc_lock_pins+0x118>)
 8001332:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001334:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001336:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001338:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800133a:	3803      	subs	r0, #3
  temp = READ_REG(GPIOx->LCKR);
 800133c:	9108      	str	r1, [sp, #32]
  (void) temp;
 800133e:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001340:	492c      	ldr	r1, [pc, #176]	; (80013f4 <mc_lock_pins+0x11c>)
 8001342:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001344:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001346:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001348:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800134a:	30ff      	adds	r0, #255	; 0xff
  temp = READ_REG(GPIOx->LCKR);
 800134c:	9107      	str	r1, [sp, #28]
  (void) temp;
 800134e:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001350:	4929      	ldr	r1, [pc, #164]	; (80013f8 <mc_lock_pins+0x120>)
 8001352:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001354:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001356:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001358:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800135a:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 800135c:	9106      	str	r1, [sp, #24]
  (void) temp;
 800135e:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001360:	2181      	movs	r1, #129	; 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001362:	30ff      	adds	r0, #255	; 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001364:	0249      	lsls	r1, r1, #9
 8001366:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001368:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800136a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800136c:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800136e:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001370:	9105      	str	r1, [sp, #20]
  (void) temp;
 8001372:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001374:	2188      	movs	r1, #136	; 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001376:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001378:	0249      	lsls	r1, r1, #9
 800137a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800137c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800137e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001380:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001382:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001384:	9104      	str	r1, [sp, #16]
  (void) temp;
 8001386:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001388:	21a0      	movs	r1, #160	; 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 800138a:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800138c:	0249      	lsls	r1, r1, #9
 800138e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001390:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001392:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001394:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001396:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001398:	9103      	str	r1, [sp, #12]
  (void) temp;
 800139a:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800139c:	2182      	movs	r1, #130	; 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 800139e:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013a0:	0249      	lsls	r1, r1, #9
 80013a2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013a4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013a6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013a8:	69db      	ldr	r3, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013aa:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80013ac:	9302      	str	r3, [sp, #8]
  (void) temp;
 80013ae:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013b0:	23c0      	movs	r3, #192	; 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013b2:	0209      	lsls	r1, r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013b8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ba:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013bc:	69d3      	ldr	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013be:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80013c0:	9301      	str	r3, [sp, #4]
  (void) temp;
 80013c2:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c4:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013c6:	0189      	lsls	r1, r1, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013cc:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ce:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013d0:	69d3      	ldr	r3, [r2, #28]
 80013d2:	9300      	str	r3, [sp, #0]
  (void) temp;
 80013d4:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 80013d6:	b00e      	add	sp, #56	; 0x38
 80013d8:	bd10      	pop	{r4, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	00010008 	.word	0x00010008
 80013e0:	00010020 	.word	0x00010020
 80013e4:	00010010 	.word	0x00010010
 80013e8:	00010002 	.word	0x00010002
 80013ec:	48000400 	.word	0x48000400
 80013f0:	00010004 	.word	0x00010004
 80013f4:	00010001 	.word	0x00010001
 80013f8:	00010100 	.word	0x00010100

080013fc <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	46c6      	mov	lr, r8
 8001400:	b500      	push	{lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	0016      	movs	r6, r2
 8001406:	001f      	movs	r7, r3
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001408:	2200      	movs	r2, #0
 800140a:	466b      	mov	r3, sp
{
 800140c:	0005      	movs	r5, r0
  bool bNoError = false; // Default is error
 800140e:	725a      	strb	r2, [r3, #9]
{
 8001410:	000c      	movs	r4, r1
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 8001412:	094a      	lsrs	r2, r1, #5
  if (bMotorSelection != 0)
 8001414:	d111      	bne.n	800143a <MCP_ReceivedFrame+0x3e>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001416:	2912      	cmp	r1, #18
 8001418:	d82d      	bhi.n	8001476 <MCP_ReceivedFrame+0x7a>
 800141a:	4bcf      	ldr	r3, [pc, #828]	; (8001758 <MCP_ReceivedFrame+0x35c>)
 800141c:	008c      	lsls	r4, r1, #2
 800141e:	591b      	ldr	r3, [r3, r4]
 8001420:	469f      	mov	pc, r3
 8001422:	240e      	movs	r4, #14
 8001424:	446c      	add	r4, sp
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001426:	69a8      	ldr	r0, [r5, #24]
 8001428:	2301      	movs	r3, #1
 800142a:	0022      	movs	r2, r4
 800142c:	21ff      	movs	r1, #255	; 0xff
 800142e:	69ed      	ldr	r5, [r5, #28]
 8001430:	47a8      	blx	r5
    }
  }
}
 8001432:	b00c      	add	sp, #48	; 0x30
 8001434:	bc80      	pop	{r7}
 8001436:	46b8      	mov	r8, r7
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 800143a:	2100      	movs	r1, #0
 800143c:	3a01      	subs	r2, #1
 800143e:	f000 fe9d 	bl	800217c <UI_SetReg>
 8001442:	2800      	cmp	r0, #0
 8001444:	d10e      	bne.n	8001464 <MCP_ReceivedFrame+0x68>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001446:	240e      	movs	r4, #14
 8001448:	230b      	movs	r3, #11
 800144a:	446c      	add	r4, sp
 800144c:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 800144e:	466b      	mov	r3, sp
 8001450:	7a58      	ldrb	r0, [r3, #9]
 8001452:	2800      	cmp	r0, #0
 8001454:	d0e5      	beq.n	8001422 <MCP_ReceivedFrame+0x26>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001456:	2300      	movs	r3, #0
 8001458:	2200      	movs	r2, #0
 800145a:	21f0      	movs	r1, #240	; 0xf0
 800145c:	69a8      	ldr	r0, [r5, #24]
 800145e:	69ec      	ldr	r4, [r5, #28]
 8001460:	47a0      	blx	r4
 8001462:	e7e6      	b.n	8001432 <MCP_ReceivedFrame+0x36>
  switch (Code)
 8001464:	211f      	movs	r1, #31
 8001466:	400c      	ands	r4, r1
 8001468:	2c12      	cmp	r4, #18
 800146a:	d900      	bls.n	800146e <MCP_ReceivedFrame+0x72>
 800146c:	e118      	b.n	80016a0 <MCP_ReceivedFrame+0x2a4>
 800146e:	4bbb      	ldr	r3, [pc, #748]	; (800175c <MCP_ReceivedFrame+0x360>)
 8001470:	00a4      	lsls	r4, r4, #2
 8001472:	591b      	ldr	r3, [r3, r4]
 8001474:	469f      	mov	pc, r3
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001476:	240e      	movs	r4, #14
 8001478:	2301      	movs	r3, #1
 800147a:	446c      	add	r4, sp
 800147c:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 800147e:	e7d2      	b.n	8001426 <MCP_ReceivedFrame+0x2a>
        outBuff[i] = 0;
 8001480:	ac04      	add	r4, sp, #16
 8001482:	2220      	movs	r2, #32
 8001484:	2100      	movs	r1, #0
 8001486:	0020      	movs	r0, r4
 8001488:	f004 fc69 	bl	8005d5e <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800148c:	23a8      	movs	r3, #168	; 0xa8
 800148e:	58e8      	ldr	r0, [r5, r3]
 8001490:	2300      	movs	r3, #0
 8001492:	e005      	b.n	80014a0 <MCP_ReceivedFrame+0xa4>
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001494:	18e1      	adds	r1, r4, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001496:	3301      	adds	r3, #1
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001498:	70ca      	strb	r2, [r1, #3]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800149a:	2b1d      	cmp	r3, #29
 800149c:	d100      	bne.n	80014a0 <MCP_ReceivedFrame+0xa4>
 800149e:	e154      	b.n	800174a <MCP_ReceivedFrame+0x34e>
 80014a0:	5cc2      	ldrb	r2, [r0, r3]
 80014a2:	b2d9      	uxtb	r1, r3
 80014a4:	2a09      	cmp	r2, #9
 80014a6:	d1f5      	bne.n	8001494 <MCP_ReceivedFrame+0x98>
      outBuff[0] = pHandle->s_fwVer[i+5];
 80014a8:	1d4a      	adds	r2, r1, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 80014aa:	1dcb      	adds	r3, r1, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 80014ac:	3109      	adds	r1, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80014ae:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 80014b0:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 80014b2:	b2c9      	uxtb	r1, r1
      outBuff[0] = pHandle->s_fwVer[i+5];
 80014b4:	5c82      	ldrb	r2, [r0, r2]
 80014b6:	7022      	strb	r2, [r4, #0]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80014b8:	5cc3      	ldrb	r3, [r0, r3]
 80014ba:	7063      	strb	r3, [r4, #1]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80014bc:	5c43      	ldrb	r3, [r0, r1]
 80014be:	70a3      	strb	r3, [r4, #2]
 80014c0:	e0d1      	b.n	8001666 <MCP_ReceivedFrame+0x26a>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80014c2:	7973      	ldrb	r3, [r6, #5]
 80014c4:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80014c6:	7871      	ldrb	r1, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	18d2      	adds	r2, r2, r3
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80014cc:	7833      	ldrb	r3, [r6, #0]
 80014ce:	0209      	lsls	r1, r1, #8
 80014d0:	18c9      	adds	r1, r1, r3
 80014d2:	78b3      	ldrb	r3, [r6, #2]
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80014d4:	0028      	movs	r0, r5
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80014d6:	041b      	lsls	r3, r3, #16
 80014d8:	18c9      	adds	r1, r1, r3
 80014da:	78f3      	ldrb	r3, [r6, #3]
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80014dc:	b292      	uxth	r2, r2
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80014de:	061b      	lsls	r3, r3, #24
 80014e0:	18c9      	adds	r1, r1, r3
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80014e2:	f001 f827 	bl	8002534 <UI_ExecSpeedRamp>
 80014e6:	466b      	mov	r3, sp
 80014e8:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80014ea:	e7b2      	b.n	8001452 <MCP_ReceivedFrame+0x56>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 80014ec:	270a      	movs	r7, #10
 80014ee:	240e      	movs	r4, #14
 80014f0:	ab03      	add	r3, sp, #12
 80014f2:	4698      	mov	r8, r3
 80014f4:	446c      	add	r4, sp
 80014f6:	446f      	add	r7, sp
 80014f8:	7831      	ldrb	r1, [r6, #0]
 80014fa:	003a      	movs	r2, r7
 80014fc:	9400      	str	r4, [sp, #0]
 80014fe:	0028      	movs	r0, r5
 8001500:	f001 f834 	bl	800256c <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001504:	4643      	mov	r3, r8
 8001506:	2200      	movs	r2, #0
 8001508:	5e9a      	ldrsh	r2, [r3, r2]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800150a:	69a8      	ldr	r0, [r5, #24]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800150c:	0053      	lsls	r3, r2, #1
 800150e:	189b      	adds	r3, r3, r2
 8001510:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001512:	aa04      	add	r2, sp, #16
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001514:	1219      	asrs	r1, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001516:	7013      	strb	r3, [r2, #0]
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001518:	7051      	strb	r1, [r2, #1]
      outBuff[2] = (uint8_t)(rpm >> 16);
 800151a:	1419      	asrs	r1, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 800151c:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 800151e:	7091      	strb	r1, [r2, #2]
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001520:	70d3      	strb	r3, [r2, #3]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001522:	2100      	movs	r1, #0
 8001524:	5e63      	ldrsh	r3, [r4, r1]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001526:	21f0      	movs	r1, #240	; 0xf0
      outBuff[4] = (uint8_t)(FinalTorque);
 8001528:	7113      	strb	r3, [r2, #4]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 800152a:	121b      	asrs	r3, r3, #8
 800152c:	7153      	strb	r3, [r2, #5]
      outBuff[6] = (uint8_t)(Durationms);
 800152e:	883b      	ldrh	r3, [r7, #0]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001530:	69ec      	ldr	r4, [r5, #28]
      outBuff[6] = (uint8_t)(Durationms);
 8001532:	7193      	strb	r3, [r2, #6]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	71d3      	strb	r3, [r2, #7]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001538:	2308      	movs	r3, #8
 800153a:	47a0      	blx	r4
    if (bNoError)
 800153c:	466b      	mov	r3, sp
 800153e:	7a58      	ldrb	r0, [r3, #9]
 8001540:	e787      	b.n	8001452 <MCP_ReceivedFrame+0x56>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001542:	78b0      	ldrb	r0, [r6, #2]
 8001544:	7873      	ldrb	r3, [r6, #1]
 8001546:	0200      	lsls	r0, r0, #8
 8001548:	18c0      	adds	r0, r0, r3
 800154a:	78f3      	ldrb	r3, [r6, #3]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800154c:	2106      	movs	r1, #6
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	18c0      	adds	r0, r0, r3
 8001552:	7933      	ldrb	r3, [r6, #4]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	18c0      	adds	r0, r0, r3
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001558:	f7fe fe60 	bl	800021c <__divsi3>
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800155c:	b203      	sxth	r3, r0
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800155e:	79b0      	ldrb	r0, [r6, #6]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001560:	7a31      	ldrb	r1, [r6, #8]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001562:	7974      	ldrb	r4, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001564:	79f2      	ldrb	r2, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001566:	0200      	lsls	r0, r0, #8
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001568:	0209      	lsls	r1, r1, #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800156a:	1824      	adds	r4, r4, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 800156c:	1852      	adds	r2, r2, r1
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800156e:	b224      	sxth	r4, r4
 8001570:	7831      	ldrb	r1, [r6, #0]
 8001572:	0028      	movs	r0, r5
 8001574:	b292      	uxth	r2, r2
 8001576:	9400      	str	r4, [sp, #0]
 8001578:	f001 f816 	bl	80025a8 <UI_SetRevupData>
 800157c:	466b      	mov	r3, sp
 800157e:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001580:	e767      	b.n	8001452 <MCP_ReceivedFrame+0x56>
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001582:	240e      	movs	r4, #14
 8001584:	2303      	movs	r3, #3
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001586:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001588:	446c      	add	r4, sp
 800158a:	7023      	strb	r3, [r4, #0]
      switch (bRegID)
 800158c:	2988      	cmp	r1, #136	; 0x88
 800158e:	d8d5      	bhi.n	800153c <MCP_ReceivedFrame+0x140>
 8001590:	4a73      	ldr	r2, [pc, #460]	; (8001760 <MCP_ReceivedFrame+0x364>)
 8001592:	008b      	lsls	r3, r1, #2
 8001594:	58d3      	ldr	r3, [r2, r3]
 8001596:	469f      	mov	pc, r3
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001598:	240e      	movs	r4, #14
 800159a:	2307      	movs	r3, #7
 800159c:	446c      	add	r4, sp
 800159e:	7023      	strb	r3, [r4, #0]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80015a0:	0028      	movs	r0, r5
      uint8_t bCmdID = buffer[0];
 80015a2:	7831      	ldrb	r1, [r6, #0]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80015a4:	f000 ff8c 	bl	80024c0 <UI_ExecCmd>
 80015a8:	466b      	mov	r3, sp
 80015aa:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80015ac:	e751      	b.n	8001452 <MCP_ReceivedFrame+0x56>
      bErrorCode = ERROR_CODE_WRONG_SET;
 80015ae:	240e      	movs	r4, #14
 80015b0:	2305      	movs	r3, #5
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80015b2:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80015b4:	446c      	add	r4, sp
 80015b6:	7023      	strb	r3, [r4, #0]
      switch (bRegID)
 80015b8:	2988      	cmp	r1, #136	; 0x88
 80015ba:	d878      	bhi.n	80016ae <MCP_ReceivedFrame+0x2b2>
 80015bc:	4a69      	ldr	r2, [pc, #420]	; (8001764 <MCP_ReceivedFrame+0x368>)
 80015be:	008b      	lsls	r3, r1, #2
 80015c0:	58d3      	ldr	r3, [r2, r3]
 80015c2:	469f      	mov	pc, r3
      hIdRef = buffer[2] + (buffer[3] << 8);
 80015c4:	78f3      	ldrb	r3, [r6, #3]
 80015c6:	78b2      	ldrb	r2, [r6, #2]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	18d2      	adds	r2, r2, r3
      hIqRef = buffer[0] + (buffer[1] << 8);
 80015cc:	7873      	ldrb	r3, [r6, #1]
 80015ce:	7831      	ldrb	r1, [r6, #0]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	18c9      	adds	r1, r1, r3
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 80015d4:	b212      	sxth	r2, r2
 80015d6:	0028      	movs	r0, r5
 80015d8:	b209      	sxth	r1, r1
 80015da:	f001 f801 	bl	80025e0 <UI_SetCurrentReferences>
      bNoError = true;
 80015de:	2301      	movs	r3, #1
 80015e0:	466a      	mov	r2, sp
 80015e2:	7253      	strb	r3, [r2, #9]
  if (RequireAck)
 80015e4:	e737      	b.n	8001456 <MCP_ReceivedFrame+0x5a>
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80015e6:	240e      	movs	r4, #14
 80015e8:	230c      	movs	r3, #12
      stepList.data = buffer;
 80015ea:	9604      	str	r6, [sp, #16]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80015ec:	4e5e      	ldr	r6, [pc, #376]	; (8001768 <MCP_ReceivedFrame+0x36c>)
      stepList.data = buffer;
 80015ee:	a804      	add	r0, sp, #16
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80015f0:	446c      	add	r4, sp
 80015f2:	7023      	strb	r3, [r4, #0]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80015f4:	0031      	movs	r1, r6
      stepList.len = Size;
 80015f6:	7107      	strb	r7, [r0, #4]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80015f8:	f001 f800 	bl	80025fc <UI_GetMPInfo>
 80015fc:	466b      	mov	r3, sp
 80015fe:	7258      	strb	r0, [r3, #9]
      if (bNoError)
 8001600:	2800      	cmp	r0, #0
 8001602:	d100      	bne.n	8001606 <MCP_ReceivedFrame+0x20a>
 8001604:	e70f      	b.n	8001426 <MCP_ReceivedFrame+0x2a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001606:	21f0      	movs	r1, #240	; 0xf0
 8001608:	7933      	ldrb	r3, [r6, #4]
 800160a:	6832      	ldr	r2, [r6, #0]
 800160c:	69a8      	ldr	r0, [r5, #24]
 800160e:	69ec      	ldr	r4, [r5, #28]
 8001610:	47a0      	blx	r4
  if (RequireAck)
 8001612:	e70e      	b.n	8001432 <MCP_ReceivedFrame+0x36>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001614:	7973      	ldrb	r3, [r6, #5]
 8001616:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001618:	7871      	ldrb	r1, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	18d2      	adds	r2, r2, r3
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800161e:	7833      	ldrb	r3, [r6, #0]
 8001620:	0209      	lsls	r1, r1, #8
 8001622:	18c9      	adds	r1, r1, r3
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001624:	0028      	movs	r0, r5
 8001626:	b292      	uxth	r2, r2
 8001628:	b209      	sxth	r1, r1
 800162a:	f000 ff95 	bl	8002558 <UI_ExecTorqueRamp>
 800162e:	466b      	mov	r3, sp
 8001630:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001632:	e70e      	b.n	8001452 <MCP_ReceivedFrame+0x56>
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001634:	23a8      	movs	r3, #168	; 0xa8
        outBuff[i] = pHandle->s_fwVer[i];
 8001636:	240f      	movs	r4, #15
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001638:	58e9      	ldr	r1, [r5, r3]
        outBuff[i] = pHandle->s_fwVer[i];
 800163a:	446c      	add	r4, sp
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800163c:	3ba7      	subs	r3, #167	; 0xa7
 800163e:	3901      	subs	r1, #1
 8001640:	e004      	b.n	800164c <MCP_ReceivedFrame+0x250>
        outBuff[i] = pHandle->s_fwVer[i];
 8001642:	54e2      	strb	r2, [r4, r3]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001644:	3301      	adds	r3, #1
 8001646:	2b21      	cmp	r3, #33	; 0x21
 8001648:	d100      	bne.n	800164c <MCP_ReceivedFrame+0x250>
 800164a:	e082      	b.n	8001752 <MCP_ReceivedFrame+0x356>
 800164c:	5cca      	ldrb	r2, [r1, r3]
 800164e:	1e58      	subs	r0, r3, #1
 8001650:	b2c0      	uxtb	r0, r0
 8001652:	2a00      	cmp	r2, #0
 8001654:	d1f5      	bne.n	8001642 <MCP_ReceivedFrame+0x246>
        outBuff[i] = 0;
 8001656:	2220      	movs	r2, #32
 8001658:	ac04      	add	r4, sp, #16
 800165a:	1a12      	subs	r2, r2, r0
 800165c:	2100      	movs	r1, #0
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	1820      	adds	r0, r4, r0
 8001662:	f004 fb7c 	bl	8005d5e <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001666:	0022      	movs	r2, r4
 8001668:	2320      	movs	r3, #32
 800166a:	21f0      	movs	r1, #240	; 0xf0
 800166c:	69a8      	ldr	r0, [r5, #24]
 800166e:	69ec      	ldr	r4, [r5, #28]
 8001670:	47a0      	blx	r4
      bNoError = true;
 8001672:	2301      	movs	r3, #1
 8001674:	466a      	mov	r2, sp
 8001676:	7253      	strb	r3, [r2, #9]
  if (RequireAck)
 8001678:	e6ed      	b.n	8001456 <MCP_ReceivedFrame+0x5a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800167a:	2309      	movs	r3, #9
 800167c:	446b      	add	r3, sp
 800167e:	001a      	movs	r2, r3
 8001680:	0028      	movs	r0, r5
 8001682:	f000 fe0d 	bl	80022a0 <UI_GetReg>
          if ( bNoError == true )
 8001686:	466b      	mov	r3, sp
 8001688:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800168a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800168c:	2b00      	cmp	r3, #0
 800168e:	d100      	bne.n	8001692 <MCP_ReceivedFrame+0x296>
 8001690:	e6c9      	b.n	8001426 <MCP_ReceivedFrame+0x2a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001692:	2302      	movs	r3, #2
 8001694:	21f0      	movs	r1, #240	; 0xf0
 8001696:	69a8      	ldr	r0, [r5, #24]
 8001698:	69ec      	ldr	r4, [r5, #28]
 800169a:	aa04      	add	r2, sp, #16
 800169c:	47a0      	blx	r4
  if (RequireAck)
 800169e:	e6c8      	b.n	8001432 <MCP_ReceivedFrame+0x36>
    if (bNoError)
 80016a0:	466b      	mov	r3, sp
      bErrorCode = ERROR_BAD_FRAME_ID;
 80016a2:	240e      	movs	r4, #14
    if (bNoError)
 80016a4:	7a58      	ldrb	r0, [r3, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 80016a6:	2301      	movs	r3, #1
 80016a8:	446c      	add	r4, sp
 80016aa:	7023      	strb	r3, [r4, #0]
  if (RequireAck)
 80016ac:	e6d1      	b.n	8001452 <MCP_ReceivedFrame+0x56>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80016ae:	2302      	movs	r3, #2
 80016b0:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 80016b2:	466b      	mov	r3, sp
 80016b4:	7a58      	ldrb	r0, [r3, #9]
 80016b6:	e6cc      	b.n	8001452 <MCP_ReceivedFrame+0x56>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 80016b8:	78b2      	ldrb	r2, [r6, #2]
 80016ba:	7873      	ldrb	r3, [r6, #1]
 80016bc:	0212      	lsls	r2, r2, #8
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80016be:	18d2      	adds	r2, r2, r3
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80016c0:	0028      	movs	r0, r5
 80016c2:	f000 fd5b 	bl	800217c <UI_SetReg>
 80016c6:	466b      	mov	r3, sp
 80016c8:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80016ca:	e6c2      	b.n	8001452 <MCP_ReceivedFrame+0x56>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80016cc:	2309      	movs	r3, #9
 80016ce:	446b      	add	r3, sp
 80016d0:	001a      	movs	r2, r3
 80016d2:	0028      	movs	r0, r5
 80016d4:	f000 fde4 	bl	80022a0 <UI_GetReg>
          if ( bNoError == true )
 80016d8:	466b      	mov	r3, sp
 80016da:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80016dc:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d100      	bne.n	80016e4 <MCP_ReceivedFrame+0x2e8>
 80016e2:	e6a0      	b.n	8001426 <MCP_ReceivedFrame+0x2a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80016e4:	2304      	movs	r3, #4
 80016e6:	21f0      	movs	r1, #240	; 0xf0
 80016e8:	69a8      	ldr	r0, [r5, #24]
 80016ea:	69ec      	ldr	r4, [r5, #28]
 80016ec:	aa04      	add	r2, sp, #16
 80016ee:	47a0      	blx	r4
  if (RequireAck)
 80016f0:	e69f      	b.n	8001432 <MCP_ReceivedFrame+0x36>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80016f2:	78b2      	ldrb	r2, [r6, #2]
 80016f4:	7873      	ldrb	r3, [r6, #1]
 80016f6:	0212      	lsls	r2, r2, #8
 80016f8:	18d2      	adds	r2, r2, r3
 80016fa:	78f3      	ldrb	r3, [r6, #3]
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	18d2      	adds	r2, r2, r3
 8001700:	7933      	ldrb	r3, [r6, #4]
 8001702:	061b      	lsls	r3, r3, #24
 8001704:	e7db      	b.n	80016be <MCP_ReceivedFrame+0x2c2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001706:	2309      	movs	r3, #9
 8001708:	446b      	add	r3, sp
 800170a:	001a      	movs	r2, r3
 800170c:	0028      	movs	r0, r5
 800170e:	f000 fdc7 	bl	80022a0 <UI_GetReg>
           if ( bNoError == true )
 8001712:	466b      	mov	r3, sp
 8001714:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001716:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001718:	2b00      	cmp	r3, #0
 800171a:	d100      	bne.n	800171e <MCP_ReceivedFrame+0x322>
 800171c:	e683      	b.n	8001426 <MCP_ReceivedFrame+0x2a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800171e:	2301      	movs	r3, #1
 8001720:	21f0      	movs	r1, #240	; 0xf0
 8001722:	69a8      	ldr	r0, [r5, #24]
 8001724:	69ec      	ldr	r4, [r5, #28]
 8001726:	aa04      	add	r2, sp, #16
 8001728:	47a0      	blx	r4
  if (RequireAck)
 800172a:	e682      	b.n	8001432 <MCP_ReceivedFrame+0x36>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800172c:	0028      	movs	r0, r5
 800172e:	7872      	ldrb	r2, [r6, #1]
 8001730:	f000 fd24 	bl	800217c <UI_SetReg>
 8001734:	466b      	mov	r3, sp
 8001736:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001738:	e68b      	b.n	8001452 <MCP_ReceivedFrame+0x56>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800173a:	2100      	movs	r1, #0
 800173c:	0028      	movs	r0, r5
          int32_t wValue = (int32_t)(buffer[1]);
 800173e:	7872      	ldrb	r2, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001740:	f000 fd1c 	bl	800217c <UI_SetReg>
 8001744:	466b      	mov	r3, sp
 8001746:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001748:	e683      	b.n	8001452 <MCP_ReceivedFrame+0x56>
 800174a:	2126      	movs	r1, #38	; 0x26
 800174c:	2324      	movs	r3, #36	; 0x24
 800174e:	2222      	movs	r2, #34	; 0x22
 8001750:	e6b0      	b.n	80014b4 <MCP_ReceivedFrame+0xb8>
 8001752:	ac04      	add	r4, sp, #16
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001754:	e787      	b.n	8001666 <MCP_ReceivedFrame+0x26a>
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	0800603c 	.word	0x0800603c
 800175c:	08006088 	.word	0x08006088
 8001760:	080060d4 	.word	0x080060d4
 8001764:	080062f8 	.word	0x080062f8
 8001768:	20000870 	.word	0x20000870

0800176c <MCP_WaitNextFrame>:
{
 800176c:	b510      	push	{r4, lr}
 800176e:	0004      	movs	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001772:	6980      	ldr	r0, [r0, #24]
 8001774:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	23ac      	movs	r3, #172	; 0xac
 800177a:	54e2      	strb	r2, [r4, r3]
  pHandle->fFcpReceive(pHandle->pFCP);
 800177c:	69a0      	ldr	r0, [r4, #24]
 800177e:	6a23      	ldr	r3, [r4, #32]
 8001780:	4798      	blx	r3
}
 8001782:	bd10      	pop	{r4, pc}

08001784 <MCP_Init>:
{
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	0004      	movs	r4, r0
 8001788:	001d      	movs	r5, r3
  pHandle->s_fwVer = s_fwVer;
 800178a:	23a8      	movs	r3, #168	; 0xa8
{
 800178c:	0016      	movs	r6, r2
 800178e:	b082      	sub	sp, #8
  pHandle->s_fwVer = s_fwVer;
 8001790:	9a07      	ldr	r2, [sp, #28]
  pHandle->pFCP = pFCP;
 8001792:	61a1      	str	r1, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 8001794:	50e2      	str	r2, [r4, r3]
  FCP_SetClient( pFCP, pHandle,
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MCP_Init+0x34>)
{
 8001798:	0008      	movs	r0, r1
  FCP_SetClient( pFCP, pHandle,
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <MCP_Init+0x38>)
 800179c:	0021      	movs	r1, r4
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <MCP_Init+0x3c>)
 80017a2:	f002 fcc9 	bl	8004138 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80017a6:	9b06      	ldr	r3, [sp, #24]
  MCP_WaitNextFrame(pHandle);
 80017a8:	0020      	movs	r0, r4
  pHandle->fFcpSend = fFcpSend;
 80017aa:	61e6      	str	r6, [r4, #28]
  pHandle->fFcpReceive = fFcpReceive;
 80017ac:	6225      	str	r5, [r4, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80017ae:	6263      	str	r3, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 80017b0:	f7ff ffdc 	bl	800176c <MCP_WaitNextFrame>
}
 80017b4:	b002      	add	sp, #8
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
 80017b8:	080017c5 	.word	0x080017c5
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080013fd 	.word	0x080013fd

080017c4 <MCP_OnTimeOut>:
{
 80017c4:	b510      	push	{r4, lr}
     MCP_WaitNextFrame(pHandle);
 80017c6:	f7ff ffd1 	bl	800176c <MCP_WaitNextFrame>
}
 80017ca:	bd10      	pop	{r4, pc}

080017cc <MCP_SentFrame>:
{
 80017cc:	b510      	push	{r4, lr}
    MCP_WaitNextFrame(pHandle);
 80017ce:	f7ff ffcd 	bl	800176c <MCP_WaitNextFrame>
}
 80017d2:	bd10      	pop	{r4, pc}

080017d4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80017d4:	b530      	push	{r4, r5, lr}
 80017d6:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80017d8:	f001 fd96 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 80017dc:	21fa      	movs	r1, #250	; 0xfa
 80017de:	00c9      	lsls	r1, r1, #3
 80017e0:	f7fe fc92 	bl	8000108 <__udivsi3>
 80017e4:	f001 f8d0 	bl	8002988 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80017e8:	4d08      	ldr	r5, [pc, #32]	; (800180c <MX_MotorControl_Init+0x38>)
 80017ea:	4c09      	ldr	r4, [pc, #36]	; (8001810 <MX_MotorControl_Init+0x3c>)
 80017ec:	0029      	movs	r1, r5
 80017ee:	0020      	movs	r0, r4
 80017f0:	f7ff fa82 	bl	8000cf8 <MCboot>
  mc_lock_pins();
 80017f4:	f7ff fd70 	bl	80012d8 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_MotorControl_Init+0x40>)
 80017fa:	0022      	movs	r2, r4
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2101      	movs	r1, #1
 8001800:	002b      	movs	r3, r5
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_MotorControl_Init+0x44>)
 8001804:	f000 fc2e 	bl	8002064 <UI_TaskInit>
}
 8001808:	b003      	add	sp, #12
 800180a:	bd30      	pop	{r4, r5, pc}
 800180c:	2000087c 	.word	0x2000087c
 8001810:	20000878 	.word	0x20000878
 8001814:	0800651c 	.word	0x0800651c
 8001818:	200005a8 	.word	0x200005a8

0800181c <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 800181c:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800181e:	4d48      	ldr	r5, [pc, #288]	; (8001940 <RCM_RegisterRegConv+0x124>)
{
 8001820:	0003      	movs	r3, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001822:	6829      	ldr	r1, [r5, #0]
 8001824:	2900      	cmp	r1, #0
 8001826:	d026      	beq.n	8001876 <RCM_RegisterRegConv+0x5a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001828:	7902      	ldrb	r2, [r0, #4]
 800182a:	7908      	ldrb	r0, [r1, #4]
 800182c:	4282      	cmp	r2, r0
 800182e:	d016      	beq.n	800185e <RCM_RegisterRegConv+0x42>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001830:	6869      	ldr	r1, [r5, #4]
 8001832:	2900      	cmp	r1, #0
 8001834:	d055      	beq.n	80018e2 <RCM_RegisterRegConv+0xc6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001836:	790c      	ldrb	r4, [r1, #4]
  uint8_t handle=255;
 8001838:	20ff      	movs	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800183a:	4294      	cmp	r4, r2
 800183c:	d023      	beq.n	8001886 <RCM_RegisterRegConv+0x6a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800183e:	68a9      	ldr	r1, [r5, #8]
 8001840:	2900      	cmp	r1, #0
 8001842:	d064      	beq.n	800190e <RCM_RegisterRegConv+0xf2>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001844:	790c      	ldrb	r4, [r1, #4]
 8001846:	4294      	cmp	r4, r2
 8001848:	d053      	beq.n	80018f2 <RCM_RegisterRegConv+0xd6>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800184a:	68e9      	ldr	r1, [r5, #12]
 800184c:	2900      	cmp	r1, #0
 800184e:	d020      	beq.n	8001892 <RCM_RegisterRegConv+0x76>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001850:	790c      	ldrb	r4, [r1, #4]
 8001852:	4294      	cmp	r4, r2
 8001854:	d064      	beq.n	8001920 <RCM_RegisterRegConv+0x104>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001856:	2803      	cmp	r0, #3
 8001858:	d91e      	bls.n	8001898 <RCM_RegisterRegConv+0x7c>
 800185a:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 800185c:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800185e:	6809      	ldr	r1, [r1, #0]
 8001860:	681c      	ldr	r4, [r3, #0]
 8001862:	42a1      	cmp	r1, r4
 8001864:	d04b      	beq.n	80018fe <RCM_RegisterRegConv+0xe2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001866:	6869      	ldr	r1, [r5, #4]
 8001868:	2900      	cmp	r1, #0
 800186a:	d1e4      	bne.n	8001836 <RCM_RegisterRegConv+0x1a>
 800186c:	68a9      	ldr	r1, [r5, #8]
 800186e:	2900      	cmp	r1, #0
 8001870:	d05e      	beq.n	8001930 <RCM_RegisterRegConv+0x114>
      i++;
 8001872:	2001      	movs	r0, #1
 8001874:	e7e6      	b.n	8001844 <RCM_RegisterRegConv+0x28>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001876:	6869      	ldr	r1, [r5, #4]
  uint8_t i=0;
 8001878:	2000      	movs	r0, #0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800187a:	2900      	cmp	r1, #0
 800187c:	d032      	beq.n	80018e4 <RCM_RegisterRegConv+0xc8>
 800187e:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001880:	790c      	ldrb	r4, [r1, #4]
 8001882:	4294      	cmp	r4, r2
 8001884:	d1db      	bne.n	800183e <RCM_RegisterRegConv+0x22>
 8001886:	6809      	ldr	r1, [r1, #0]
 8001888:	681c      	ldr	r4, [r3, #0]
 800188a:	42a1      	cmp	r1, r4
 800188c:	d1d7      	bne.n	800183e <RCM_RegisterRegConv+0x22>
      i++;
 800188e:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 8001890:	e003      	b.n	800189a <RCM_RegisterRegConv+0x7e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001892:	2804      	cmp	r0, #4
 8001894:	d900      	bls.n	8001898 <RCM_RegisterRegConv+0x7c>
      i++;
 8001896:	2003      	movs	r0, #3
 8001898:	681c      	ldr	r4, [r3, #0]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800189a:	2100      	movs	r1, #0
      RCM_handle_array [handle] = regConv;
 800189c:	0082      	lsls	r2, r0, #2
 800189e:	50ab      	str	r3, [r5, r2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80018a0:	4a28      	ldr	r2, [pc, #160]	; (8001944 <RCM_RegisterRegConv+0x128>)
 80018a2:	00c3      	lsls	r3, r0, #3
 80018a4:	5099      	str	r1, [r3, r2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80018a6:	68a3      	ldr	r3, [r4, #8]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	d40f      	bmi.n	80018cc <RCM_RegisterRegConv+0xb0>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ac:	68a3      	ldr	r3, [r4, #8]
 80018ae:	4a26      	ldr	r2, [pc, #152]	; (8001948 <RCM_RegisterRegConv+0x12c>)
 80018b0:	401a      	ands	r2, r3
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60a3      	str	r3, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80018ba:	68a3      	ldr	r3, [r4, #8]
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 80018bc:	2b00      	cmp	r3, #0
 80018be:	dbfc      	blt.n	80018ba <RCM_RegisterRegConv+0x9e>
  MODIFY_REG(ADCx->CR,
 80018c0:	68a3      	ldr	r3, [r4, #8]
 80018c2:	4a21      	ldr	r2, [pc, #132]	; (8001948 <RCM_RegisterRegConv+0x12c>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	2201      	movs	r2, #1
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60a3      	str	r3, [r4, #8]
      RCM_NoInj_array [handle].enable = false;
 80018cc:	2100      	movs	r1, #0
 80018ce:	0043      	lsls	r3, r0, #1
 80018d0:	4a1e      	ldr	r2, [pc, #120]	; (800194c <RCM_RegisterRegConv+0x130>)
 80018d2:	181b      	adds	r3, r3, r0
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	5499      	strb	r1, [r3, r2]
      RCM_NoInj_array [handle].prev = handle;
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	0202      	lsls	r2, r0, #8
 80018dc:	4302      	orrs	r2, r0
 80018de:	809a      	strh	r2, [r3, #4]
 80018e0:	e7bc      	b.n	800185c <RCM_RegisterRegConv+0x40>
      i++;
 80018e2:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80018e4:	68a9      	ldr	r1, [r5, #8]
 80018e6:	2900      	cmp	r1, #0
 80018e8:	d00c      	beq.n	8001904 <RCM_RegisterRegConv+0xe8>
 80018ea:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80018ec:	790c      	ldrb	r4, [r1, #4]
 80018ee:	4294      	cmp	r4, r2
 80018f0:	d1ab      	bne.n	800184a <RCM_RegisterRegConv+0x2e>
 80018f2:	6809      	ldr	r1, [r1, #0]
 80018f4:	681c      	ldr	r4, [r3, #0]
 80018f6:	42a1      	cmp	r1, r4
 80018f8:	d1a7      	bne.n	800184a <RCM_RegisterRegConv+0x2e>
      i++;
 80018fa:	2002      	movs	r0, #2
 80018fc:	e7cd      	b.n	800189a <RCM_RegisterRegConv+0x7e>
  uint8_t i=0;
 80018fe:	2000      	movs	r0, #0
 8001900:	e7cb      	b.n	800189a <RCM_RegisterRegConv+0x7e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001902:	2000      	movs	r0, #0
 8001904:	68e9      	ldr	r1, [r5, #12]
 8001906:	2900      	cmp	r1, #0
 8001908:	d0c6      	beq.n	8001898 <RCM_RegisterRegConv+0x7c>
 800190a:	791a      	ldrb	r2, [r3, #4]
 800190c:	e7a0      	b.n	8001850 <RCM_RegisterRegConv+0x34>
 800190e:	2804      	cmp	r0, #4
 8001910:	d9f7      	bls.n	8001902 <RCM_RegisterRegConv+0xe6>
 8001912:	68e9      	ldr	r1, [r5, #12]
 8001914:	2900      	cmp	r1, #0
 8001916:	d009      	beq.n	800192c <RCM_RegisterRegConv+0x110>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001918:	7908      	ldrb	r0, [r1, #4]
 800191a:	4290      	cmp	r0, r2
 800191c:	d106      	bne.n	800192c <RCM_RegisterRegConv+0x110>
      i++;
 800191e:	2002      	movs	r0, #2
 8001920:	681c      	ldr	r4, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001922:	680a      	ldr	r2, [r1, #0]
 8001924:	42a2      	cmp	r2, r4
 8001926:	d196      	bne.n	8001856 <RCM_RegisterRegConv+0x3a>
      i++;
 8001928:	2003      	movs	r0, #3
 800192a:	e7b6      	b.n	800189a <RCM_RegisterRegConv+0x7e>
 800192c:	2002      	movs	r0, #2
 800192e:	e7b3      	b.n	8001898 <RCM_RegisterRegConv+0x7c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001930:	68e9      	ldr	r1, [r5, #12]
 8001932:	2900      	cmp	r1, #0
 8001934:	d0ab      	beq.n	800188e <RCM_RegisterRegConv+0x72>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001936:	790e      	ldrb	r6, [r1, #4]
      i++;
 8001938:	2001      	movs	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800193a:	4296      	cmp	r6, r2
 800193c:	d0f1      	beq.n	8001922 <RCM_RegisterRegConv+0x106>
 800193e:	e7ac      	b.n	800189a <RCM_RegisterRegConv+0x7e>
 8001940:	200008c0 	.word	0x200008c0
 8001944:	20000880 	.word	0x20000880
 8001948:	7fffffe8 	.word	0x7fffffe8
 800194c:	200008a0 	.word	0x200008a0

08001950 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8001950:	0041      	lsls	r1, r0, #1
 8001952:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <RCM_ExecRegularConv+0x168>)
 8001954:	180a      	adds	r2, r1, r0
 8001956:	0052      	lsls	r2, r2, #1
 8001958:	5c9a      	ldrb	r2, [r3, r2]
{
 800195a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (RCM_NoInj_array [handle].enable == false)
 800195c:	2a00      	cmp	r2, #0
 800195e:	d142      	bne.n	80019e6 <RCM_ExecRegularConv+0x96>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	2a00      	cmp	r2, #0
 8001964:	d11c      	bne.n	80019a0 <RCM_ExecRegularConv+0x50>
  uint8_t LastEnable = RCM_MAX_CONV;
 8001966:	2504      	movs	r5, #4
      if (RCM_NoInj_array [i].enable == true)
 8001968:	799a      	ldrb	r2, [r3, #6]
 800196a:	2a00      	cmp	r2, #0
 800196c:	d100      	bne.n	8001970 <RCM_ExecRegularConv+0x20>
 800196e:	e07a      	b.n	8001a66 <RCM_ExecRegularConv+0x116>
      {
        if (RCM_NoInj_array [i].next > handle)
 8001970:	7adf      	ldrb	r7, [r3, #11]
 8001972:	42b8      	cmp	r0, r7
 8001974:	d200      	bcs.n	8001978 <RCM_ExecRegularConv+0x28>
 8001976:	e092      	b.n	8001a9e <RCM_ExecRegularConv+0x14e>
      if (RCM_NoInj_array [i].enable == true)
 8001978:	7b1a      	ldrb	r2, [r3, #12]
 800197a:	2a00      	cmp	r2, #0
 800197c:	d100      	bne.n	8001980 <RCM_ExecRegularConv+0x30>
 800197e:	e091      	b.n	8001aa4 <RCM_ExecRegularConv+0x154>
        if (RCM_NoInj_array [i].next > handle)
 8001980:	7c5f      	ldrb	r7, [r3, #17]
 8001982:	42b8      	cmp	r0, r7
 8001984:	d200      	bcs.n	8001988 <RCM_ExecRegularConv+0x38>
 8001986:	e092      	b.n	8001aae <RCM_ExecRegularConv+0x15e>
      if (RCM_NoInj_array [i].enable == true)
 8001988:	7c9a      	ldrb	r2, [r3, #18]
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 800198a:	2502      	movs	r5, #2
      if (RCM_NoInj_array [i].enable == true)
 800198c:	2a00      	cmp	r2, #0
 800198e:	d100      	bne.n	8001992 <RCM_ExecRegularConv+0x42>
 8001990:	e073      	b.n	8001a7a <RCM_ExecRegularConv+0x12a>
        if (RCM_NoInj_array [i].next > handle)
 8001992:	7ddf      	ldrb	r7, [r3, #23]
 8001994:	4287      	cmp	r7, r0
 8001996:	d800      	bhi.n	800199a <RCM_ExecRegularConv+0x4a>
 8001998:	e08c      	b.n	8001ab4 <RCM_ExecRegularConv+0x164>
      i++;
 800199a:	2203      	movs	r2, #3
      if (RCM_NoInj_array [i].enable == true)
 800199c:	2603      	movs	r6, #3
 800199e:	e005      	b.n	80019ac <RCM_ExecRegularConv+0x5c>
        if (RCM_NoInj_array [i].next > handle)
 80019a0:	795f      	ldrb	r7, [r3, #5]
  uint8_t i=0;
 80019a2:	2500      	movs	r5, #0
        if (RCM_NoInj_array [i].next > handle)
 80019a4:	42b8      	cmp	r0, r7
 80019a6:	d2df      	bcs.n	8001968 <RCM_ExecRegularConv+0x18>
  uint8_t i=0;
 80019a8:	2200      	movs	r2, #0
      if (RCM_NoInj_array [i].enable == true)
 80019aa:	2600      	movs	r6, #0
          RCM_NoInj_array [handle].next = formerNext;
 80019ac:	180d      	adds	r5, r1, r0
          RCM_NoInj_array [i].next = handle;
 80019ae:	0074      	lsls	r4, r6, #1
          RCM_NoInj_array [handle].next = formerNext;
 80019b0:	006d      	lsls	r5, r5, #1
          RCM_NoInj_array [i].next = handle;
 80019b2:	19a4      	adds	r4, r4, r6
          RCM_NoInj_array [handle].next = formerNext;
 80019b4:	195d      	adds	r5, r3, r5
          RCM_NoInj_array [i].next = handle;
 80019b6:	0064      	lsls	r4, r4, #1
          RCM_NoInj_array [handle].prev = i;
 80019b8:	712a      	strb	r2, [r5, #4]
          RCM_NoInj_array [i].next = handle;
 80019ba:	191c      	adds	r4, r3, r4
          RCM_NoInj_array [formerNext].prev = handle;
 80019bc:	007a      	lsls	r2, r7, #1
          RCM_NoInj_array [handle].next = formerNext;
 80019be:	716f      	strb	r7, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80019c0:	19d2      	adds	r2, r2, r7
          RCM_NoInj_array [i].next = handle;
 80019c2:	7160      	strb	r0, [r4, #5]
       {
         formerNext = RCM_NoInj_array [LastEnable].next;
         RCM_NoInj_array [handle].next = formerNext;
         RCM_NoInj_array [handle].prev = LastEnable;
         RCM_NoInj_array [LastEnable].next = handle;
         RCM_NoInj_array [formerNext].prev = handle;
 80019c4:	0052      	lsls	r2, r2, #1
 80019c6:	189a      	adds	r2, r3, r2
 80019c8:	7110      	strb	r0, [r2, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80019ca:	4a3c      	ldr	r2, [pc, #240]	; (8001abc <RCM_ExecRegularConv+0x16c>)
 80019cc:	7815      	ldrb	r5, [r2, #0]
    RCM_NoInj_array [handle].enable = true;
 80019ce:	2601      	movs	r6, #1
 80019d0:	180c      	adds	r4, r1, r0
 80019d2:	0064      	lsls	r4, r4, #1
 80019d4:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80019d6:	006c      	lsls	r4, r5, #1
 80019d8:	1964      	adds	r4, r4, r5
 80019da:	0064      	lsls	r4, r4, #1
 80019dc:	191c      	adds	r4, r3, r4
 80019de:	7864      	ldrb	r4, [r4, #1]
 80019e0:	2c01      	cmp	r4, #1
 80019e2:	d000      	beq.n	80019e6 <RCM_ExecRegularConv+0x96>
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80019e4:	7010      	strb	r0, [r2, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 80019e6:	2277      	movs	r2, #119	; 0x77
 80019e8:	4c35      	ldr	r4, [pc, #212]	; (8001ac0 <RCM_ExecRegularConv+0x170>)
 80019ea:	5ca2      	ldrb	r2, [r4, r2]
 80019ec:	2a00      	cmp	r2, #0
 80019ee:	d135      	bne.n	8001a5c <RCM_ExecRegularConv+0x10c>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80019f0:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 80019f2:	4e34      	ldr	r6, [pc, #208]	; (8001ac4 <RCM_ExecRegularConv+0x174>)
 80019f4:	0082      	lsls	r2, r0, #2
 80019f6:	58b5      	ldr	r5, [r6, r2]
 80019f8:	682a      	ldr	r2, [r5, #0]
 80019fa:	68d4      	ldr	r4, [r2, #12]
 80019fc:	43bc      	bics	r4, r7
 80019fe:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001a00:	68d4      	ldr	r4, [r2, #12]
 8001a02:	4f31      	ldr	r7, [pc, #196]	; (8001ac8 <RCM_ExecRegularConv+0x178>)
 8001a04:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001a06:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001a08:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001a0a:	6954      	ldr	r4, [r2, #20]
 8001a0c:	43bc      	bics	r4, r7
 8001a0e:	68af      	ldr	r7, [r5, #8]
 8001a10:	433c      	orrs	r4, r7
 8001a12:	6154      	str	r4, [r2, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a14:	2480      	movs	r4, #128	; 0x80
    /* Disabling External Trigger of ADC */
    LL_ADC_REG_SetTriggerSource (RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels (RCM_handle_array[handle]->regADC,  RCM_handle_array[handle]->samplingTime );
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[handle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel) );
 8001a16:	792d      	ldrb	r5, [r5, #4]
 8001a18:	01a4      	lsls	r4, r4, #6
 8001a1a:	40ac      	lsls	r4, r5
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001a1c:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a1e:	0b64      	lsrs	r4, r4, #13
 8001a20:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001a22:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8001a24:	6894      	ldr	r4, [r2, #8]
 8001a26:	4f29      	ldr	r7, [pc, #164]	; (8001acc <RCM_ExecRegularConv+0x17c>)
 8001a28:	403c      	ands	r4, r7
 8001a2a:	432c      	orrs	r4, r5
 8001a2c:	6094      	str	r4, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001a2e:	6814      	ldr	r4, [r2, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );

    /* Wait EOC */
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
 8001a30:	4225      	tst	r5, r4
 8001a32:	d0fc      	beq.n	8001a2e <RCM_ExecRegularConv+0xde>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001a34:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001a36:	6c14      	ldr	r4, [r2, #64]	; 0x40
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8001a38:	180a      	adds	r2, r1, r0
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
 8001a3a:	4d20      	ldr	r5, [pc, #128]	; (8001abc <RCM_ExecRegularConv+0x16c>)
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8001a3c:	0052      	lsls	r2, r2, #1
 8001a3e:	189a      	adds	r2, r3, r2
 8001a40:	8054      	strh	r4, [r2, #2]
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
 8001a42:	782c      	ldrb	r4, [r5, #0]
 8001a44:	00a4      	lsls	r4, r4, #2
 8001a46:	5934      	ldr	r4, [r6, r4]
 8001a48:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001a4a:	68f4      	ldr	r4, [r6, #12]
 8001a4c:	43bc      	bics	r4, r7
 8001a4e:	3f02      	subs	r7, #2
 8001a50:	433c      	orrs	r4, r7
 8001a52:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8001a54:	7954      	ldrb	r4, [r2, #5]
 8001a56:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array [handle].status = valid;
 8001a58:	2402      	movs	r4, #2
 8001a5a:	7054      	strb	r4, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 8001a5c:	1808      	adds	r0, r1, r0
 8001a5e:	0040      	lsls	r0, r0, #1
 8001a60:	181b      	adds	r3, r3, r0
return retVal;
 8001a62:	8858      	ldrh	r0, [r3, #2]
}
 8001a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (RCM_NoInj_array [i].enable == true)
 8001a66:	7b1a      	ldrb	r2, [r3, #12]
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	d000      	beq.n	8001a6e <RCM_ExecRegularConv+0x11e>
 8001a6c:	e788      	b.n	8001980 <RCM_ExecRegularConv+0x30>
 8001a6e:	7c9a      	ldrb	r2, [r3, #18]
 8001a70:	2a00      	cmp	r2, #0
 8001a72:	d000      	beq.n	8001a76 <RCM_ExecRegularConv+0x126>
 8001a74:	e78d      	b.n	8001992 <RCM_ExecRegularConv+0x42>
       if (LastEnable != RCM_MAX_CONV )
 8001a76:	2d04      	cmp	r5, #4
 8001a78:	d00d      	beq.n	8001a96 <RCM_ExecRegularConv+0x146>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8001a7a:	006a      	lsls	r2, r5, #1
 8001a7c:	1952      	adds	r2, r2, r5
 8001a7e:	0052      	lsls	r2, r2, #1
 8001a80:	189a      	adds	r2, r3, r2
         RCM_NoInj_array [handle].next = formerNext;
 8001a82:	180c      	adds	r4, r1, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8001a84:	7956      	ldrb	r6, [r2, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8001a86:	0064      	lsls	r4, r4, #1
 8001a88:	191c      	adds	r4, r3, r4
 8001a8a:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 8001a8c:	7150      	strb	r0, [r2, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8001a8e:	0072      	lsls	r2, r6, #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8001a90:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array [formerNext].prev = handle;
 8001a92:	1992      	adds	r2, r2, r6
 8001a94:	e796      	b.n	80019c4 <RCM_ExecRegularConv+0x74>
         RCM_currentHandle = handle;
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <RCM_ExecRegularConv+0x16c>)
 8001a98:	0005      	movs	r5, r0
 8001a9a:	7010      	strb	r0, [r2, #0]
    while (i < RCM_MAX_CONV)
 8001a9c:	e797      	b.n	80019ce <RCM_ExecRegularConv+0x7e>
      i++;
 8001a9e:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 8001aa0:	2601      	movs	r6, #1
 8001aa2:	e783      	b.n	80019ac <RCM_ExecRegularConv+0x5c>
 8001aa4:	7c9a      	ldrb	r2, [r3, #18]
      i++;
 8001aa6:	2501      	movs	r5, #1
      if (RCM_NoInj_array [i].enable == true)
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d0e6      	beq.n	8001a7a <RCM_ExecRegularConv+0x12a>
 8001aac:	e771      	b.n	8001992 <RCM_ExecRegularConv+0x42>
      i++;
 8001aae:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 8001ab0:	2602      	movs	r6, #2
 8001ab2:	e77b      	b.n	80019ac <RCM_ExecRegularConv+0x5c>
      i++;
 8001ab4:	2503      	movs	r5, #3
 8001ab6:	e7e0      	b.n	8001a7a <RCM_ExecRegularConv+0x12a>
 8001ab8:	200008a0 	.word	0x200008a0
 8001abc:	200008bc 	.word	0x200008bc
 8001ac0:	20000314 	.word	0x20000314
 8001ac4:	200008c0 	.word	0x200008c0
 8001ac8:	fffff23f 	.word	0xfffff23f
 8001acc:	7fffffe8 	.word	0x7fffffe8

08001ad0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001ad0:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001ad2:	4c11      	ldr	r4, [pc, #68]	; (8001b18 <RCM_ExecUserConv+0x48>)
 8001ad4:	7823      	ldrb	r3, [r4, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d000      	beq.n	8001adc <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001adc:	4d0f      	ldr	r5, [pc, #60]	; (8001b1c <RCM_ExecUserConv+0x4c>)
 8001ade:	7828      	ldrb	r0, [r5, #0]
 8001ae0:	f7ff ff36 	bl	8001950 <RCM_ExecRegularConv>
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <RCM_ExecUserConv+0x50>)
 8001ae6:	0001      	movs	r1, r0
 8001ae8:	8018      	strh	r0, [r3, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8001aea:	7828      	ldrb	r0, [r5, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <RCM_ExecUserConv+0x54>)
 8001aee:	0043      	lsls	r3, r0, #1
 8001af0:	181b      	adds	r3, r3, r0
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	18d3      	adds	r3, r2, r3
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <RCM_ExecUserConv+0x30>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8001afc:	2302      	movs	r3, #2
 8001afe:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <RCM_ExecUserConv+0x58>)
 8001b02:	00c2      	lsls	r2, r0, #3
 8001b04:	58d5      	ldr	r5, [r2, r3]
 8001b06:	2d00      	cmp	r5, #0
 8001b08:	d0e7      	beq.n	8001ada <RCM_ExecUserConv+0xa>
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001b0a:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001b0c:	189b      	adds	r3, r3, r2
 8001b0e:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001b10:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001b12:	47a8      	blx	r5
}
 8001b14:	e7e1      	b.n	8001ada <RCM_ExecUserConv+0xa>
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	200008b9 	.word	0x200008b9
 8001b1c:	200008b8 	.word	0x200008b8
 8001b20:	200008ba 	.word	0x200008ba
 8001b24:	200008a0 	.word	0x200008a0
 8001b28:	20000880 	.word	0x20000880

08001b2c <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8001b2e:	4819      	ldr	r0, [pc, #100]	; (8001b94 <RCM_ExecNextConv+0x68>)
 8001b30:	4919      	ldr	r1, [pc, #100]	; (8001b98 <RCM_ExecNextConv+0x6c>)
 8001b32:	7802      	ldrb	r2, [r0, #0]
 8001b34:	0053      	lsls	r3, r2, #1
 8001b36:	189b      	adds	r3, r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	5c5b      	ldrb	r3, [r3, r1]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d028      	beq.n	8001b92 <RCM_ExecNextConv+0x66>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001b40:	2604      	movs	r6, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001b42:	2403      	movs	r4, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <RCM_ExecNextConv+0x70>)
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	58d2      	ldr	r2, [r2, r3]
 8001b4a:	6812      	ldr	r2, [r2, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001b4c:	6016      	str	r6, [r2, #0]
    /* Disabling ADC DMA request  */
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8001b4e:	7805      	ldrb	r5, [r0, #0]
 8001b50:	00aa      	lsls	r2, r5, #2
 8001b52:	58d2      	ldr	r2, [r2, r3]
 8001b54:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001b56:	68d8      	ldr	r0, [r3, #12]
 8001b58:	43a0      	bics	r0, r4
 8001b5a:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001b5c:	68d8      	ldr	r0, [r3, #12]
 8001b5e:	4c10      	ldr	r4, [pc, #64]	; (8001ba0 <RCM_ExecNextConv+0x74>)
 8001b60:	4020      	ands	r0, r4
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001b62:	2407      	movs	r4, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001b64:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001b66:	6958      	ldr	r0, [r3, #20]
 8001b68:	43a0      	bics	r0, r4
 8001b6a:	6894      	ldr	r4, [r2, #8]
 8001b6c:	4320      	orrs	r0, r4
    /* Disabling External Trigger of ADC */
    LL_ADC_REG_SetTriggerSource (RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel of ADC for Regular Conversion */
    LL_ADC_SetSamplingTimeCommonChannels (RCM_handle_array[RCM_currentHandle]->regADC,  RCM_handle_array[RCM_currentHandle]->samplingTime );
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[RCM_currentHandle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel) );
 8001b6e:	2401      	movs	r4, #1
 8001b70:	6158      	str	r0, [r3, #20]
 8001b72:	0020      	movs	r0, r4
 8001b74:	7912      	ldrb	r2, [r2, #4]
 8001b76:	4090      	lsls	r0, r2
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b78:	0340      	lsls	r0, r0, #13
 8001b7a:	0b40      	lsrs	r0, r0, #13
 8001b7c:	6298      	str	r0, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <RCM_ExecNextConv+0x78>)
 8001b82:	4002      	ands	r2, r0
 8001b84:	4332      	orrs	r2, r6
 8001b86:	609a      	str	r2, [r3, #8]
    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8001b88:	006b      	lsls	r3, r5, #1
 8001b8a:	195b      	adds	r3, r3, r5
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	18c9      	adds	r1, r1, r3
 8001b90:	704c      	strb	r4, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	200008bc 	.word	0x200008bc
 8001b98:	200008a0 	.word	0x200008a0
 8001b9c:	200008c0 	.word	0x200008c0
 8001ba0:	fffff23f 	.word	0xfffff23f
 8001ba4:	7fffffe8 	.word	0x7fffffe8

08001ba8 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8001ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001baa:	4c10      	ldr	r4, [pc, #64]	; (8001bec <RCM_ReadOngoingConv+0x44>)
 8001bac:	4910      	ldr	r1, [pc, #64]	; (8001bf0 <RCM_ReadOngoingConv+0x48>)
 8001bae:	7820      	ldrb	r0, [r4, #0]
 8001bb0:	0043      	lsls	r3, r0, #1
 8001bb2:	181a      	adds	r2, r3, r0
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	188a      	adds	r2, r1, r2
 8001bb8:	7855      	ldrb	r5, [r2, #1]
 8001bba:	2d01      	cmp	r5, #1
 8001bbc:	d005      	beq.n	8001bca <RCM_ReadOngoingConv+0x22>
    /* Restore back DMA configuration. */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8001bbe:	181b      	adds	r3, r3, r0
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	18cb      	adds	r3, r1, r3
 8001bc4:	795b      	ldrb	r3, [r3, #5]
 8001bc6:	7023      	strb	r3, [r4, #0]
}
 8001bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8001bca:	4e0a      	ldr	r6, [pc, #40]	; (8001bf4 <RCM_ReadOngoingConv+0x4c>)
 8001bcc:	0087      	lsls	r7, r0, #2
 8001bce:	59be      	ldr	r6, [r7, r6]
 8001bd0:	6836      	ldr	r6, [r6, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001bd2:	6837      	ldr	r7, [r6, #0]
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001bd4:	077f      	lsls	r7, r7, #29
 8001bd6:	d5f2      	bpl.n	8001bbe <RCM_ReadOngoingConv+0x16>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001bd8:	6c37      	ldr	r7, [r6, #64]	; 0x40
    RCM_NoInj_array [RCM_currentHandle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );
 8001bda:	8057      	strh	r7, [r2, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8001bdc:	2702      	movs	r7, #2
 8001bde:	7057      	strb	r7, [r2, #1]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001be0:	68f2      	ldr	r2, [r6, #12]
 8001be2:	3701      	adds	r7, #1
 8001be4:	43ba      	bics	r2, r7
 8001be6:	4315      	orrs	r5, r2
 8001be8:	60f5      	str	r5, [r6, #12]
}
 8001bea:	e7e8      	b.n	8001bbe <RCM_ReadOngoingConv+0x16>
 8001bec:	200008bc 	.word	0x200008bc
 8001bf0:	200008a0 	.word	0x200008a0
 8001bf4:	200008c0 	.word	0x200008c0

08001bf8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_MspInit+0x2c>)
{
 8001bfc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	6999      	ldr	r1, [r3, #24]
 8001c00:	4311      	orrs	r1, r2
 8001c02:	6199      	str	r1, [r3, #24]
 8001c04:	6999      	ldr	r1, [r3, #24]
 8001c06:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	9200      	str	r2, [sp, #0]
 8001c0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	0549      	lsls	r1, r1, #21
 8001c12:	430a      	orrs	r2, r1
 8001c14:	61da      	str	r2, [r3, #28]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	400b      	ands	r3, r1
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	b002      	add	sp, #8
 8001c20:	4770      	bx	lr
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	0004      	movs	r4, r0
 8001c2c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	2214      	movs	r2, #20
 8001c30:	2100      	movs	r1, #0
 8001c32:	a804      	add	r0, sp, #16
 8001c34:	f004 f893 	bl	8005d5e <memset>
  if(hadc->Instance==ADC1)
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_ADC_MspInit+0xb4>)
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c40:	b00a      	add	sp, #40	; 0x28
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c44:	2080      	movs	r0, #128	; 0x80
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <HAL_ADC_MspInit+0xb8>)
 8001c48:	0080      	lsls	r0, r0, #2
 8001c4a:	6999      	ldr	r1, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c4e:	4301      	orrs	r1, r0
 8001c50:	6199      	str	r1, [r3, #24]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c58:	9201      	str	r2, [sp, #4]
 8001c5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	6959      	ldr	r1, [r3, #20]
 8001c5e:	0280      	lsls	r0, r0, #10
 8001c60:	4301      	orrs	r1, r0
 8001c62:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4002      	ands	r2, r0
 8001c6c:	9202      	str	r2, [sp, #8]
 8001c6e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	430a      	orrs	r2, r1
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001c7a:	2238      	movs	r2, #56	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	9303      	str	r3, [sp, #12]
 8001c80:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001c82:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	a904      	add	r1, sp, #16
 8001c86:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001c88:	9204      	str	r2, [sp, #16]
 8001c8a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f000 fed0 	bl	8002a30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001c90:	2303      	movs	r3, #3
 8001c92:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001c94:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <HAL_ADC_MspInit+0xbc>)
 8001c96:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001c98:	9204      	str	r2, [sp, #16]
 8001c9a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f000 fec7 	bl	8002a30 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8001ca2:	4d11      	ldr	r5, [pc, #68]	; (8001ce8 <HAL_ADC_MspInit+0xc0>)
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001ca6:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8001ca8:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cae:	3380      	adds	r3, #128	; 0x80
 8001cb0:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc0:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc2:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001cc4:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001cc6:	f000 fe7f 	bl	80029c8 <HAL_DMA_Init>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d102      	bne.n	8001cd4 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001cce:	6325      	str	r5, [r4, #48]	; 0x30
 8001cd0:	626c      	str	r4, [r5, #36]	; 0x24
}
 8001cd2:	e7b5      	b.n	8001c40 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001cd4:	f7fe fdca 	bl	800086c <Error_Handler>
 8001cd8:	e7f9      	b.n	8001cce <HAL_ADC_MspInit+0xa6>
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	40012400 	.word	0x40012400
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	20000618 	.word	0x20000618
 8001cec:	40020008 	.word	0x40020008

08001cf0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	0004      	movs	r4, r0
 8001cf4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf6:	2214      	movs	r2, #20
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	a802      	add	r0, sp, #8
 8001cfc:	f004 f82f 	bl	8005d5e <memset>
  if(htim_pwm->Instance==TIM1)
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_TIM_PWM_MspInit+0x5c>)
 8001d02:	6822      	ldr	r2, [r4, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d08:	b008      	add	sp, #32
 8001d0a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0c:	2080      	movs	r0, #128	; 0x80
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_TIM_PWM_MspInit+0x60>)
 8001d10:	0100      	lsls	r0, r0, #4
 8001d12:	6999      	ldr	r1, [r3, #24]
 8001d14:	4301      	orrs	r1, r0
 8001d16:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d18:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1e:	4002      	ands	r2, r0
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001d26:	480b      	ldr	r0, [pc, #44]	; (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001d2e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	400b      	ands	r3, r1
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001d36:	2302      	movs	r3, #2
 8001d38:	0152      	lsls	r2, r2, #5
 8001d3a:	9202      	str	r2, [sp, #8]
 8001d3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d3e:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001d40:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d44:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f000 fe73 	bl	8002a30 <HAL_GPIO_Init>
}
 8001d4a:	e7dd      	b.n	8001d08 <HAL_TIM_PWM_MspInit+0x18>
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	48000400 	.word	0x48000400

08001d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	0004      	movs	r4, r0
 8001d5c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	2214      	movs	r2, #20
 8001d60:	2100      	movs	r1, #0
 8001d62:	a802      	add	r0, sp, #8
 8001d64:	f003 fffb 	bl	8005d5e <memset>
  if(htim_base->Instance==TIM2)
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	6822      	ldr	r2, [r4, #0]
 8001d6c:	05db      	lsls	r3, r3, #23
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_TIM_Base_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d72:	b008      	add	sp, #32
 8001d74:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d76:	2201      	movs	r2, #1
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_TIM_Base_MspInit+0x60>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7c:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d80:	4311      	orrs	r1, r2
 8001d82:	61d9      	str	r1, [r3, #28]
 8001d84:	69d9      	ldr	r1, [r3, #28]
 8001d86:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	0289      	lsls	r1, r1, #10
 8001d92:	430a      	orrs	r2, r1
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8001d98:	2207      	movs	r2, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8001da0:	2302      	movs	r3, #2
 8001da2:	9202      	str	r2, [sp, #8]
 8001da4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001daa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001dac:	3b01      	subs	r3, #1
 8001dae:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f000 fe3e 	bl	8002a30 <HAL_GPIO_Init>
}
 8001db4:	e7dd      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x1a>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dbc:	b5d0      	push	{r4, r6, r7, lr}
 8001dbe:	0004      	movs	r4, r0
 8001dc0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	2214      	movs	r2, #20
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	a802      	add	r0, sp, #8
 8001dc8:	f003 ffc9 	bl	8005d5e <memset>
  if(htim->Instance==TIM1)
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_TIM_MspPostInit+0x7c>)
 8001dce:	6822      	ldr	r2, [r4, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dd4:	b008      	add	sp, #32
 8001dd6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	2080      	movs	r0, #128	; 0x80
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_TIM_MspPostInit+0x80>)
 8001ddc:	02c0      	lsls	r0, r0, #11
 8001dde:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001de0:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4301      	orrs	r1, r0
 8001de4:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4002      	ands	r2, r0
 8001dee:	9200      	str	r2, [sp, #0]
 8001df0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001df4:	2703      	movs	r7, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	430a      	orrs	r2, r1
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001dfc:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	400b      	ands	r3, r1
 8001e00:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e02:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001e06:	2302      	movs	r3, #2
 8001e08:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	a902      	add	r1, sp, #8
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001e0e:	9202      	str	r2, [sp, #8]
 8001e10:	9303      	str	r3, [sp, #12]
 8001e12:	9604      	str	r6, [sp, #16]
 8001e14:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e16:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f000 fe0a 	bl	8002a30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001e1c:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001e20:	2302      	movs	r3, #2
 8001e22:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	a902      	add	r1, sp, #8
 8001e26:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001e28:	9202      	str	r2, [sp, #8]
 8001e2a:	9303      	str	r3, [sp, #12]
 8001e2c:	9604      	str	r6, [sp, #16]
 8001e2e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e30:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f000 fdfd 	bl	8002a30 <HAL_GPIO_Init>
}
 8001e36:	e7cd      	b.n	8001dd4 <HAL_TIM_MspPostInit+0x18>
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	48000400 	.word	0x48000400

08001e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e44:	b510      	push	{r4, lr}
 8001e46:	0004      	movs	r4, r0
 8001e48:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	2214      	movs	r2, #20
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	a802      	add	r0, sp, #8
 8001e50:	f003 ff85 	bl	8005d5e <memset>
  if(huart->Instance==USART1)
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_UART_MspInit+0x54>)
 8001e56:	6822      	ldr	r2, [r4, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e5c:	b008      	add	sp, #32
 8001e5e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e60:	2080      	movs	r0, #128	; 0x80
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_UART_MspInit+0x58>)
 8001e64:	01c0      	lsls	r0, r0, #7
 8001e66:	6999      	ldr	r1, [r3, #24]
 8001e68:	4301      	orrs	r1, r0
 8001e6a:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e6e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e70:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e72:	4002      	ands	r2, r0
 8001e74:	9200      	str	r2, [sp, #0]
 8001e76:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e78:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001e82:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e84:	400b      	ands	r3, r1
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001e8a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001e8e:	9202      	str	r2, [sp, #8]
 8001e90:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f000 fdcd 	bl	8002a30 <HAL_GPIO_Init>
}
 8001e96:	e7e1      	b.n	8001e5c <HAL_UART_MspInit+0x18>
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000400 	.word	0x48000400

08001ea4 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8001ea4:	2207      	movs	r2, #7
{
 8001ea6:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <DMA1_Channel1_IRQHandler+0x10>)
 8001eaa:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8001eac:	f7ff f916 	bl	80010dc <TSK_HighFrequencyTask>
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8001eb0:	bd10      	pop	{r4, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001eb8:	2201      	movs	r2, #1
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8001eba:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_UPDATE(PWM_Handle_M1.pParams_str->TIMx))
 8001ebc:	4c0f      	ldr	r4, [pc, #60]	; (8001efc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8001ebe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6919      	ldr	r1, [r3, #16]
 8001ec4:	420a      	tst	r2, r1
 8001ec6:	d002      	beq.n	8001ece <TIM1_BRK_UP_TRG_COM_IRQHandler+0x16>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8001ec8:	68d9      	ldr	r1, [r3, #12]
 8001eca:	420a      	tst	r2, r1
 8001ecc:	d10d      	bne.n	8001eea <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	420a      	tst	r2, r1
 8001ed4:	d008      	beq.n	8001ee8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8001ed6:	68d9      	ldr	r1, [r3, #12]
 8001ed8:	420a      	tst	r2, r1
 8001eda:	d005      	beq.n	8001ee8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001edc:	3a02      	subs	r2, #2
 8001ede:	3aff      	subs	r2, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    F0XX_BRK_IRQHandler(&PWM_Handle_M1);
 8001ee0:	0020      	movs	r0, r4
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	f003 fb4c 	bl	8005580 <F0XX_BRK_IRQHandler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8001ee8:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001eea:	3a03      	subs	r2, #3
 8001eec:	611a      	str	r2, [r3, #16]
    R3_1_TIMx_UP_IRQHandler( &PWM_Handle_M1 );
 8001eee:	0020      	movs	r0, r4
 8001ef0:	f003 fb08 	bl	8005504 <R3_1_TIMx_UP_IRQHandler>
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8001ef4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	e7e9      	b.n	8001ece <TIM1_BRK_UP_TRG_COM_IRQHandler+0x16>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	20000314 	.word	0x20000314

08001f00 <DMA1_Channel4_5_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <DMA1_Channel4_5_IRQHandler+0x10>)
 8001f04:	0192      	lsls	r2, r2, #6
 8001f06:	6819      	ldr	r1, [r3, #0]
{
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */

  if (LL_DMA_IsActiveFlag_TC4(DMA1))
 8001f08:	4211      	tst	r1, r2
 8001f0a:	d000      	beq.n	8001f0e <DMA1_Channel4_5_IRQHandler+0xe>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8001f0c:	605a      	str	r2, [r3, #4]
    /* USER CODE END DMAx_R1_M1_TC4 */
  }
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8001f0e:	4770      	bx	lr
 8001f10:	40020000 	.word	0x40020000

08001f14 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8001f14:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx) != 0)
 8001f16:	4c0b      	ldr	r4, [pc, #44]	; (8001f44 <TIM2_IRQHandler+0x30>)
 8001f18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	07d2      	lsls	r2, r2, #31
 8001f1e:	d409      	bmi.n	8001f34 <TIM2_IRQHandler+0x20>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	0792      	lsls	r2, r2, #30
 8001f24:	d505      	bpl.n	8001f32 <TIM2_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001f26:	2203      	movs	r2, #3
 8001f28:	4252      	negs	r2, r2
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
  {
    LL_TIM_ClearFlag_CC1(HALL_M1.TIMx);
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8001f2a:	0020      	movs	r0, r4
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	f002 fac5 	bl	80044bc <HALL_TIMx_CC_IRQHandler>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8001f32:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f34:	2202      	movs	r2, #2
 8001f36:	4252      	negs	r2, r2
 8001f38:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8001f3a:	0020      	movs	r0, r4
 8001f3c:	f002 fc48 	bl	80047d0 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8001f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f42:	e7ed      	b.n	8001f20 <TIM2_IRQHandler+0xc>
 8001f44:	200000b4 	.word	0x200000b4

08001f48 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8001f48:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001f4a:	2590      	movs	r5, #144	; 0x90
 8001f4c:	4c18      	ldr	r4, [pc, #96]	; (8001fb0 <USART1_IRQHandler+0x68>)
 8001f4e:	006d      	lsls	r5, r5, #1
 8001f50:	5963      	ldr	r3, [r4, r5]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	0692      	lsls	r2, r2, #26
 8001f56:	d50b      	bpl.n	8001f70 <USART1_IRQHandler+0x28>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8001f58:	21ff      	movs	r1, #255	; 0xff
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001f5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f5c:	0020      	movs	r0, r4
 8001f5e:	4019      	ands	r1, r3
 8001f60:	f003 fe18 	bl	8005b94 <UFCP_RX_IRQ_Handler>
 8001f64:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d01d      	beq.n	8001fa6 <USART1_IRQHandler+0x5e>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d017      	beq.n	8001f9e <USART1_IRQHandler+0x56>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001f6e:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	0612      	lsls	r2, r2, #24
 8001f74:	d505      	bpl.n	8001f82 <USART1_IRQHandler+0x3a>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8001f76:	0020      	movs	r0, r4
 8001f78:	f003 fd5c 	bl	8005a34 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001f7c:	2390      	movs	r3, #144	; 0x90
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	58e3      	ldr	r3, [r4, r3]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001f82:	2508      	movs	r5, #8
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	421d      	tst	r5, r3
 8001f88:	d008      	beq.n	8001f9c <USART1_IRQHandler+0x54>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f003 fe6a 	bl	8005c64 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001f90:	2390      	movs	r3, #144	; 0x90
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	58e3      	ldr	r3, [r4, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001f96:	621d      	str	r5, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8001f98:	f000 f8c6 	bl	8002128 <UI_SerialCommunicationTimeOutStop>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
      UI_SerialCommunicationTimeOutStop();
 8001f9e:	f000 f8c3 	bl	8002128 <UI_SerialCommunicationTimeOutStop>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001fa2:	5963      	ldr	r3, [r4, r5]
 8001fa4:	e7e4      	b.n	8001f70 <USART1_IRQHandler+0x28>
      UI_SerialCommunicationTimeOutStart();
 8001fa6:	f000 f8c5 	bl	8002134 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001faa:	5963      	ldr	r3, [r4, r5]
 8001fac:	e7e0      	b.n	8001f70 <USART1_IRQHandler+0x28>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	2000046c 	.word	0x2000046c

08001fb4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001fb6:	2590      	movs	r5, #144	; 0x90
  TSK_HardwareFaultTask();
 8001fb8:	f7ff f97e 	bl	80012b8 <TSK_HardwareFaultTask>
 8001fbc:	4c17      	ldr	r4, [pc, #92]	; (800201c <HardFault_Handler+0x68>)
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001fbe:	006d      	lsls	r5, r5, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001fc0:	2608      	movs	r6, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001fc2:	2780      	movs	r7, #128	; 0x80
 8001fc4:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	4216      	tst	r6, r2
 8001fca:	d007      	beq.n	8001fdc <HardFault_Handler+0x28>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8001fcc:	0020      	movs	r0, r4
 8001fce:	f003 fe49 	bl	8005c64 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001fd2:	5963      	ldr	r3, [r4, r5]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001fd4:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8001fd6:	f000 f8a7 	bl	8002128 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001fda:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	4217      	tst	r7, r2
 8001fe0:	d014      	beq.n	800200c <HardFault_Handler+0x58>
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8001fe2:	0020      	movs	r0, r4
 8001fe4:	f003 fd26 	bl	8005a34 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001fe8:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	0692      	lsls	r2, r2, #26
 8001fee:	d5ea      	bpl.n	8001fc6 <HardFault_Handler+0x12>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8001ff0:	21ff      	movs	r1, #255	; 0xff
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001ff2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	4019      	ands	r1, r3
 8001ff8:	f003 fdcc 	bl	8005b94 <UFCP_RX_IRQ_Handler>
 8001ffc:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d008      	beq.n	8002014 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002002:	2b02      	cmp	r3, #2
 8002004:	d1dd      	bne.n	8001fc2 <HardFault_Handler+0xe>
        {
          UI_SerialCommunicationTimeOutStop();
 8002006:	f000 f88f 	bl	8002128 <UI_SerialCommunicationTimeOutStop>
 800200a:	e7d9      	b.n	8001fc0 <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	0692      	lsls	r2, r2, #26
 8002010:	d5d9      	bpl.n	8001fc6 <HardFault_Handler+0x12>
 8002012:	e7ed      	b.n	8001ff0 <HardFault_Handler+0x3c>
          UI_SerialCommunicationTimeOutStart();
 8002014:	f000 f88e 	bl	8002134 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002018:	e7d3      	b.n	8001fc2 <HardFault_Handler+0xe>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	2000046c 	.word	0x2000046c

08002020 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002020:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002022:	4c08      	ldr	r4, [pc, #32]	; (8002044 <SysTick_Handler+0x24>)
 8002024:	7823      	ldrb	r3, [r4, #0]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d005      	beq.n	8002036 <SysTick_Handler+0x16>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800202a:	3301      	adds	r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8002030:	f7ff f932 	bl	8001298 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002034:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8002036:	f000 fb1b 	bl	8002670 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800203a:	f000 fcc1 	bl	80029c0 <HAL_SYSTICK_IRQHandler>
 800203e:	2301      	movs	r3, #1
 8002040:	e7f5      	b.n	800202e <SysTick_Handler+0xe>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	200005ac 	.word	0x200005ac

08002048 <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8002048:	2201      	movs	r2, #1
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <EXTI0_1_IRQHandler+0x18>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler (void)
{
 800204c:	b510      	push	{r4, lr}
 800204e:	6959      	ldr	r1, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0) )
 8002050:	420a      	tst	r2, r1
 8002052:	d100      	bne.n	8002056 <EXTI0_1_IRQHandler+0xe>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_0);
    UI_HandleStartStopButton_cb ();
  }

}
 8002054:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002056:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002058:	f000 f872 	bl	8002140 <UI_HandleStartStopButton_cb>
}
 800205c:	e7fa      	b.n	8002054 <EXTI0_1_IRQHandler+0xc>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40010400 	.word	0x40010400

08002064 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002066:	4646      	mov	r6, r8
 8002068:	4698      	mov	r8, r3

    pMCP = &MCP_UI_Params;
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <UI_TaskInit+0x68>)
{
 800206c:	46d6      	mov	lr, sl
 800206e:	464f      	mov	r7, r9
    pMCP = &MCP_UI_Params;
 8002070:	469a      	mov	sl, r3
{
 8002072:	b5c0      	push	{r6, r7, lr}
 8002074:	0017      	movs	r7, r2
    pMCP = &MCP_UI_Params;
 8002076:	4652      	mov	r2, sl
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <UI_TaskInit+0x6c>)
    pMCP->_Super = UI_Params;
 800207a:	4c16      	ldr	r4, [pc, #88]	; (80020d4 <UI_TaskInit+0x70>)
    pMCP = &MCP_UI_Params;
 800207c:	6013      	str	r3, [r2, #0]
{
 800207e:	000e      	movs	r6, r1
 8002080:	4681      	mov	r9, r0
    pMCP->_Super = UI_Params;
 8002082:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002084:	c307      	stmia	r3!, {r0, r1, r2}
 8002086:	001d      	movs	r5, r3
 8002088:	cc0e      	ldmia	r4!, {r1, r2, r3}
 800208a:	c50e      	stmia	r5!, {r1, r2, r3}

    UFCP_Init( & pUSART );
 800208c:	4c12      	ldr	r4, [pc, #72]	; (80020d8 <UI_TaskInit+0x74>)
{
 800208e:	b082      	sub	sp, #8
    UFCP_Init( & pUSART );
 8002090:	0020      	movs	r0, r4
 8002092:	f003 fccb 	bl	8005a2c <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002096:	4650      	mov	r0, sl
 8002098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800209a:	0021      	movs	r1, r4
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <UI_TaskInit+0x78>)
 80020a0:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <UI_TaskInit+0x7c>)
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	6800      	ldr	r0, [r0, #0]
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <UI_TaskInit+0x80>)
 80020a8:	f7ff fb6c 	bl	8001784 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80020ac:	4653      	mov	r3, sl
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	464b      	mov	r3, r9
 80020b2:	003a      	movs	r2, r7
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	0031      	movs	r1, r6
 80020b8:	4643      	mov	r3, r8
 80020ba:	f000 f84d 	bl	8002158 <UI_Init>

}
 80020be:	b002      	add	sp, #8
 80020c0:	bce0      	pop	{r5, r6, r7}
 80020c2:	46ba      	mov	sl, r7
 80020c4:	46b1      	mov	r9, r6
 80020c6:	46a8      	mov	r8, r5
 80020c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000984 	.word	0x20000984
 80020d0:	200008d0 	.word	0x200008d0
 80020d4:	20000784 	.word	0x20000784
 80020d8:	2000046c 	.word	0x2000046c
 80020dc:	08005c7d 	.word	0x08005c7d
 80020e0:	08005ad1 	.word	0x08005ad1
 80020e4:	08005aa5 	.word	0x08005aa5

080020e8 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <UI_Scheduler+0x34>)
 80020ea:	881a      	ldrh	r2, [r3, #0]
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d003      	beq.n	80020f8 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	3a01      	subs	r2, #1
 80020f4:	b292      	uxth	r2, r2
 80020f6:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80020f8:	4a09      	ldr	r2, [pc, #36]	; (8002120 <UI_Scheduler+0x38>)
 80020fa:	8813      	ldrh	r3, [r2, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d903      	bls.n	8002108 <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 8002100:	8813      	ldrh	r3, [r2, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	b29b      	uxth	r3, r3
 8002106:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <UI_Scheduler+0x3c>)
 800210a:	8813      	ldrh	r3, [r2, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d903      	bls.n	8002118 <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 8002110:	8813      	ldrh	r3, [r2, #0]
 8002112:	3b01      	subs	r3, #1
 8002114:	b29b      	uxth	r3, r3
 8002116:	8013      	strh	r3, [r2, #0]
  }
}
 8002118:	4770      	bx	lr
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	20000982 	.word	0x20000982
 8002120:	20000980 	.word	0x20000980
 8002124:	200005ae 	.word	0x200005ae

08002128 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002128:	2200      	movs	r2, #0
 800212a:	4b01      	ldr	r3, [pc, #4]	; (8002130 <UI_SerialCommunicationTimeOutStop+0x8>)
 800212c:	801a      	strh	r2, [r3, #0]
}
 800212e:	4770      	bx	lr
 8002130:	20000980 	.word	0x20000980

08002134 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002134:	224f      	movs	r2, #79	; 0x4f
 8002136:	4b01      	ldr	r3, [pc, #4]	; (800213c <UI_SerialCommunicationTimeOutStart+0x8>)
 8002138:	801a      	strh	r2, [r3, #0]
}
 800213a:	4770      	bx	lr
 800213c:	20000980 	.word	0x20000980

08002140 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002140:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002142:	f7fe fba5 	bl	8000890 <MC_GetSTMStateMotor1>
 8002146:	2800      	cmp	r0, #0
 8002148:	d102      	bne.n	8002150 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    MC_StartMotor1();
 800214a:	f7fe fb91 	bl	8000870 <MC_StartMotor1>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 800214e:	bd10      	pop	{r4, pc}
    MC_StopMotor1();
 8002150:	f7fe fb96 	bl	8000880 <MC_StopMotor1>
}
 8002154:	e7fb      	b.n	800214e <UI_HandleStartStopButton_cb+0xe>
 8002156:	46c0      	nop			; (mov r8, r8)

08002158 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002158:	60c3      	str	r3, [r0, #12]
  pHandle->bSelectedDrive = 0u;
 800215a:	2300      	movs	r3, #0
 800215c:	7503      	strb	r3, [r0, #20]
  pHandle->pUICfg = pUICfg;
 800215e:	9b00      	ldr	r3, [sp, #0]
  pHandle->bDriveNum = bMCNum;
 8002160:	7101      	strb	r1, [r0, #4]
  pHandle->pMCI = pMCI;
 8002162:	6082      	str	r2, [r0, #8]
  pHandle->pUICfg = pUICfg;
 8002164:	6103      	str	r3, [r0, #16]
}
 8002166:	4770      	bx	lr

08002168 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002168:	7902      	ldrb	r2, [r0, #4]
{
 800216a:	0003      	movs	r3, r0
  {
    retVal = false;
 800216c:	2000      	movs	r0, #0
  if (bSelectMC  >= pHandle->bDriveNum)
 800216e:	428a      	cmp	r2, r1
 8002170:	d901      	bls.n	8002176 <UI_SelectMC+0xe>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002172:	7519      	strb	r1, [r3, #20]
  bool retVal = true;
 8002174:	3001      	adds	r0, #1
  }
  return retVal;
}
 8002176:	4770      	bx	lr

08002178 <UI_GetSelectedMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
 8002178:	7d00      	ldrb	r0, [r0, #20]
}
 800217a:	4770      	bx	lr

0800217c <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 800217c:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800217e:	7d03      	ldrb	r3, [r0, #20]
{
 8002180:	0014      	movs	r4, r2
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002182:	6882      	ldr	r2, [r0, #8]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	58d5      	ldr	r5, [r2, r3]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002188:	68c2      	ldr	r2, [r0, #12]
{
 800218a:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800218c:	58d3      	ldr	r3, [r2, r3]

  bool retVal = true;
  switch (bRegID)
 800218e:	295b      	cmp	r1, #91	; 0x5b
 8002190:	d803      	bhi.n	800219a <UI_SetReg+0x1e>
 8002192:	4a42      	ldr	r2, [pc, #264]	; (800229c <UI_SetReg+0x120>)
 8002194:	0089      	lsls	r1, r1, #2
 8002196:	5852      	ldr	r2, [r2, r1]
 8002198:	4697      	mov	pc, r2
 800219a:	2400      	movs	r4, #0
    retVal = false;
    break;
  }

  return retVal;
}
 800219c:	0020      	movs	r0, r4
 800219e:	b003      	add	sp, #12
 80021a0:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 80021a2:	2106      	movs	r1, #6
 80021a4:	0020      	movs	r0, r4
 80021a6:	f7fe f839 	bl	800021c <__divsi3>
 80021aa:	2200      	movs	r2, #0
 80021ac:	b201      	sxth	r1, r0
 80021ae:	0028      	movs	r0, r5
 80021b0:	f7fe fb80 	bl	80008b4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80021b4:	2401      	movs	r4, #1
    break;
 80021b6:	e7f1      	b.n	800219c <UI_SetReg+0x20>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 80021b8:	b2e1      	uxtb	r1, r4
 80021ba:	f7ff ffd5 	bl	8002168 <UI_SelectMC>
 80021be:	0004      	movs	r4, r0
    break;
 80021c0:	e7ec      	b.n	800219c <UI_SetReg+0x20>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80021c2:	b2e1      	uxtb	r1, r4
 80021c4:	2900      	cmp	r1, #0
 80021c6:	d05f      	beq.n	8002288 <UI_SetReg+0x10c>
  bool retVal = true;
 80021c8:	2401      	movs	r4, #1
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80021ca:	2901      	cmp	r1, #1
 80021cc:	d1e6      	bne.n	800219c <UI_SetReg+0x20>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80021ce:	0028      	movs	r0, r5
 80021d0:	f7fe fc04 	bl	80009dc <MCI_GetMecSpeedRefUnit>
 80021d4:	2200      	movs	r2, #0
 80021d6:	0001      	movs	r1, r0
 80021d8:	0028      	movs	r0, r5
 80021da:	f7fe fb6b 	bl	80008b4 <MCI_ExecSpeedRamp>
 80021de:	e7dd      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80021e0:	b221      	sxth	r1, r4
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	f002 fc52 	bl	8004a8c <PID_SetKP>
  bool retVal = true;
 80021e8:	2401      	movs	r4, #1
    break;
 80021ea:	e7d7      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80021ec:	b221      	sxth	r1, r4
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	f002 fc4e 	bl	8004a90 <PID_SetKI>
  bool retVal = true;
 80021f4:	2401      	movs	r4, #1
    break;
 80021f6:	e7d1      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80021f8:	b221      	sxth	r1, r4
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	f002 fc58 	bl	8004ab0 <PID_SetKD>
  bool retVal = true;
 8002200:	2401      	movs	r4, #1
    break;
 8002202:	e7cb      	b.n	800219c <UI_SetReg+0x20>
      currComp = MCI_GetIqdref(pMCI);
 8002204:	0028      	movs	r0, r5
 8002206:	f7fe fc1f 	bl	8000a48 <MCI_GetIqdref>
      currComp.q = (int16_t)wValue;
 800220a:	ab01      	add	r3, sp, #4
      currComp = MCI_GetIqdref(pMCI);
 800220c:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 800220e:	801c      	strh	r4, [r3, #0]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002210:	0028      	movs	r0, r5
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	f7fe fb5e 	bl	80008d4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002218:	2401      	movs	r4, #1
    break;
 800221a:	e7bf      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 800221c:	b221      	sxth	r1, r4
 800221e:	6858      	ldr	r0, [r3, #4]
 8002220:	f002 fc34 	bl	8004a8c <PID_SetKP>
  bool retVal = true;
 8002224:	2401      	movs	r4, #1
    break;
 8002226:	e7b9      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002228:	b221      	sxth	r1, r4
 800222a:	6858      	ldr	r0, [r3, #4]
 800222c:	f002 fc30 	bl	8004a90 <PID_SetKI>
  bool retVal = true;
 8002230:	2401      	movs	r4, #1
    break;
 8002232:	e7b3      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002234:	b221      	sxth	r1, r4
 8002236:	6858      	ldr	r0, [r3, #4]
 8002238:	f002 fc3a 	bl	8004ab0 <PID_SetKD>
  bool retVal = true;
 800223c:	2401      	movs	r4, #1
    break;
 800223e:	e7ad      	b.n	800219c <UI_SetReg+0x20>
      currComp = MCI_GetIqdref(pMCI);
 8002240:	0028      	movs	r0, r5
 8002242:	f7fe fc01 	bl	8000a48 <MCI_GetIqdref>
      currComp.d = (int16_t)wValue;
 8002246:	ab01      	add	r3, sp, #4
      currComp = MCI_GetIqdref(pMCI);
 8002248:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 800224a:	805c      	strh	r4, [r3, #2]
      MCI_SetCurrentReferences(pMCI,currComp);
 800224c:	0028      	movs	r0, r5
 800224e:	9901      	ldr	r1, [sp, #4]
 8002250:	f7fe fb40 	bl	80008d4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002254:	2401      	movs	r4, #1
    break;
 8002256:	e7a1      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002258:	b221      	sxth	r1, r4
 800225a:	6898      	ldr	r0, [r3, #8]
 800225c:	f002 fc16 	bl	8004a8c <PID_SetKP>
  bool retVal = true;
 8002260:	2401      	movs	r4, #1
    break;
 8002262:	e79b      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002264:	b221      	sxth	r1, r4
 8002266:	6898      	ldr	r0, [r3, #8]
 8002268:	f002 fc12 	bl	8004a90 <PID_SetKI>
  bool retVal = true;
 800226c:	2401      	movs	r4, #1
    break;
 800226e:	e795      	b.n	800219c <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002270:	b221      	sxth	r1, r4
 8002272:	6898      	ldr	r0, [r3, #8]
 8002274:	f002 fc1c 	bl	8004ab0 <PID_SetKD>
  bool retVal = true;
 8002278:	2401      	movs	r4, #1
    break;
 800227a:	e78f      	b.n	800219c <UI_SetReg+0x20>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 800227c:	b221      	sxth	r1, r4
 800227e:	0028      	movs	r0, r5
 8002280:	f7fe fc16 	bl	8000ab0 <MCI_SetIdref>
  bool retVal = true;
 8002284:	2401      	movs	r4, #1
    break;
 8002286:	e789      	b.n	800219c <UI_SetReg+0x20>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002288:	0028      	movs	r0, r5
 800228a:	f7fe fc0d 	bl	8000aa8 <MCI_GetTeref>
 800228e:	2200      	movs	r2, #0
 8002290:	0001      	movs	r1, r0
 8002292:	0028      	movs	r0, r5
 8002294:	f7fe fb16 	bl	80008c4 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002298:	2401      	movs	r4, #1
 800229a:	e77f      	b.n	800219c <UI_SetReg+0x20>
 800229c:	0800653c 	.word	0x0800653c

080022a0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80022a0:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80022a2:	7d03      	ldrb	r3, [r0, #20]
 80022a4:	68c4      	ldr	r4, [r0, #12]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80022a6:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	58e4      	ldr	r4, [r4, r3]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80022ac:	58ed      	ldr	r5, [r5, r3]
{
 80022ae:	b08c      	sub	sp, #48	; 0x30

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d007      	beq.n	80022c4 <UI_GetReg+0x24>
  {
    *success = true;
 80022b4:	2601      	movs	r6, #1
 80022b6:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 80022b8:	2981      	cmp	r1, #129	; 0x81
 80022ba:	d809      	bhi.n	80022d0 <UI_GetReg+0x30>
 80022bc:	4e7c      	ldr	r6, [pc, #496]	; (80024b0 <UI_GetReg+0x210>)
 80022be:	0089      	lsls	r1, r1, #2
 80022c0:	5871      	ldr	r1, [r6, r1]
 80022c2:	468f      	mov	pc, r1
 80022c4:	2973      	cmp	r1, #115	; 0x73
 80022c6:	d805      	bhi.n	80022d4 <UI_GetReg+0x34>
 80022c8:	4a7a      	ldr	r2, [pc, #488]	; (80024b4 <UI_GetReg+0x214>)
 80022ca:	0089      	lsls	r1, r1, #2
 80022cc:	5852      	ldr	r2, [r2, r1]
 80022ce:	4697      	mov	pc, r2

    default:
	{
      if ( success != (bool *) 0 )
      {
        *success = false;
 80022d0:	2300      	movs	r3, #0
 80022d2:	7013      	strb	r3, [r2, #0]
  int32_t bRetVal = 0;
 80022d4:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 80022d6:	b00c      	add	sp, #48	; 0x30
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 80022da:	0028      	movs	r0, r5
 80022dc:	f7fe fbb4 	bl	8000a48 <MCI_GetIqdref>
 80022e0:	1400      	asrs	r0, r0, #16
    break;
 80022e2:	e7f8      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = CTRBDID;
 80022e4:	4874      	ldr	r0, [pc, #464]	; (80024b8 <UI_GetReg+0x218>)
 80022e6:	e7f6      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80022e8:	0028      	movs	r0, r5
 80022ea:	f7fe fbad 	bl	8000a48 <MCI_GetIqdref>
 80022ee:	b200      	sxth	r0, r0
    break;
 80022f0:	e7f1      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetIqd(pMCI).q;
 80022f2:	0028      	movs	r0, r5
 80022f4:	f7fe fb98 	bl	8000a28 <MCI_GetIqd>
 80022f8:	b200      	sxth	r0, r0
    break;
 80022fa:	e7ec      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetIqd(pMCI).d;
 80022fc:	0028      	movs	r0, r5
 80022fe:	f7fe fb93 	bl	8000a28 <MCI_GetIqd>
 8002302:	1400      	asrs	r0, r0, #16
    break;
 8002304:	e7e7      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002306:	0028      	movs	r0, r5
 8002308:	f7fe fb68 	bl	80009dc <MCI_GetMecSpeedRefUnit>
 800230c:	0043      	lsls	r3, r0, #1
 800230e:	1818      	adds	r0, r3, r0
 8002310:	0040      	lsls	r0, r0, #1
 8002312:	e7e0      	b.n	80022d6 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002314:	6902      	ldr	r2, [r0, #16]
 8002316:	58d3      	ldr	r3, [r2, r3]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002318:	0f1a      	lsrs	r2, r3, #28
 800231a:	3a01      	subs	r2, #1
 800231c:	2a01      	cmp	r2, #1
 800231e:	d800      	bhi.n	8002322 <UI_GetReg+0x82>
 8002320:	e0b6      	b.n	8002490 <UI_GetReg+0x1f0>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	0f1b      	lsrs	r3, r3, #28
 8002326:	3b01      	subs	r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d8d3      	bhi.n	80022d4 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 800232c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800232e:	2800      	cmp	r0, #0
 8002330:	d0d0      	beq.n	80022d4 <UI_GetReg+0x34>
        bRetVal = SPD_GetElAngle(pSPD);
 8002332:	f003 f9bf 	bl	80056b4 <SPD_GetElAngle>
 8002336:	e7ce      	b.n	80022d6 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002338:	6902      	ldr	r2, [r0, #16]
 800233a:	58d3      	ldr	r3, [r2, r3]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800233c:	0f1a      	lsrs	r2, r3, #28
 800233e:	3a01      	subs	r2, #1
 8002340:	2a01      	cmp	r2, #1
 8002342:	d800      	bhi.n	8002346 <UI_GetReg+0xa6>
 8002344:	e0ac      	b.n	80024a0 <UI_GetReg+0x200>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	0f1b      	lsrs	r3, r3, #28
 800234a:	3b01      	subs	r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d8c1      	bhi.n	80022d4 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 8002350:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002352:	2800      	cmp	r0, #0
 8002354:	d0be      	beq.n	80022d4 <UI_GetReg+0x34>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002356:	f003 f9e9 	bl	800572c <SPD_GetS16Speed>
 800235a:	e7bc      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800235c:	0028      	movs	r0, r5
 800235e:	f7fe fb93 	bl	8000a88 <MCI_GetValphabeta>
 8002362:	1400      	asrs	r0, r0, #16
    break;
 8002364:	e7b7      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetIab(pMCI).a;
 8002366:	0028      	movs	r0, r5
 8002368:	f7fe fb3e 	bl	80009e8 <MCI_GetIab>
 800236c:	b200      	sxth	r0, r0
    break;
 800236e:	e7b2      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002370:	6820      	ldr	r0, [r4, #0]
 8002372:	f002 fb99 	bl	8004aa8 <PID_GetKPDivisor>
    break;
 8002376:	e7ae      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002378:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800237a:	f001 fe99 	bl	80040b0 <VBS_GetAvBusVoltage_V>
    break;
 800237e:	e7aa      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002380:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002382:	f002 fb67 	bl	8004a54 <NTC_GetAvTemp_C>
    break;
 8002386:	e7a6      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002388:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800238a:	f002 fb19 	bl	80049c0 <MPM_GetAvrgElMotorPowerW>
    break;
 800238e:	e7a2      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002390:	0028      	movs	r0, r5
 8002392:	f7fe fb1b 	bl	80009cc <MCI_GetAvrgMecSpeedUnit>
 8002396:	0043      	lsls	r3, r0, #1
 8002398:	1818      	adds	r0, r3, r0
 800239a:	0040      	lsls	r0, r0, #1
    break;
 800239c:	e79b      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetIab(pMCI).b;
 800239e:	0028      	movs	r0, r5
 80023a0:	f7fe fb22 	bl	80009e8 <MCI_GetIab>
 80023a4:	1400      	asrs	r0, r0, #16
    break;
 80023a6:	e796      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80023a8:	0028      	movs	r0, r5
 80023aa:	f7fe fb2d 	bl	8000a08 <MCI_GetIalphabeta>
 80023ae:	b200      	sxth	r0, r0
    break;
 80023b0:	e791      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80023b2:	0028      	movs	r0, r5
 80023b4:	f7fe fb28 	bl	8000a08 <MCI_GetIalphabeta>
 80023b8:	1400      	asrs	r0, r0, #16
    break;
 80023ba:	e78c      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetVqd(pMCI).q;
 80023bc:	0028      	movs	r0, r5
 80023be:	f7fe fb53 	bl	8000a68 <MCI_GetVqd>
 80023c2:	b200      	sxth	r0, r0
    break;
 80023c4:	e787      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80023c6:	6860      	ldr	r0, [r4, #4]
 80023c8:	f002 fb68 	bl	8004a9c <PID_GetKI>
    break;
 80023cc:	e783      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80023ce:	6860      	ldr	r0, [r4, #4]
 80023d0:	f002 fb70 	bl	8004ab4 <PID_GetKD>
    break;
 80023d4:	e77f      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80023d6:	6860      	ldr	r0, [r4, #4]
 80023d8:	f002 fb5c 	bl	8004a94 <PID_GetKP>
    break;
 80023dc:	e77b      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80023de:	6820      	ldr	r0, [r4, #0]
 80023e0:	f002 fb64 	bl	8004aac <PID_GetKIDivisor>
    break;
 80023e4:	e777      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80023e6:	68a0      	ldr	r0, [r4, #8]
 80023e8:	f002 fb58 	bl	8004a9c <PID_GetKI>
    break;
 80023ec:	e773      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80023ee:	68a0      	ldr	r0, [r4, #8]
 80023f0:	f002 fb60 	bl	8004ab4 <PID_GetKD>
    break;
 80023f4:	e76f      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetVqd(pMCI).d;
 80023f6:	0028      	movs	r0, r5
 80023f8:	f7fe fb36 	bl	8000a68 <MCI_GetVqd>
 80023fc:	1400      	asrs	r0, r0, #16
    break;
 80023fe:	e76a      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002400:	0028      	movs	r0, r5
 8002402:	f7fe fb41 	bl	8000a88 <MCI_GetValphabeta>
 8002406:	b200      	sxth	r0, r0
    break;
 8002408:	e765      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 800240a:	f7ff feb5 	bl	8002178 <UI_GetSelectedMC>
    break;
 800240e:	e762      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002410:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002412:	f003 fb05 	bl	8005a20 <STM_GetFaultState>
	break;
 8002416:	e75e      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002418:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800241a:	f003 faf5 	bl	8005a08 <STM_GetState>
	break;
 800241e:	e75a      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002420:	0028      	movs	r0, r5
 8002422:	f7fe fac3 	bl	80009ac <MCI_GetControlMode>
    break;
 8002426:	e756      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002428:	6820      	ldr	r0, [r4, #0]
 800242a:	f002 fb37 	bl	8004a9c <PID_GetKI>
    break;
 800242e:	e752      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002430:	6820      	ldr	r0, [r4, #0]
 8002432:	f002 fb3f 	bl	8004ab4 <PID_GetKD>
    break;
 8002436:	e74e      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	f002 fb2b 	bl	8004a94 <PID_GetKP>
    break;
 800243e:	e74a      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002440:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002442:	f003 fa37 	bl	80058b4 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002446:	0043      	lsls	r3, r0, #1
 8002448:	1818      	adds	r0, r3, r0
 800244a:	0040      	lsls	r0, r0, #1
    break;
 800244c:	e743      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800244e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002450:	f003 fa32 	bl	80058b8 <STC_GetMinAppNegativeMecSpeedUnit>
 8002454:	0043      	lsls	r3, r0, #1
 8002456:	1818      	adds	r0, r3, r0
 8002458:	0040      	lsls	r0, r0, #1
    break;
 800245a:	e73c      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)(MC_UID);
 800245c:	4817      	ldr	r0, [pc, #92]	; (80024bc <UI_GetReg+0x21c>)
 800245e:	e73a      	b.n	80022d6 <UI_GetReg+0x36>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002460:	0028      	movs	r0, r5
 8002462:	f7fe faa3 	bl	80009ac <MCI_GetControlMode>
 8002466:	2801      	cmp	r0, #1
 8002468:	d000      	beq.n	800246c <UI_GetReg+0x1cc>
 800246a:	e74c      	b.n	8002306 <UI_GetReg+0x66>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800246c:	0028      	movs	r0, r5
 800246e:	f7fe fa9f 	bl	80009b0 <MCI_GetLastRampFinalSpeed>
 8002472:	0043      	lsls	r3, r0, #1
 8002474:	1818      	adds	r0, r3, r0
 8002476:	0040      	lsls	r0, r0, #1
 8002478:	e72d      	b.n	80022d6 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800247a:	68a0      	ldr	r0, [r4, #8]
 800247c:	f002 fb0a 	bl	8004a94 <PID_GetKP>
    break;
 8002480:	e729      	b.n	80022d6 <UI_GetReg+0x36>
      if (pMCT->pRevupCtrl)
 8002482:	6960      	ldr	r0, [r4, #20]
 8002484:	2800      	cmp	r0, #0
 8002486:	d100      	bne.n	800248a <UI_GetReg+0x1ea>
 8002488:	e724      	b.n	80022d4 <UI_GetReg+0x34>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 800248a:	f003 fc25 	bl	8005cd8 <RUC_GetNumberOfPhases>
 800248e:	e722      	b.n	80022d6 <UI_GetReg+0x36>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	0f1b      	lsrs	r3, r3, #28
 8002494:	3b01      	subs	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002496:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002498:	2b01      	cmp	r3, #1
 800249a:	d900      	bls.n	800249e <UI_GetReg+0x1fe>
 800249c:	e747      	b.n	800232e <UI_GetReg+0x8e>
 800249e:	e745      	b.n	800232c <UI_GetReg+0x8c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	0f1b      	lsrs	r3, r3, #28
 80024a4:	3b01      	subs	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80024a6:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d900      	bls.n	80024ae <UI_GetReg+0x20e>
 80024ac:	e751      	b.n	8002352 <UI_GetReg+0xb2>
 80024ae:	e74f      	b.n	8002350 <UI_GetReg+0xb0>
 80024b0:	080066ac 	.word	0x080066ac
 80024b4:	080068b4 	.word	0x080068b4
 80024b8:	0000271a 	.word	0x0000271a
 80024bc:	34a6847a 	.word	0x34a6847a

080024c0 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80024c0:	b570      	push	{r4, r5, r6, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80024c2:	7d03      	ldrb	r3, [r0, #20]
 80024c4:	6882      	ldr	r2, [r0, #8]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	589d      	ldr	r5, [r3, r2]

  switch (bCmdID)
 80024ca:	290e      	cmp	r1, #14
 80024cc:	d803      	bhi.n	80024d6 <UI_ExecCmd+0x16>
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <UI_ExecCmd+0x70>)
 80024d0:	0089      	lsls	r1, r1, #2
 80024d2:	585b      	ldr	r3, [r3, r1]
 80024d4:	469f      	mov	pc, r3
 80024d6:	2400      	movs	r4, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80024d8:	0020      	movs	r0, r4
 80024da:	bd70      	pop	{r4, r5, r6, pc}
  bool retVal = true;
 80024dc:	2401      	movs	r4, #1
 80024de:	e7fb      	b.n	80024d8 <UI_ExecCmd+0x18>
      if (MCI_GetSTMState(pMCI) == IDLE)
 80024e0:	0028      	movs	r0, r5
 80024e2:	f7fe fa5d 	bl	80009a0 <MCI_GetSTMState>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d004      	beq.n	80024f4 <UI_ExecCmd+0x34>
        MCI_StopMotor(pMCI);
 80024ea:	0028      	movs	r0, r5
 80024ec:	f7fe fa08 	bl	8000900 <MCI_StopMotor>
  bool retVal = true;
 80024f0:	2401      	movs	r4, #1
 80024f2:	e7f1      	b.n	80024d8 <UI_ExecCmd+0x18>
        MCI_StartMotor(pMCI);
 80024f4:	0028      	movs	r0, r5
 80024f6:	f7fe f9f7 	bl	80008e8 <MCI_StartMotor>
  bool retVal = true;
 80024fa:	2401      	movs	r4, #1
 80024fc:	e7ec      	b.n	80024d8 <UI_ExecCmd+0x18>
      MCI_FaultAcknowledged(pMCI);
 80024fe:	0028      	movs	r0, r5
 8002500:	f7fe fa04 	bl	800090c <MCI_FaultAcknowledged>
  bool retVal = true;
 8002504:	2401      	movs	r4, #1
    break;
 8002506:	e7e7      	b.n	80024d8 <UI_ExecCmd+0x18>
      MCI_EncoderAlign(pMCI);
 8002508:	0028      	movs	r0, r5
 800250a:	f7fe fa05 	bl	8000918 <MCI_EncoderAlign>
  bool retVal = true;
 800250e:	2401      	movs	r4, #1
    break;
 8002510:	e7e2      	b.n	80024d8 <UI_ExecCmd+0x18>
      MCI_Clear_Iqdref(pMCI);
 8002512:	0028      	movs	r0, r5
 8002514:	f7fe fad0 	bl	8000ab8 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002518:	2401      	movs	r4, #1
    break;
 800251a:	e7dd      	b.n	80024d8 <UI_ExecCmd+0x18>
      if (MCI_GetSTMState(pMCI) == RUN)
 800251c:	0028      	movs	r0, r5
 800251e:	f7fe fa3f 	bl	80009a0 <MCI_GetSTMState>
  bool retVal = true;
 8002522:	2401      	movs	r4, #1
      if (MCI_GetSTMState(pMCI) == RUN)
 8002524:	2806      	cmp	r0, #6
 8002526:	d1d7      	bne.n	80024d8 <UI_ExecCmd+0x18>
        MCI_StopRamp(pMCI);
 8002528:	0028      	movs	r0, r5
 800252a:	f7fe fa49 	bl	80009c0 <MCI_StopRamp>
 800252e:	e7d3      	b.n	80024d8 <UI_ExecCmd+0x18>
 8002530:	08006a84 	.word	0x08006a84

08002534 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	0004      	movs	r4, r0
 8002538:	0008      	movs	r0, r1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800253a:	2106      	movs	r1, #6
{
 800253c:	0015      	movs	r5, r2
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800253e:	f7fd fe6d 	bl	800021c <__divsi3>
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002542:	7d23      	ldrb	r3, [r4, #20]
 8002544:	68a2      	ldr	r2, [r4, #8]
 8002546:	009b      	lsls	r3, r3, #2
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002548:	b201      	sxth	r1, r0
 800254a:	5898      	ldr	r0, [r3, r2]
 800254c:	002a      	movs	r2, r5
 800254e:	f7fe f9b1 	bl	80008b4 <MCI_ExecSpeedRamp>
  return true;
}
 8002552:	2001      	movs	r0, #1
 8002554:	bd70      	pop	{r4, r5, r6, pc}
 8002556:	46c0      	nop			; (mov r8, r8)

08002558 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002558:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800255a:	7d03      	ldrb	r3, [r0, #20]
 800255c:	6880      	ldr	r0, [r0, #8]
 800255e:	009b      	lsls	r3, r3, #2

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002560:	5818      	ldr	r0, [r3, r0]
 8002562:	f7fe f9af 	bl	80008c4 <MCI_ExecTorqueRamp>
  return true;
}
 8002566:	2001      	movs	r0, #1
 8002568:	bd10      	pop	{r4, pc}
 800256a:	46c0      	nop			; (mov r8, r8)

0800256c <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	000c      	movs	r4, r1
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002570:	7d01      	ldrb	r1, [r0, #20]
{
 8002572:	001e      	movs	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002574:	68c3      	ldr	r3, [r0, #12]
 8002576:	0089      	lsls	r1, r1, #2
 8002578:	58cb      	ldr	r3, [r1, r3]
{
 800257a:	0017      	movs	r7, r2
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800257c:	695d      	ldr	r5, [r3, #20]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
  }
  else
  {
    hRetVal = false;
 800257e:	2000      	movs	r0, #0
  if (pRevupCtrl)
 8002580:	2d00      	cmp	r5, #0
 8002582:	d010      	beq.n	80025a6 <UI_GetRevupData+0x3a>
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002584:	0021      	movs	r1, r4
 8002586:	0028      	movs	r0, r5
 8002588:	f003 fb90 	bl	8005cac <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800258c:	0021      	movs	r1, r4
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800258e:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002590:	0028      	movs	r0, r5
 8002592:	f003 fb91 	bl	8005cb8 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002596:	0021      	movs	r1, r4
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002598:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800259a:	0028      	movs	r0, r5
 800259c:	f003 fb94 	bl	8005cc8 <RUC_GetPhaseFinalTorque>
 80025a0:	9b06      	ldr	r3, [sp, #24]
 80025a2:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80025a4:	2001      	movs	r0, #1
  }
  return hRetVal;
}
 80025a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025a8 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	000c      	movs	r4, r1
 80025ac:	001e      	movs	r6, r3
 80025ae:	ab06      	add	r3, sp, #24
 80025b0:	2700      	movs	r7, #0
 80025b2:	5fdf      	ldrsh	r7, [r3, r7]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80025b4:	7d03      	ldrb	r3, [r0, #20]
 80025b6:	68c1      	ldr	r1, [r0, #12]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	585b      	ldr	r3, [r3, r1]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80025bc:	0021      	movs	r1, r4
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80025be:	695d      	ldr	r5, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80025c0:	0028      	movs	r0, r5
 80025c2:	f003 fb61 	bl	8005c88 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80025c6:	0032      	movs	r2, r6
 80025c8:	0028      	movs	r0, r5
 80025ca:	0021      	movs	r1, r4
 80025cc:	f003 fb62 	bl	8005c94 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80025d0:	0028      	movs	r0, r5
 80025d2:	003a      	movs	r2, r7
 80025d4:	0021      	movs	r1, r4
 80025d6:	f003 fb63 	bl	8005ca0 <RUC_SetPhaseFinalTorque>
  return true;
}
 80025da:	2001      	movs	r0, #1
 80025dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)

080025e0 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80025e0:	b500      	push	{lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025e2:	7d03      	ldrb	r3, [r0, #20]
 80025e4:	6880      	ldr	r0, [r0, #8]
{
 80025e6:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	5818      	ldr	r0, [r3, r0]
  qd_t currComp;
  currComp.q = hIqRef;
 80025ec:	ab01      	add	r3, sp, #4
 80025ee:	8019      	strh	r1, [r3, #0]
  currComp.d = hIdRef;
 80025f0:	805a      	strh	r2, [r3, #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 80025f2:	9901      	ldr	r1, [sp, #4]
 80025f4:	f7fe f96e 	bl	80008d4 <MCI_SetCurrentReferences>
}
 80025f8:	b003      	add	sp, #12
 80025fa:	bd00      	pop	{pc}

080025fc <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80025fc:	2000      	movs	r0, #0
 80025fe:	4770      	bx	lr

08002600 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002600:	4770      	bx	lr
 8002602:	46c0      	nop			; (mov r8, r8)

08002604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b510      	push	{r4, lr}
 8002606:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002608:	20fa      	movs	r0, #250	; 0xfa
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_InitTick+0x40>)
 800260c:	0080      	lsls	r0, r0, #2
 800260e:	7819      	ldrb	r1, [r3, #0]
 8002610:	f7fd fd7a 	bl	8000108 <__udivsi3>
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_InitTick+0x44>)
 8002616:	0001      	movs	r1, r0
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f7fd fd75 	bl	8000108 <__udivsi3>
 800261e:	f000 f9b3 	bl	8002988 <HAL_SYSTICK_Config>
 8002622:	2800      	cmp	r0, #0
 8002624:	d10c      	bne.n	8002640 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8002626:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002628:	2c03      	cmp	r4, #3
 800262a:	d900      	bls.n	800262e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800262c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262e:	3802      	subs	r0, #2
 8002630:	2200      	movs	r2, #0
 8002632:	0021      	movs	r1, r4
 8002634:	f000 f96a 	bl	800290c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_InitTick+0x48>)
 800263a:	2000      	movs	r0, #0
 800263c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800263e:	e7f5      	b.n	800262c <HAL_InitTick+0x28>
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
 8002642:	e7f3      	b.n	800262c <HAL_InitTick+0x28>
 8002644:	200005b4 	.word	0x200005b4
 8002648:	200005b0 	.word	0x200005b0
 800264c:	200005b8 	.word	0x200005b8

08002650 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002650:	2110      	movs	r1, #16
 8002652:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_Init+0x1c>)
{
 8002654:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002656:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002658:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265a:	430b      	orrs	r3, r1
 800265c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	f7ff ffd1 	bl	8002604 <HAL_InitTick>
  HAL_MspInit();
 8002662:	f7ff fac9 	bl	8001bf8 <HAL_MspInit>
}
 8002666:	2000      	movs	r0, #0
 8002668:	bd10      	pop	{r4, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	40022000 	.word	0x40022000

08002670 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <HAL_IncTick+0x10>)
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <HAL_IncTick+0x14>)
 8002674:	6811      	ldr	r1, [r2, #0]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	185b      	adds	r3, r3, r1
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	4770      	bx	lr
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	20000988 	.word	0x20000988
 8002684:	200005b4 	.word	0x200005b4

08002688 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002688:	4b01      	ldr	r3, [pc, #4]	; (8002690 <HAL_GetTick+0x8>)
 800268a:	6818      	ldr	r0, [r3, #0]
}
 800268c:	4770      	bx	lr
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	20000988 	.word	0x20000988

08002694 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8002698:	d100      	bne.n	800269c <HAL_ADC_Init+0x8>
 800269a:	e085      	b.n	80027a8 <HAL_ADC_Init+0x114>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800269c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d100      	bne.n	80026a4 <HAL_ADC_Init+0x10>
 80026a2:	e06b      	b.n	800277c <HAL_ADC_Init+0xe8>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026a6:	06db      	lsls	r3, r3, #27
 80026a8:	d462      	bmi.n	8002770 <HAL_ADC_Init+0xdc>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026aa:	2104      	movs	r1, #4
 80026ac:	000e      	movs	r6, r1
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	4016      	ands	r6, r2
      (tmp_hal_status == HAL_OK)                                &&
 80026b4:	4211      	tst	r1, r2
 80026b6:	d15b      	bne.n	8002770 <HAL_ADC_Init+0xdc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026ba:	4948      	ldr	r1, [pc, #288]	; (80027dc <HAL_ADC_Init+0x148>)
 80026bc:	400a      	ands	r2, r1
 80026be:	3106      	adds	r1, #6
 80026c0:	31ff      	adds	r1, #255	; 0xff
 80026c2:	430a      	orrs	r2, r1
 80026c4:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80026c6:	2203      	movs	r2, #3
 80026c8:	6899      	ldr	r1, [r3, #8]
 80026ca:	400a      	ands	r2, r1
 80026cc:	2a01      	cmp	r2, #1
 80026ce:	d05b      	beq.n	8002788 <HAL_ADC_Init+0xf4>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80026d0:	2118      	movs	r1, #24
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	438a      	bics	r2, r1
 80026d6:	68a1      	ldr	r1, [r4, #8]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	6861      	ldr	r1, [r4, #4]
 80026e0:	0092      	lsls	r2, r2, #2
 80026e2:	0892      	lsrs	r2, r2, #2
 80026e4:	430a      	orrs	r2, r1
 80026e6:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	493d      	ldr	r1, [pc, #244]	; (80027e0 <HAL_ADC_Init+0x14c>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f0:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80026f2:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f4:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80026f6:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f8:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80026fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026fc:	7ea7      	ldrb	r7, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80026fe:	3a01      	subs	r2, #1
 8002700:	1e55      	subs	r5, r2, #1
 8002702:	41aa      	sbcs	r2, r5
 8002704:	0315      	lsls	r5, r2, #12
 8002706:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002708:	0378      	lsls	r0, r7, #13
 800270a:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800270c:	6922      	ldr	r2, [r4, #16]
 800270e:	4301      	orrs	r1, r0
 8002710:	2a02      	cmp	r2, #2
 8002712:	d100      	bne.n	8002716 <HAL_ADC_Init+0x82>
 8002714:	2604      	movs	r6, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	5ca2      	ldrb	r2, [r4, r2]
 800271a:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800271c:	430a      	orrs	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800271e:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002720:	432a      	orrs	r2, r5
 8002722:	4332      	orrs	r2, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002724:	2901      	cmp	r1, #1
 8002726:	d04b      	beq.n	80027c0 <HAL_ADC_Init+0x12c>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002728:	20c2      	movs	r0, #194	; 0xc2
 800272a:	69e1      	ldr	r1, [r4, #28]
 800272c:	30ff      	adds	r0, #255	; 0xff
 800272e:	4281      	cmp	r1, r0
 8002730:	d002      	beq.n	8002738 <HAL_ADC_Init+0xa4>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002732:	6a20      	ldr	r0, [r4, #32]
 8002734:	4301      	orrs	r1, r0
 8002736:	430a      	orrs	r2, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002738:	68d9      	ldr	r1, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800273a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800273c:	4311      	orrs	r1, r2
 800273e:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	0549      	lsls	r1, r1, #21
 8002744:	428d      	cmp	r5, r1
 8002746:	d026      	beq.n	8002796 <HAL_ADC_Init+0x102>
 8002748:	1e69      	subs	r1, r5, #1
 800274a:	2906      	cmp	r1, #6
 800274c:	d923      	bls.n	8002796 <HAL_ADC_Init+0x102>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4924      	ldr	r1, [pc, #144]	; (80027e4 <HAL_ADC_Init+0x150>)
 8002752:	400b      	ands	r3, r1
 8002754:	4293      	cmp	r3, r2
 8002756:	d029      	beq.n	80027ac <HAL_ADC_Init+0x118>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002758:	2212      	movs	r2, #18
 800275a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 800275c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800275e:	4393      	bics	r3, r2
 8002760:	3a02      	subs	r2, #2
 8002762:	4313      	orrs	r3, r2
 8002764:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002768:	3a0f      	subs	r2, #15
 800276a:	4313      	orrs	r3, r2
 800276c:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 800276e:	e004      	b.n	800277a <HAL_ADC_Init+0xe6>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002770:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 8002772:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002776:	4313      	orrs	r3, r2
 8002778:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 800277c:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 800277e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8002780:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002782:	f7ff fa51 	bl	8001c28 <HAL_ADC_MspInit>
 8002786:	e78d      	b.n	80026a4 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	420a      	tst	r2, r1
 800278c:	d1ac      	bne.n	80026e8 <HAL_ADC_Init+0x54>
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	0412      	lsls	r2, r2, #16
 8002792:	d4a9      	bmi.n	80026e8 <HAL_ADC_Init+0x54>
 8002794:	e79c      	b.n	80026d0 <HAL_ADC_Init+0x3c>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002796:	2107      	movs	r1, #7
 8002798:	6958      	ldr	r0, [r3, #20]
 800279a:	4388      	bics	r0, r1
 800279c:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800279e:	6958      	ldr	r0, [r3, #20]
 80027a0:	4029      	ands	r1, r5
 80027a2:	4301      	orrs	r1, r0
 80027a4:	6159      	str	r1, [r3, #20]
 80027a6:	e7d2      	b.n	800274e <HAL_ADC_Init+0xba>
    return HAL_ERROR;
 80027a8:	2001      	movs	r0, #1
 80027aa:	e7e6      	b.n	800277a <HAL_ADC_Init+0xe6>
      ADC_CLEAR_ERRORCODE(hadc);
 80027ac:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80027ae:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80027b0:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80027b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b4:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80027b6:	4393      	bics	r3, r2
 80027b8:	3a02      	subs	r2, #2
 80027ba:	4313      	orrs	r3, r2
 80027bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80027be:	e7dc      	b.n	800277a <HAL_ADC_Init+0xe6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d103      	bne.n	80027cc <HAL_ADC_Init+0x138>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0249      	lsls	r1, r1, #9
 80027c8:	430a      	orrs	r2, r1
 80027ca:	e7ad      	b.n	8002728 <HAL_ADC_Init+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027cc:	2520      	movs	r5, #32
 80027ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027d0:	4328      	orrs	r0, r5
 80027d2:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027d6:	4301      	orrs	r1, r0
 80027d8:	63e1      	str	r1, [r4, #60]	; 0x3c
 80027da:	e7a5      	b.n	8002728 <HAL_ADC_Init+0x94>
 80027dc:	fffffefd 	.word	0xfffffefd
 80027e0:	fffe0219 	.word	0xfffe0219
 80027e4:	833fffe7 	.word	0x833fffe7

080027e8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80027e8:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ea:	2234      	movs	r2, #52	; 0x34
{
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80027f0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80027f2:	5c83      	ldrb	r3, [r0, r2]
{
 80027f4:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027f6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d05f      	beq.n	80028bc <HAL_ADC_ConfigChannel+0xd4>
 80027fc:	2301      	movs	r3, #1
 80027fe:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002800:	6802      	ldr	r2, [r0, #0]
 8002802:	6890      	ldr	r0, [r2, #8]
 8002804:	0740      	lsls	r0, r0, #29
 8002806:	d509      	bpl.n	800281c <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 800280a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800280e:	4313      	orrs	r3, r2
 8002810:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002812:	2334      	movs	r3, #52	; 0x34
 8002814:	2200      	movs	r2, #0
 8002816:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002818:	b002      	add	sp, #8
 800281a:	bd70      	pop	{r4, r5, r6, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 800281c:	4835      	ldr	r0, [pc, #212]	; (80028f4 <HAL_ADC_ConfigChannel+0x10c>)
 800281e:	684e      	ldr	r6, [r1, #4]
 8002820:	4286      	cmp	r6, r0
 8002822:	d02f      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002824:	6808      	ldr	r0, [r1, #0]
 8002826:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8002828:	4083      	lsls	r3, r0
 800282a:	4333      	orrs	r3, r6
 800282c:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	055b      	lsls	r3, r3, #21
 8002832:	429d      	cmp	r5, r3
 8002834:	d00f      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x6e>
 8002836:	3d01      	subs	r5, #1
 8002838:	2d06      	cmp	r5, #6
 800283a:	d90c      	bls.n	8002856 <HAL_ADC_ConfigChannel+0x6e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800283c:	2307      	movs	r3, #7
 800283e:	688d      	ldr	r5, [r1, #8]
 8002840:	6951      	ldr	r1, [r2, #20]
 8002842:	4019      	ands	r1, r3
 8002844:	428d      	cmp	r5, r1
 8002846:	d006      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x6e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002848:	6951      	ldr	r1, [r2, #20]
 800284a:	4399      	bics	r1, r3
 800284c:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800284e:	6951      	ldr	r1, [r2, #20]
 8002850:	402b      	ands	r3, r5
 8002852:	430b      	orrs	r3, r1
 8002854:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002856:	0003      	movs	r3, r0
 8002858:	3b10      	subs	r3, #16
 800285a:	2b02      	cmp	r3, #2
 800285c:	d810      	bhi.n	8002880 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800285e:	4a26      	ldr	r2, [pc, #152]	; (80028f8 <HAL_ADC_ConfigChannel+0x110>)
 8002860:	6813      	ldr	r3, [r2, #0]
 8002862:	2810      	cmp	r0, #16
 8002864:	d02e      	beq.n	80028c4 <HAL_ADC_ConfigChannel+0xdc>
 8002866:	3811      	subs	r0, #17
 8002868:	1e41      	subs	r1, r0, #1
 800286a:	4188      	sbcs	r0, r1
 800286c:	21c0      	movs	r1, #192	; 0xc0
 800286e:	4240      	negs	r0, r0
 8002870:	0409      	lsls	r1, r1, #16
 8002872:	4008      	ands	r0, r1
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	03c9      	lsls	r1, r1, #15
 8002878:	468c      	mov	ip, r1
 800287a:	4460      	add	r0, ip
 800287c:	4318      	orrs	r0, r3
 800287e:	6010      	str	r0, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002880:	2000      	movs	r0, #0
 8002882:	e7c6      	b.n	8002812 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002884:	6809      	ldr	r1, [r1, #0]
 8002886:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002888:	408b      	lsls	r3, r1
 800288a:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800288c:	000b      	movs	r3, r1
 800288e:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002890:	6290      	str	r0, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002892:	2b02      	cmp	r3, #2
 8002894:	d8f4      	bhi.n	8002880 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_ADC_ConfigChannel+0x110>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2910      	cmp	r1, #16
 800289c:	d010      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd8>
 800289e:	3911      	subs	r1, #17
 80028a0:	424b      	negs	r3, r1
 80028a2:	414b      	adcs	r3, r1
 80028a4:	4259      	negs	r1, r3
 80028a6:	23c0      	movs	r3, #192	; 0xc0
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	4019      	ands	r1, r3
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_ADC_ConfigChannel+0x114>)
 80028ae:	469c      	mov	ip, r3
 80028b0:	4461      	add	r1, ip
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_ADC_ConfigChannel+0x110>)
 80028b4:	4011      	ands	r1, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b6:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80028b8:	6019      	str	r1, [r3, #0]
 80028ba:	e7aa      	b.n	8002812 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 80028bc:	2002      	movs	r0, #2
 80028be:	e7ab      	b.n	8002818 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80028c0:	490f      	ldr	r1, [pc, #60]	; (8002900 <HAL_ADC_ConfigChannel+0x118>)
 80028c2:	e7f6      	b.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	0409      	lsls	r1, r1, #16
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_ADC_ConfigChannel+0x11c>)
 80028ce:	490e      	ldr	r1, [pc, #56]	; (8002908 <HAL_ADC_ConfigChannel+0x120>)
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f7fd fc19 	bl	8000108 <__udivsi3>
 80028d6:	0083      	lsls	r3, r0, #2
 80028d8:	181b      	adds	r3, r3, r0
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80028de:	9b01      	ldr	r3, [sp, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0cd      	beq.n	8002880 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80028ea:	9b01      	ldr	r3, [sp, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f0:	2000      	movs	r0, #0
 80028f2:	e78e      	b.n	8002812 <HAL_ADC_ConfigChannel+0x2a>
 80028f4:	00001001 	.word	0x00001001
 80028f8:	40012708 	.word	0x40012708
 80028fc:	feffffff 	.word	0xfeffffff
 8002900:	ff7fffff 	.word	0xff7fffff
 8002904:	200005b0 	.word	0x200005b0
 8002908:	000f4240 	.word	0x000f4240

0800290c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800290e:	2800      	cmp	r0, #0
 8002910:	db14      	blt.n	800293c <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_NVIC_SetPriority+0x5c>)
 8002914:	2203      	movs	r2, #3
 8002916:	469c      	mov	ip, r3
 8002918:	23ff      	movs	r3, #255	; 0xff
 800291a:	0884      	lsrs	r4, r0, #2
 800291c:	4010      	ands	r0, r2
 800291e:	001a      	movs	r2, r3
 8002920:	26c0      	movs	r6, #192	; 0xc0
 8002922:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002924:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002926:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002928:	400b      	ands	r3, r1
 800292a:	4083      	lsls	r3, r0
 800292c:	00a4      	lsls	r4, r4, #2
 800292e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002930:	00b6      	lsls	r6, r6, #2
 8002932:	59a5      	ldr	r5, [r4, r6]
 8002934:	4395      	bics	r5, r2
 8002936:	432b      	orrs	r3, r5
 8002938:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800293a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <HAL_NVIC_SetPriority+0x60>)
 800293e:	230f      	movs	r3, #15
 8002940:	4694      	mov	ip, r2
 8002942:	2203      	movs	r2, #3
 8002944:	4003      	ands	r3, r0
 8002946:	4010      	ands	r0, r2
 8002948:	32fc      	adds	r2, #252	; 0xfc
 800294a:	0015      	movs	r5, r2
 800294c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800294e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002950:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002952:	400a      	ands	r2, r1
 8002954:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002956:	3b08      	subs	r3, #8
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4463      	add	r3, ip
 800295e:	69dc      	ldr	r4, [r3, #28]
 8002960:	43ac      	bics	r4, r5
 8002962:	4322      	orrs	r2, r4
 8002964:	61da      	str	r2, [r3, #28]
 8002966:	e7e8      	b.n	800293a <HAL_NVIC_SetPriority+0x2e>
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002970:	2800      	cmp	r0, #0
 8002972:	db05      	blt.n	8002980 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002974:	231f      	movs	r3, #31
 8002976:	4018      	ands	r0, r3
 8002978:	3b1e      	subs	r3, #30
 800297a:	4083      	lsls	r3, r0
 800297c:	4a01      	ldr	r2, [pc, #4]	; (8002984 <HAL_NVIC_EnableIRQ+0x14>)
 800297e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002980:	4770      	bx	lr
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	e000e100 	.word	0xe000e100

08002988 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	1e43      	subs	r3, r0, #1
 800298c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	4293      	cmp	r3, r2
 8002992:	d20e      	bcs.n	80029b2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002994:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002998:	4807      	ldr	r0, [pc, #28]	; (80029b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800299c:	6a03      	ldr	r3, [r0, #32]
 800299e:	0609      	lsls	r1, r1, #24
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a8:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029aa:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ac:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ae:	3307      	adds	r3, #7
 80029b0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80029b2:	4770      	bx	lr
 80029b4:	e000e010 	.word	0xe000e010
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80029bc:	4770      	bx	lr
 80029be:	46c0      	nop			; (mov r8, r8)

080029c0 <HAL_SYSTICK_IRQHandler>:
{
 80029c0:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80029c2:	f7ff fffb 	bl	80029bc <HAL_SYSTICK_Callback>
}
 80029c6:	bd10      	pop	{r4, pc}

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029cc:	d027      	beq.n	8002a1e <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029ce:	2521      	movs	r5, #33	; 0x21
 80029d0:	2302      	movs	r3, #2
 80029d2:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029d4:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80029d8:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029da:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029dc:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80029de:	6863      	ldr	r3, [r4, #4]
 80029e0:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	68e1      	ldr	r1, [r4, #12]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6921      	ldr	r1, [r4, #16]
 80029e8:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ea:	6961      	ldr	r1, [r4, #20]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	69a1      	ldr	r1, [r4, #24]
 80029f0:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f2:	69e1      	ldr	r1, [r4, #28]
 80029f4:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80029f6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80029f8:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_DMA_Init+0x60>)
 80029fc:	2114      	movs	r1, #20
 80029fe:	469c      	mov	ip, r3
 8002a00:	4460      	add	r0, ip
 8002a02:	f7fd fb81 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8002a08:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8002a0a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0c:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a0e:	0080      	lsls	r0, r0, #2
 8002a10:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002a12:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a14:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002a16:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8002a18:	321f      	adds	r2, #31
 8002a1a:	54a3      	strb	r3, [r4, r2]
}  
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
 8002a20:	e7fc      	b.n	8002a1c <HAL_DMA_Init+0x54>
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	ffffc00f 	.word	0xffffc00f
 8002a28:	bffdfff8 	.word	0xbffdfff8
 8002a2c:	40020000 	.word	0x40020000

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a32:	46de      	mov	lr, fp
 8002a34:	4657      	mov	r7, sl
 8002a36:	464e      	mov	r6, r9
 8002a38:	4645      	mov	r5, r8
 8002a3a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3c:	680c      	ldr	r4, [r1, #0]
{
 8002a3e:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a40:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002a42:	2300      	movs	r3, #0
{
 8002a44:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a46:	2c00      	cmp	r4, #0
 8002a48:	d100      	bne.n	8002a4c <HAL_GPIO_Init+0x1c>
 8002a4a:	e082      	b.n	8002b52 <HAL_GPIO_Init+0x122>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4c:	4979      	ldr	r1, [pc, #484]	; (8002c34 <HAL_GPIO_Init+0x204>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4e:	4f7a      	ldr	r7, [pc, #488]	; (8002c38 <HAL_GPIO_Init+0x208>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a50:	468b      	mov	fp, r1
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a52:	4661      	mov	r1, ip
 8002a54:	9103      	str	r1, [sp, #12]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a56:	2501      	movs	r5, #1
 8002a58:	0021      	movs	r1, r4
 8002a5a:	409d      	lsls	r5, r3
 8002a5c:	4029      	ands	r1, r5
 8002a5e:	9101      	str	r1, [sp, #4]
    if (iocurrent != 0x00u)
 8002a60:	422c      	tst	r4, r5
 8002a62:	d070      	beq.n	8002b46 <HAL_GPIO_Init+0x116>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a64:	9903      	ldr	r1, [sp, #12]
 8002a66:	6849      	ldr	r1, [r1, #4]
 8002a68:	468a      	mov	sl, r1
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	4656      	mov	r6, sl
 8002a6e:	4031      	ands	r1, r6
 8002a70:	468c      	mov	ip, r1
 8002a72:	3901      	subs	r1, #1
 8002a74:	2901      	cmp	r1, #1
 8002a76:	d800      	bhi.n	8002a7a <HAL_GPIO_Init+0x4a>
 8002a78:	e072      	b.n	8002b60 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7a:	4661      	mov	r1, ip
 8002a7c:	2903      	cmp	r1, #3
 8002a7e:	d000      	beq.n	8002a82 <HAL_GPIO_Init+0x52>
 8002a80:	e0b7      	b.n	8002bf2 <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a82:	4665      	mov	r5, ip
 8002a84:	4095      	lsls	r5, r2
 8002a86:	43e9      	mvns	r1, r5
 8002a88:	9102      	str	r1, [sp, #8]
      temp = GPIOx->MODER;
 8002a8a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a8c:	9902      	ldr	r1, [sp, #8]
 8002a8e:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a90:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a92:	25c0      	movs	r5, #192	; 0xc0
      GPIOx->MODER = temp;
 8002a94:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a96:	4651      	mov	r1, sl
 8002a98:	02ad      	lsls	r5, r5, #10
 8002a9a:	4229      	tst	r1, r5
 8002a9c:	d053      	beq.n	8002b46 <HAL_GPIO_Init+0x116>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	4659      	mov	r1, fp
 8002aa0:	2501      	movs	r5, #1
 8002aa2:	465e      	mov	r6, fp
 8002aa4:	6989      	ldr	r1, [r1, #24]
 8002aa6:	4329      	orrs	r1, r5
 8002aa8:	61b1      	str	r1, [r6, #24]
 8002aaa:	69b1      	ldr	r1, [r6, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aac:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	4029      	ands	r1, r5
 8002ab0:	4d62      	ldr	r5, [pc, #392]	; (8002c3c <HAL_GPIO_Init+0x20c>)
 8002ab2:	9105      	str	r1, [sp, #20]
 8002ab4:	46ac      	mov	ip, r5
 8002ab6:	9905      	ldr	r1, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ab8:	401e      	ands	r6, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002aba:	0899      	lsrs	r1, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002abc:	00b6      	lsls	r6, r6, #2
 8002abe:	0089      	lsls	r1, r1, #2
 8002ac0:	4461      	add	r1, ip
 8002ac2:	46b4      	mov	ip, r6
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ac4:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac6:	260f      	movs	r6, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ac8:	46a9      	mov	r9, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aca:	4665      	mov	r5, ip
 8002acc:	40ae      	lsls	r6, r5
 8002ace:	0035      	movs	r5, r6
 8002ad0:	464e      	mov	r6, r9
 8002ad2:	43ae      	bics	r6, r5
 8002ad4:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad6:	2690      	movs	r6, #144	; 0x90
 8002ad8:	05f6      	lsls	r6, r6, #23
 8002ada:	42b0      	cmp	r0, r6
 8002adc:	d00e      	beq.n	8002afc <HAL_GPIO_Init+0xcc>
 8002ade:	4e58      	ldr	r6, [pc, #352]	; (8002c40 <HAL_GPIO_Init+0x210>)
 8002ae0:	42b0      	cmp	r0, r6
 8002ae2:	d100      	bne.n	8002ae6 <HAL_GPIO_Init+0xb6>
 8002ae4:	e097      	b.n	8002c16 <HAL_GPIO_Init+0x1e6>
 8002ae6:	4e57      	ldr	r6, [pc, #348]	; (8002c44 <HAL_GPIO_Init+0x214>)
 8002ae8:	42b0      	cmp	r0, r6
 8002aea:	d100      	bne.n	8002aee <HAL_GPIO_Init+0xbe>
 8002aec:	e09a      	b.n	8002c24 <HAL_GPIO_Init+0x1f4>
 8002aee:	4665      	mov	r5, ip
 8002af0:	2605      	movs	r6, #5
 8002af2:	40ae      	lsls	r6, r5
 8002af4:	0035      	movs	r5, r6
 8002af6:	464e      	mov	r6, r9
 8002af8:	432e      	orrs	r6, r5
 8002afa:	46b1      	mov	r9, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002afc:	464d      	mov	r5, r9
 8002afe:	608d      	str	r5, [r1, #8]
        temp &= ~(iocurrent);
 8002b00:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b02:	2680      	movs	r6, #128	; 0x80
        temp &= ~(iocurrent);
 8002b04:	43ed      	mvns	r5, r5
 8002b06:	46ac      	mov	ip, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b08:	4655      	mov	r5, sl
 8002b0a:	0276      	lsls	r6, r6, #9
        temp = EXTI->IMR;
 8002b0c:	6839      	ldr	r1, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b0e:	4235      	tst	r5, r6
 8002b10:	d000      	beq.n	8002b14 <HAL_GPIO_Init+0xe4>
 8002b12:	e07d      	b.n	8002c10 <HAL_GPIO_Init+0x1e0>
        temp &= ~(iocurrent);
 8002b14:	4665      	mov	r5, ip
 8002b16:	4029      	ands	r1, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b18:	4655      	mov	r5, sl
        EXTI->IMR = temp;
 8002b1a:	6039      	str	r1, [r7, #0]
        temp = EXTI->EMR;
 8002b1c:	6879      	ldr	r1, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b1e:	03ad      	lsls	r5, r5, #14
 8002b20:	d500      	bpl.n	8002b24 <HAL_GPIO_Init+0xf4>
 8002b22:	e072      	b.n	8002c0a <HAL_GPIO_Init+0x1da>
        temp &= ~(iocurrent);
 8002b24:	4665      	mov	r5, ip
 8002b26:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002b28:	6079      	str	r1, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b2a:	4651      	mov	r1, sl
        temp = EXTI->RTSR;
 8002b2c:	68bd      	ldr	r5, [r7, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b2e:	02c9      	lsls	r1, r1, #11
 8002b30:	d468      	bmi.n	8002c04 <HAL_GPIO_Init+0x1d4>
        temp &= ~(iocurrent);
 8002b32:	4661      	mov	r1, ip
 8002b34:	400d      	ands	r5, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002b36:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b38:	4655      	mov	r5, sl
        temp = EXTI->FTSR;
 8002b3a:	68f9      	ldr	r1, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b3c:	02ad      	lsls	r5, r5, #10
 8002b3e:	d45d      	bmi.n	8002bfc <HAL_GPIO_Init+0x1cc>
        temp &= ~(iocurrent);
 8002b40:	4665      	mov	r5, ip
 8002b42:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002b44:	60f9      	str	r1, [r7, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b46:	0021      	movs	r1, r4
      }
    }

    position++;
 8002b48:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4a:	40d9      	lsrs	r1, r3
 8002b4c:	3202      	adds	r2, #2
 8002b4e:	2900      	cmp	r1, #0
 8002b50:	d181      	bne.n	8002a56 <HAL_GPIO_Init+0x26>
  } 
}
 8002b52:	b007      	add	sp, #28
 8002b54:	bcf0      	pop	{r4, r5, r6, r7}
 8002b56:	46bb      	mov	fp, r7
 8002b58:	46b2      	mov	sl, r6
 8002b5a:	46a9      	mov	r9, r5
 8002b5c:	46a0      	mov	r8, r4
 8002b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8002b60:	6881      	ldr	r1, [r0, #8]
 8002b62:	4689      	mov	r9, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b64:	2103      	movs	r1, #3
 8002b66:	4091      	lsls	r1, r2
 8002b68:	43ce      	mvns	r6, r1
 8002b6a:	9602      	str	r6, [sp, #8]
 8002b6c:	464e      	mov	r6, r9
 8002b6e:	438e      	bics	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b70:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b72:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b74:	68ce      	ldr	r6, [r1, #12]
 8002b76:	4096      	lsls	r6, r2
 8002b78:	46b0      	mov	r8, r6
 8002b7a:	464e      	mov	r6, r9
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8002b80:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002b82:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b84:	000e      	movs	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b86:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8a:	090d      	lsrs	r5, r1, #4
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	400d      	ands	r5, r1
 8002b90:	409d      	lsls	r5, r3
 8002b92:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002b94:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8002b96:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b98:	9902      	ldr	r1, [sp, #8]
 8002b9a:	400d      	ands	r5, r1
 8002b9c:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b9e:	9903      	ldr	r1, [sp, #12]
 8002ba0:	4646      	mov	r6, r8
 8002ba2:	688d      	ldr	r5, [r1, #8]
 8002ba4:	4095      	lsls	r5, r2
 8002ba6:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8002ba8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002baa:	4666      	mov	r6, ip
 8002bac:	4665      	mov	r5, ip
 8002bae:	4095      	lsls	r5, r2
 8002bb0:	2e02      	cmp	r6, #2
 8002bb2:	d000      	beq.n	8002bb6 <HAL_GPIO_Init+0x186>
 8002bb4:	e769      	b.n	8002a8a <HAL_GPIO_Init+0x5a>
        temp = GPIOx->AFR[position >> 3u];
 8002bb6:	08d9      	lsrs	r1, r3, #3
 8002bb8:	0089      	lsls	r1, r1, #2
 8002bba:	468c      	mov	ip, r1
 8002bbc:	4484      	add	ip, r0
 8002bbe:	4661      	mov	r1, ip
 8002bc0:	6a09      	ldr	r1, [r1, #32]
 8002bc2:	4689      	mov	r9, r1
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bc4:	2107      	movs	r1, #7
 8002bc6:	000e      	movs	r6, r1
 8002bc8:	401e      	ands	r6, r3
 8002bca:	00b1      	lsls	r1, r6, #2
 8002bcc:	260f      	movs	r6, #15
 8002bce:	4688      	mov	r8, r1
 8002bd0:	408e      	lsls	r6, r1
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	43b1      	bics	r1, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bd6:	4646      	mov	r6, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd8:	4689      	mov	r9, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bda:	9903      	ldr	r1, [sp, #12]
 8002bdc:	6909      	ldr	r1, [r1, #16]
 8002bde:	40b1      	lsls	r1, r6
 8002be0:	4688      	mov	r8, r1
 8002be2:	4649      	mov	r1, r9
 8002be4:	4646      	mov	r6, r8
 8002be6:	4331      	orrs	r1, r6
 8002be8:	4689      	mov	r9, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002bea:	4661      	mov	r1, ip
 8002bec:	464e      	mov	r6, r9
 8002bee:	620e      	str	r6, [r1, #32]
 8002bf0:	e74b      	b.n	8002a8a <HAL_GPIO_Init+0x5a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	4091      	lsls	r1, r2
 8002bf6:	43c9      	mvns	r1, r1
 8002bf8:	9102      	str	r1, [sp, #8]
 8002bfa:	e7cc      	b.n	8002b96 <HAL_GPIO_Init+0x166>
          temp |= iocurrent;
 8002bfc:	9d01      	ldr	r5, [sp, #4]
 8002bfe:	430d      	orrs	r5, r1
 8002c00:	0029      	movs	r1, r5
 8002c02:	e79f      	b.n	8002b44 <HAL_GPIO_Init+0x114>
          temp |= iocurrent;
 8002c04:	9901      	ldr	r1, [sp, #4]
 8002c06:	430d      	orrs	r5, r1
 8002c08:	e795      	b.n	8002b36 <HAL_GPIO_Init+0x106>
          temp |= iocurrent;
 8002c0a:	9d01      	ldr	r5, [sp, #4]
 8002c0c:	4329      	orrs	r1, r5
 8002c0e:	e78b      	b.n	8002b28 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8002c10:	9d01      	ldr	r5, [sp, #4]
 8002c12:	4329      	orrs	r1, r5
 8002c14:	e780      	b.n	8002b18 <HAL_GPIO_Init+0xe8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c16:	4666      	mov	r6, ip
 8002c18:	2501      	movs	r5, #1
 8002c1a:	40b5      	lsls	r5, r6
 8002c1c:	464e      	mov	r6, r9
 8002c1e:	432e      	orrs	r6, r5
 8002c20:	46b1      	mov	r9, r6
 8002c22:	e76b      	b.n	8002afc <HAL_GPIO_Init+0xcc>
 8002c24:	4666      	mov	r6, ip
 8002c26:	2502      	movs	r5, #2
 8002c28:	40b5      	lsls	r5, r6
 8002c2a:	464e      	mov	r6, r9
 8002c2c:	432e      	orrs	r6, r5
 8002c2e:	46b1      	mov	r9, r6
 8002c30:	e764      	b.n	8002afc <HAL_GPIO_Init+0xcc>
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010400 	.word	0x40010400
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	48000400 	.word	0x48000400
 8002c44:	48000800 	.word	0x48000800

08002c48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c4c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c4e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c50:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002c52:	e7fc      	b.n	8002c4e <HAL_GPIO_WritePin+0x6>

08002c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c56:	46ce      	mov	lr, r9
 8002c58:	4647      	mov	r7, r8
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	0004      	movs	r4, r0
 8002c5e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c60:	2800      	cmp	r0, #0
 8002c62:	d100      	bne.n	8002c66 <HAL_RCC_OscConfig+0x12>
 8002c64:	e0ee      	b.n	8002e44 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	6803      	ldr	r3, [r0, #0]
 8002c68:	07da      	lsls	r2, r3, #31
 8002c6a:	d535      	bpl.n	8002cd8 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c6c:	210c      	movs	r1, #12
 8002c6e:	48c3      	ldr	r0, [pc, #780]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002c70:	6842      	ldr	r2, [r0, #4]
 8002c72:	400a      	ands	r2, r1
 8002c74:	2a04      	cmp	r2, #4
 8002c76:	d100      	bne.n	8002c7a <HAL_RCC_OscConfig+0x26>
 8002c78:	e101      	b.n	8002e7e <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c7a:	6842      	ldr	r2, [r0, #4]
 8002c7c:	4011      	ands	r1, r2
 8002c7e:	2908      	cmp	r1, #8
 8002c80:	d100      	bne.n	8002c84 <HAL_RCC_OscConfig+0x30>
 8002c82:	e0f8      	b.n	8002e76 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c84:	6863      	ldr	r3, [r4, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d00f      	beq.n	8002caa <HAL_RCC_OscConfig+0x56>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d100      	bne.n	8002c90 <HAL_RCC_OscConfig+0x3c>
 8002c8e:	e11e      	b.n	8002ece <HAL_RCC_OscConfig+0x27a>
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d100      	bne.n	8002c96 <HAL_RCC_OscConfig+0x42>
 8002c94:	e1a7      	b.n	8002fe6 <HAL_RCC_OscConfig+0x392>
 8002c96:	4bb9      	ldr	r3, [pc, #740]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002c98:	49b9      	ldr	r1, [pc, #740]	; (8002f80 <HAL_RCC_OscConfig+0x32c>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	49b8      	ldr	r1, [pc, #736]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e005      	b.n	8002cb6 <HAL_RCC_OscConfig+0x62>
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	4ab3      	ldr	r2, [pc, #716]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002cae:	025b      	lsls	r3, r3, #9
 8002cb0:	6811      	ldr	r1, [r2, #0]
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7ff fce7 	bl	8002688 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002cbc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4faf      	ldr	r7, [pc, #700]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002cc0:	02b6      	lsls	r6, r6, #10
 8002cc2:	e005      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7ff fce0 	bl	8002688 <HAL_GetTick>
 8002cc8:	1b40      	subs	r0, r0, r5
 8002cca:	2864      	cmp	r0, #100	; 0x64
 8002ccc:	d900      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x7c>
 8002cce:	e0fc      	b.n	8002eca <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4233      	tst	r3, r6
 8002cd4:	d0f6      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	079a      	lsls	r2, r3, #30
 8002cda:	d529      	bpl.n	8002d30 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cdc:	220c      	movs	r2, #12
 8002cde:	49a7      	ldr	r1, [pc, #668]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002ce0:	6848      	ldr	r0, [r1, #4]
 8002ce2:	4202      	tst	r2, r0
 8002ce4:	d100      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x94>
 8002ce6:	e0a6      	b.n	8002e36 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ce8:	6848      	ldr	r0, [r1, #4]
 8002cea:	4002      	ands	r2, r0
 8002cec:	2a08      	cmp	r2, #8
 8002cee:	d100      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x9e>
 8002cf0:	e09d      	b.n	8002e2e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf2:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf4:	4da1      	ldr	r5, [pc, #644]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d100      	bne.n	8002cfc <HAL_RCC_OscConfig+0xa8>
 8002cfa:	e11f      	b.n	8002f3c <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8002d02:	4313      	orrs	r3, r2
 8002d04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d06:	f7ff fcbf 	bl	8002688 <HAL_GetTick>
 8002d0a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	e005      	b.n	8002d1a <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7ff fcbb 	bl	8002688 <HAL_GetTick>
 8002d12:	1b80      	subs	r0, r0, r6
 8002d14:	2802      	cmp	r0, #2
 8002d16:	d900      	bls.n	8002d1a <HAL_RCC_OscConfig+0xc6>
 8002d18:	e0d7      	b.n	8002eca <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	682b      	ldr	r3, [r5, #0]
 8002d1c:	421f      	tst	r7, r3
 8002d1e:	d0f6      	beq.n	8002d0e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	21f8      	movs	r1, #248	; 0xf8
 8002d22:	682a      	ldr	r2, [r5, #0]
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	438a      	bics	r2, r1
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	071a      	lsls	r2, r3, #28
 8002d32:	d42d      	bmi.n	8002d90 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	075a      	lsls	r2, r3, #29
 8002d36:	d544      	bpl.n	8002dc2 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d38:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3c:	4b8f      	ldr	r3, [pc, #572]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002d3e:	0552      	lsls	r2, r2, #21
 8002d40:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d44:	4211      	tst	r1, r2
 8002d46:	d108      	bne.n	8002d5a <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d48:	69d9      	ldr	r1, [r3, #28]
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	61d9      	str	r1, [r3, #28]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	401a      	ands	r2, r3
 8002d52:	9201      	str	r2, [sp, #4]
 8002d54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d56:	2301      	movs	r3, #1
 8002d58:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	2780      	movs	r7, #128	; 0x80
 8002d5c:	4e8a      	ldr	r6, [pc, #552]	; (8002f88 <HAL_RCC_OscConfig+0x334>)
 8002d5e:	007f      	lsls	r7, r7, #1
 8002d60:	6833      	ldr	r3, [r6, #0]
 8002d62:	423b      	tst	r3, r7
 8002d64:	d100      	bne.n	8002d68 <HAL_RCC_OscConfig+0x114>
 8002d66:	e094      	b.n	8002e92 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	68a3      	ldr	r3, [r4, #8]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d100      	bne.n	8002d70 <HAL_RCC_OscConfig+0x11c>
 8002d6e:	e0f8      	b.n	8002f62 <HAL_RCC_OscConfig+0x30e>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <HAL_RCC_OscConfig+0x122>
 8002d74:	e0c4      	b.n	8002f00 <HAL_RCC_OscConfig+0x2ac>
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d100      	bne.n	8002d7c <HAL_RCC_OscConfig+0x128>
 8002d7a:	e140      	b.n	8002ffe <HAL_RCC_OscConfig+0x3aa>
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	438a      	bics	r2, r1
 8002d84:	621a      	str	r2, [r3, #32]
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	3103      	adds	r1, #3
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	621a      	str	r2, [r3, #32]
 8002d8e:	e0ec      	b.n	8002f6a <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d90:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4d7a      	ldr	r5, [pc, #488]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05b      	beq.n	8002e50 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8002d98:	2201      	movs	r2, #1
 8002d9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002da2:	f7ff fc71 	bl	8002688 <HAL_GetTick>
 8002da6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da8:	e005      	b.n	8002db6 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002daa:	f7ff fc6d 	bl	8002688 <HAL_GetTick>
 8002dae:	1b80      	subs	r0, r0, r6
 8002db0:	2802      	cmp	r0, #2
 8002db2:	d900      	bls.n	8002db6 <HAL_RCC_OscConfig+0x162>
 8002db4:	e089      	b.n	8002eca <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002db8:	421f      	tst	r7, r3
 8002dba:	d0f6      	beq.n	8002daa <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	075a      	lsls	r2, r3, #29
 8002dc0:	d4ba      	bmi.n	8002d38 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002dc2:	06db      	lsls	r3, r3, #27
 8002dc4:	d512      	bpl.n	8002dec <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002dc6:	6963      	ldr	r3, [r4, #20]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d100      	bne.n	8002dce <HAL_RCC_OscConfig+0x17a>
 8002dcc:	e13d      	b.n	800304a <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002dce:	3305      	adds	r3, #5
 8002dd0:	d000      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x180>
 8002dd2:	e0e9      	b.n	8002fa8 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002dd4:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002dd6:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8002dd8:	4a68      	ldr	r2, [pc, #416]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002dda:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002ddc:	438b      	bics	r3, r1
 8002dde:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002de0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002de2:	69a3      	ldr	r3, [r4, #24]
 8002de4:	4381      	bics	r1, r0
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dec:	6a23      	ldr	r3, [r4, #32]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df2:	220c      	movs	r2, #12
 8002df4:	4d61      	ldr	r5, [pc, #388]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002df6:	6869      	ldr	r1, [r5, #4]
 8002df8:	400a      	ands	r2, r1
 8002dfa:	2a08      	cmp	r2, #8
 8002dfc:	d100      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1ac>
 8002dfe:	e108      	b.n	8003012 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d100      	bne.n	8002e06 <HAL_RCC_OscConfig+0x1b2>
 8002e04:	e13f      	b.n	8003086 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	682b      	ldr	r3, [r5, #0]
 8002e08:	4a60      	ldr	r2, [pc, #384]	; (8002f8c <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e10:	f7ff fc3a 	bl	8002688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002e16:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e18:	e004      	b.n	8002e24 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7ff fc35 	bl	8002688 <HAL_GetTick>
 8002e1e:	1b00      	subs	r0, r0, r4
 8002e20:	2802      	cmp	r0, #2
 8002e22:	d852      	bhi.n	8002eca <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	4233      	tst	r3, r6
 8002e28:	d1f7      	bne.n	8002e1a <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e00b      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e2e:	684a      	ldr	r2, [r1, #4]
 8002e30:	03d2      	lsls	r2, r2, #15
 8002e32:	d500      	bpl.n	8002e36 <HAL_RCC_OscConfig+0x1e2>
 8002e34:	e75d      	b.n	8002cf2 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4a51      	ldr	r2, [pc, #324]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	0792      	lsls	r2, r2, #30
 8002e3c:	d539      	bpl.n	8002eb2 <HAL_RCC_OscConfig+0x25e>
 8002e3e:	68e2      	ldr	r2, [r4, #12]
 8002e40:	2a01      	cmp	r2, #1
 8002e42:	d036      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
}
 8002e46:	b003      	add	sp, #12
 8002e48:	bcc0      	pop	{r6, r7}
 8002e4a:	46b9      	mov	r9, r7
 8002e4c:	46b0      	mov	r8, r6
 8002e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8002e50:	2201      	movs	r2, #1
 8002e52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002e56:	4393      	bics	r3, r2
 8002e58:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002e5a:	f7ff fc15 	bl	8002688 <HAL_GetTick>
 8002e5e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	e004      	b.n	8002e6c <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e62:	f7ff fc11 	bl	8002688 <HAL_GetTick>
 8002e66:	1b80      	subs	r0, r0, r6
 8002e68:	2802      	cmp	r0, #2
 8002e6a:	d82e      	bhi.n	8002eca <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e6e:	421f      	tst	r7, r3
 8002e70:	d1f7      	bne.n	8002e62 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	e7a3      	b.n	8002dbe <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e76:	6842      	ldr	r2, [r0, #4]
 8002e78:	03d2      	lsls	r2, r2, #15
 8002e7a:	d400      	bmi.n	8002e7e <HAL_RCC_OscConfig+0x22a>
 8002e7c:	e702      	b.n	8002c84 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7e:	4a3f      	ldr	r2, [pc, #252]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	0392      	lsls	r2, r2, #14
 8002e84:	d400      	bmi.n	8002e88 <HAL_RCC_OscConfig+0x234>
 8002e86:	e727      	b.n	8002cd8 <HAL_RCC_OscConfig+0x84>
 8002e88:	6862      	ldr	r2, [r4, #4]
 8002e8a:	2a00      	cmp	r2, #0
 8002e8c:	d000      	beq.n	8002e90 <HAL_RCC_OscConfig+0x23c>
 8002e8e:	e723      	b.n	8002cd8 <HAL_RCC_OscConfig+0x84>
 8002e90:	e7d8      	b.n	8002e44 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e92:	6833      	ldr	r3, [r6, #0]
 8002e94:	433b      	orrs	r3, r7
 8002e96:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e98:	f7ff fbf6 	bl	8002688 <HAL_GetTick>
 8002e9c:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	e004      	b.n	8002eaa <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7ff fbf2 	bl	8002688 <HAL_GetTick>
 8002ea4:	1b40      	subs	r0, r0, r5
 8002ea6:	2864      	cmp	r0, #100	; 0x64
 8002ea8:	d80f      	bhi.n	8002eca <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	6833      	ldr	r3, [r6, #0]
 8002eac:	423b      	tst	r3, r7
 8002eae:	d0f7      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x24c>
 8002eb0:	e75a      	b.n	8002d68 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	25f8      	movs	r5, #248	; 0xf8
 8002eb4:	4831      	ldr	r0, [pc, #196]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002eb6:	6922      	ldr	r2, [r4, #16]
 8002eb8:	6801      	ldr	r1, [r0, #0]
 8002eba:	00d2      	lsls	r2, r2, #3
 8002ebc:	43a9      	bics	r1, r5
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec2:	071a      	lsls	r2, r3, #28
 8002ec4:	d400      	bmi.n	8002ec8 <HAL_RCC_OscConfig+0x274>
 8002ec6:	e735      	b.n	8002d34 <HAL_RCC_OscConfig+0xe0>
 8002ec8:	e762      	b.n	8002d90 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8002eca:	2003      	movs	r0, #3
 8002ecc:	e7bb      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	4d2b      	ldr	r5, [pc, #172]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002ed0:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed4:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	602b      	str	r3, [r5, #0]
 8002eda:	682b      	ldr	r3, [r5, #0]
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ee4:	f7ff fbd0 	bl	8002688 <HAL_GetTick>
 8002ee8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	e004      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eec:	f7ff fbcc 	bl	8002688 <HAL_GetTick>
 8002ef0:	1b80      	subs	r0, r0, r6
 8002ef2:	2864      	cmp	r0, #100	; 0x64
 8002ef4:	d8e9      	bhi.n	8002eca <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	682b      	ldr	r3, [r5, #0]
 8002ef8:	423b      	tst	r3, r7
 8002efa:	d1f7      	bne.n	8002eec <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	e6eb      	b.n	8002cd8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	2201      	movs	r2, #1
 8002f02:	4e1e      	ldr	r6, [pc, #120]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	4d22      	ldr	r5, [pc, #136]	; (8002f90 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f06:	6a33      	ldr	r3, [r6, #32]
 8002f08:	4393      	bics	r3, r2
 8002f0a:	6233      	str	r3, [r6, #32]
 8002f0c:	6a33      	ldr	r3, [r6, #32]
 8002f0e:	3203      	adds	r2, #3
 8002f10:	4393      	bics	r3, r2
 8002f12:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002f14:	f7ff fbb8 	bl	8002688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002f1a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	e004      	b.n	8002f2a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7ff fbb2 	bl	8002688 <HAL_GetTick>
 8002f24:	1bc0      	subs	r0, r0, r7
 8002f26:	42a8      	cmp	r0, r5
 8002f28:	d8cf      	bhi.n	8002eca <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2a:	4642      	mov	r2, r8
 8002f2c:	6a33      	ldr	r3, [r6, #32]
 8002f2e:	421a      	tst	r2, r3
 8002f30:	d1f6      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8002f32:	464b      	mov	r3, r9
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d04f      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	e742      	b.n	8002dc2 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f40:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002f42:	4393      	bics	r3, r2
 8002f44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f46:	f7ff fb9f 	bl	8002688 <HAL_GetTick>
 8002f4a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4c:	e004      	b.n	8002f58 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7ff fb9b 	bl	8002688 <HAL_GetTick>
 8002f52:	1b80      	subs	r0, r0, r6
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d8b8      	bhi.n	8002eca <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	421f      	tst	r7, r3
 8002f5c:	d1f7      	bne.n	8002f4e <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	e6e6      	b.n	8002d30 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f62:	4906      	ldr	r1, [pc, #24]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
 8002f64:	6a0a      	ldr	r2, [r1, #32]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fb8d 	bl	8002688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8002f70:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	4698      	mov	r8, r3
 8002f74:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	4d06      	ldr	r5, [pc, #24]	; (8002f90 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	e011      	b.n	8002f9e <HAL_RCC_OscConfig+0x34a>
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	fffeffff 	.word	0xfffeffff
 8002f84:	fffbffff 	.word	0xfffbffff
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	feffffff 	.word	0xfeffffff
 8002f90:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7ff fb78 	bl	8002688 <HAL_GetTick>
 8002f98:	1b80      	subs	r0, r0, r6
 8002f9a:	42a8      	cmp	r0, r5
 8002f9c:	d895      	bhi.n	8002eca <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	4643      	mov	r3, r8
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	421f      	tst	r7, r3
 8002fa4:	d0f6      	beq.n	8002f94 <HAL_RCC_OscConfig+0x340>
 8002fa6:	e7c4      	b.n	8002f32 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4d53      	ldr	r5, [pc, #332]	; (80030f8 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fac:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002fb4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002fb6:	3a03      	subs	r2, #3
 8002fb8:	4393      	bics	r3, r2
 8002fba:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002fbc:	f7ff fb64 	bl	8002688 <HAL_GetTick>
 8002fc0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fc2:	e005      	b.n	8002fd0 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fc4:	f7ff fb60 	bl	8002688 <HAL_GetTick>
 8002fc8:	1b80      	subs	r0, r0, r6
 8002fca:	2802      	cmp	r0, #2
 8002fcc:	d900      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x37c>
 8002fce:	e77c      	b.n	8002eca <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002fd2:	421f      	tst	r7, r3
 8002fd4:	d1f6      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x370>
 8002fd6:	e709      	b.n	8002dec <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd8:	4a47      	ldr	r2, [pc, #284]	; (80030f8 <HAL_RCC_OscConfig+0x4a4>)
 8002fda:	4948      	ldr	r1, [pc, #288]	; (80030fc <HAL_RCC_OscConfig+0x4a8>)
 8002fdc:	69d3      	ldr	r3, [r2, #28]
 8002fde:	400b      	ands	r3, r1
 8002fe0:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	e6ed      	b.n	8002dc2 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <HAL_RCC_OscConfig+0x4a4>)
 8002fea:	02d2      	lsls	r2, r2, #11
 8002fec:	6819      	ldr	r1, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	0252      	lsls	r2, r2, #9
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e65b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffe:	2104      	movs	r1, #4
 8003000:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCC_OscConfig+0x4a4>)
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	430a      	orrs	r2, r1
 8003006:	621a      	str	r2, [r3, #32]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	3903      	subs	r1, #3
 800300c:	430a      	orrs	r2, r1
 800300e:	621a      	str	r2, [r3, #32]
 8003010:	e7ab      	b.n	8002f6a <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003012:	2b01      	cmp	r3, #1
 8003014:	d100      	bne.n	8003018 <HAL_RCC_OscConfig+0x3c4>
 8003016:	e715      	b.n	8002e44 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003018:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 800301a:	686a      	ldr	r2, [r5, #4]
        pll_config2 = RCC->CFGR2;
 800301c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003020:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8003022:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003024:	4013      	ands	r3, r2
 8003026:	42ab      	cmp	r3, r5
 8003028:	d000      	beq.n	800302c <HAL_RCC_OscConfig+0x3d8>
 800302a:	e70c      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800302c:	230f      	movs	r3, #15
 800302e:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003030:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003032:	428b      	cmp	r3, r1
 8003034:	d000      	beq.n	8003038 <HAL_RCC_OscConfig+0x3e4>
 8003036:	e706      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003038:	20f0      	movs	r0, #240	; 0xf0
 800303a:	0380      	lsls	r0, r0, #14
 800303c:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800303e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003040:	1a10      	subs	r0, r2, r0
 8003042:	1e43      	subs	r3, r0, #1
 8003044:	4198      	sbcs	r0, r3
  return HAL_OK;
 8003046:	b2c0      	uxtb	r0, r0
 8003048:	e6fd      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 800304a:	2104      	movs	r1, #4
 800304c:	4d2a      	ldr	r5, [pc, #168]	; (80030f8 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800304e:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003050:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003052:	430a      	orrs	r2, r1
 8003054:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003056:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003058:	4313      	orrs	r3, r2
 800305a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800305c:	f7ff fb14 	bl	8002688 <HAL_GetTick>
 8003060:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003062:	e005      	b.n	8003070 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003064:	f7ff fb10 	bl	8002688 <HAL_GetTick>
 8003068:	1b80      	subs	r0, r0, r6
 800306a:	2802      	cmp	r0, #2
 800306c:	d900      	bls.n	8003070 <HAL_RCC_OscConfig+0x41c>
 800306e:	e72c      	b.n	8002eca <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003070:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003072:	421f      	tst	r7, r3
 8003074:	d0f6      	beq.n	8003064 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003076:	21f8      	movs	r1, #248	; 0xf8
 8003078:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800307a:	69a3      	ldr	r3, [r4, #24]
 800307c:	438a      	bics	r2, r1
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4313      	orrs	r3, r2
 8003082:	636b      	str	r3, [r5, #52]	; 0x34
 8003084:	e6b2      	b.n	8002dec <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800308c:	4013      	ands	r3, r2
 800308e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003090:	f7ff fafa 	bl	8002688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003094:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003096:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003098:	e005      	b.n	80030a6 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309a:	f7ff faf5 	bl	8002688 <HAL_GetTick>
 800309e:	1b80      	subs	r0, r0, r6
 80030a0:	2802      	cmp	r0, #2
 80030a2:	d900      	bls.n	80030a6 <HAL_RCC_OscConfig+0x452>
 80030a4:	e711      	b.n	8002eca <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	423b      	tst	r3, r7
 80030aa:	d1f6      	bne.n	800309a <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ac:	220f      	movs	r2, #15
 80030ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b0:	4e11      	ldr	r6, [pc, #68]	; (80030f8 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b2:	4393      	bics	r3, r2
 80030b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030b6:	4313      	orrs	r3, r2
 80030b8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80030ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030be:	686a      	ldr	r2, [r5, #4]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	4910      	ldr	r1, [pc, #64]	; (8003104 <HAL_RCC_OscConfig+0x4b0>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	4313      	orrs	r3, r2
 80030c8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	682a      	ldr	r2, [r5, #0]
 80030ce:	045b      	lsls	r3, r3, #17
 80030d0:	4313      	orrs	r3, r2
 80030d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030d4:	f7ff fad8 	bl	8002688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80030da:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030dc:	04ad      	lsls	r5, r5, #18
 80030de:	e005      	b.n	80030ec <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7ff fad2 	bl	8002688 <HAL_GetTick>
 80030e4:	1b00      	subs	r0, r0, r4
 80030e6:	2802      	cmp	r0, #2
 80030e8:	d900      	bls.n	80030ec <HAL_RCC_OscConfig+0x498>
 80030ea:	e6ee      	b.n	8002eca <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ec:	6833      	ldr	r3, [r6, #0]
 80030ee:	422b      	tst	r3, r5
 80030f0:	d0f6      	beq.n	80030e0 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 80030f2:	2000      	movs	r0, #0
 80030f4:	e6a7      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f2>
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	40021000 	.word	0x40021000
 80030fc:	efffffff 	.word	0xefffffff
 8003100:	feffffff 	.word	0xfeffffff
 8003104:	ffc2ffff 	.word	0xffc2ffff

08003108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	46ce      	mov	lr, r9
 800310c:	4647      	mov	r7, r8
 800310e:	b580      	push	{r7, lr}
 8003110:	0004      	movs	r4, r0
 8003112:	000d      	movs	r5, r1
 8003114:	b089      	sub	sp, #36	; 0x24
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	2800      	cmp	r0, #0
 8003118:	d00d      	beq.n	8003136 <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800311a:	2301      	movs	r3, #1
 800311c:	4950      	ldr	r1, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x158>)
 800311e:	680a      	ldr	r2, [r1, #0]
 8003120:	401a      	ands	r2, r3
 8003122:	42aa      	cmp	r2, r5
 8003124:	d20d      	bcs.n	8003142 <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	680a      	ldr	r2, [r1, #0]
 8003128:	439a      	bics	r2, r3
 800312a:	432a      	orrs	r2, r5
 800312c:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	680a      	ldr	r2, [r1, #0]
 8003130:	4013      	ands	r3, r2
 8003132:	42ab      	cmp	r3, r5
 8003134:	d005      	beq.n	8003142 <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8003136:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8003138:	b009      	add	sp, #36	; 0x24
 800313a:	bcc0      	pop	{r6, r7}
 800313c:	46b9      	mov	r9, r7
 800313e:	46b0      	mov	r8, r6
 8003140:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	079a      	lsls	r2, r3, #30
 8003146:	d50e      	bpl.n	8003166 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	075a      	lsls	r2, r3, #29
 800314a:	d505      	bpl.n	8003158 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800314c:	22e0      	movs	r2, #224	; 0xe0
 800314e:	4945      	ldr	r1, [pc, #276]	; (8003264 <HAL_RCC_ClockConfig+0x15c>)
 8003150:	00d2      	lsls	r2, r2, #3
 8003152:	6848      	ldr	r0, [r1, #4]
 8003154:	4302      	orrs	r2, r0
 8003156:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	20f0      	movs	r0, #240	; 0xf0
 800315a:	4942      	ldr	r1, [pc, #264]	; (8003264 <HAL_RCC_ClockConfig+0x15c>)
 800315c:	684a      	ldr	r2, [r1, #4]
 800315e:	4382      	bics	r2, r0
 8003160:	68a0      	ldr	r0, [r4, #8]
 8003162:	4302      	orrs	r2, r0
 8003164:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	07db      	lsls	r3, r3, #31
 8003168:	d522      	bpl.n	80031b0 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003170:	2a01      	cmp	r2, #1
 8003172:	d067      	beq.n	8003244 <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003174:	2a02      	cmp	r2, #2
 8003176:	d062      	beq.n	800323e <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	079b      	lsls	r3, r3, #30
 800317a:	d5dc      	bpl.n	8003136 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317c:	2103      	movs	r1, #3
 800317e:	4e39      	ldr	r6, [pc, #228]	; (8003264 <HAL_RCC_ClockConfig+0x15c>)
 8003180:	6873      	ldr	r3, [r6, #4]
 8003182:	438b      	bics	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003188:	f7ff fa7e 	bl	8002688 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318c:	230c      	movs	r3, #12
 800318e:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	4b35      	ldr	r3, [pc, #212]	; (8003268 <HAL_RCC_ClockConfig+0x160>)
    tickstart = HAL_GetTick();
 8003192:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e004      	b.n	80031a2 <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7ff fa76 	bl	8002688 <HAL_GetTick>
 800319c:	1bc0      	subs	r0, r0, r7
 800319e:	4548      	cmp	r0, r9
 80031a0:	d853      	bhi.n	800324a <HAL_RCC_ClockConfig+0x142>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	4643      	mov	r3, r8
 80031a4:	6872      	ldr	r2, [r6, #4]
 80031a6:	401a      	ands	r2, r3
 80031a8:	6863      	ldr	r3, [r4, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1f3      	bne.n	8003198 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b0:	2101      	movs	r1, #1
 80031b2:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <HAL_RCC_ClockConfig+0x158>)
 80031b4:	6813      	ldr	r3, [r2, #0]
 80031b6:	400b      	ands	r3, r1
 80031b8:	42ab      	cmp	r3, r5
 80031ba:	d905      	bls.n	80031c8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031bc:	6813      	ldr	r3, [r2, #0]
 80031be:	438b      	bics	r3, r1
 80031c0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	4219      	tst	r1, r3
 80031c6:	d1b6      	bne.n	8003136 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	075b      	lsls	r3, r3, #29
 80031cc:	d506      	bpl.n	80031dc <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031ce:	4a25      	ldr	r2, [pc, #148]	; (8003264 <HAL_RCC_ClockConfig+0x15c>)
 80031d0:	4926      	ldr	r1, [pc, #152]	; (800326c <HAL_RCC_ClockConfig+0x164>)
 80031d2:	6853      	ldr	r3, [r2, #4]
 80031d4:	400b      	ands	r3, r1
 80031d6:	68e1      	ldr	r1, [r4, #12]
 80031d8:	430b      	orrs	r3, r1
 80031da:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80031dc:	4669      	mov	r1, sp
 80031de:	000a      	movs	r2, r1
 80031e0:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_RCC_ClockConfig+0x168>)
 80031e2:	cb31      	ldmia	r3!, {r0, r4, r5}
 80031e4:	c231      	stmia	r2!, {r0, r4, r5}
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80031ea:	aa04      	add	r2, sp, #16
 80031ec:	0010      	movs	r0, r2
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <HAL_RCC_ClockConfig+0x16c>)
 80031f0:	cb70      	ldmia	r3!, {r4, r5, r6}
 80031f2:	c070      	stmia	r0!, {r4, r5, r6}
 80031f4:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80031f6:	4d1b      	ldr	r5, [pc, #108]	; (8003264 <HAL_RCC_ClockConfig+0x15c>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80031f8:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031fa:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80031fc:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80031fe:	4003      	ands	r3, r0
 8003200:	2b08      	cmp	r3, #8
 8003202:	d00e      	beq.n	8003222 <HAL_RCC_ClockConfig+0x11a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003204:	481c      	ldr	r0, [pc, #112]	; (8003278 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <HAL_RCC_ClockConfig+0x15c>)
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_RCC_ClockConfig+0x174>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	0f1b      	lsrs	r3, r3, #28
 8003210:	5cd3      	ldrb	r3, [r2, r3]
 8003212:	40d8      	lsrs	r0, r3
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCC_ClockConfig+0x178>)
 8003216:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003218:	2002      	movs	r0, #2
 800321a:	f7ff f9f3 	bl	8002604 <HAL_InitTick>
  return HAL_OK;
 800321e:	2000      	movs	r0, #0
 8003220:	e78a      	b.n	8003138 <HAL_RCC_ClockConfig+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003222:	3307      	adds	r3, #7
 8003224:	0c84      	lsrs	r4, r0, #18
 8003226:	401c      	ands	r4, r3
 8003228:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800322a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800322c:	400b      	ands	r3, r1
 800322e:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003230:	03c3      	lsls	r3, r0, #15
 8003232:	d50c      	bpl.n	800324e <HAL_RCC_ClockConfig+0x146>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003234:	4810      	ldr	r0, [pc, #64]	; (8003278 <HAL_RCC_ClockConfig+0x170>)
 8003236:	f7fc ff67 	bl	8000108 <__udivsi3>
 800323a:	4360      	muls	r0, r4
 800323c:	e7e3      	b.n	8003206 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323e:	019b      	lsls	r3, r3, #6
 8003240:	d49c      	bmi.n	800317c <HAL_RCC_ClockConfig+0x74>
 8003242:	e778      	b.n	8003136 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003244:	039b      	lsls	r3, r3, #14
 8003246:	d499      	bmi.n	800317c <HAL_RCC_ClockConfig+0x74>
 8003248:	e775      	b.n	8003136 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800324a:	2003      	movs	r0, #3
 800324c:	e774      	b.n	8003138 <HAL_RCC_ClockConfig+0x30>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800324e:	0163      	lsls	r3, r4, #5
 8003250:	1b1b      	subs	r3, r3, r4
 8003252:	0198      	lsls	r0, r3, #6
 8003254:	1ac0      	subs	r0, r0, r3
 8003256:	00c0      	lsls	r0, r0, #3
 8003258:	1900      	adds	r0, r0, r4
 800325a:	0200      	lsls	r0, r0, #8
 800325c:	e7d3      	b.n	8003206 <HAL_RCC_ClockConfig+0xfe>
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
 8003268:	00001388 	.word	0x00001388
 800326c:	fffff8ff 	.word	0xfffff8ff
 8003270:	08006ad8 	.word	0x08006ad8
 8003274:	08006aec 	.word	0x08006aec
 8003278:	007a1200 	.word	0x007a1200
 800327c:	08006ac0 	.word	0x08006ac0
 8003280:	200005b0 	.word	0x200005b0

08003284 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	4a03      	ldr	r2, [pc, #12]	; (8003294 <HAL_RCC_EnableCSS+0x10>)
 8003288:	031b      	lsls	r3, r3, #12
 800328a:	6811      	ldr	r1, [r2, #0]
 800328c:	430b      	orrs	r3, r1
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	4770      	bx	lr
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	40021000 	.word	0x40021000

08003298 <HAL_RCC_GetSysClockFreq>:
{
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800329c:	4669      	mov	r1, sp
 800329e:	000a      	movs	r2, r1
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x60>)
 80032a2:	cb31      	ldmia	r3!, {r0, r4, r5}
 80032a4:	c231      	stmia	r2!, {r0, r4, r5}
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6013      	str	r3, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80032aa:	aa04      	add	r2, sp, #16
 80032ac:	0010      	movs	r0, r2
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_RCC_GetSysClockFreq+0x64>)
 80032b0:	cb70      	ldmia	r3!, {r4, r5, r6}
 80032b2:	c070      	stmia	r0!, {r4, r5, r6}
 80032b4:	681b      	ldr	r3, [r3, #0]
  tmpreg = RCC->CFGR;
 80032b6:	4d12      	ldr	r5, [pc, #72]	; (8003300 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80032b8:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 80032ba:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80032bc:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80032be:	4003      	ands	r3, r0
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d002      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
 80032c4:	480f      	ldr	r0, [pc, #60]	; (8003304 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80032c6:	b008      	add	sp, #32
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80032ca:	3307      	adds	r3, #7
 80032cc:	0c84      	lsrs	r4, r0, #18
 80032ce:	401c      	ands	r4, r3
 80032d0:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032d2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80032d4:	400b      	ands	r3, r1
 80032d6:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032d8:	03c3      	lsls	r3, r0, #15
 80032da:	d504      	bpl.n	80032e6 <HAL_RCC_GetSysClockFreq+0x4e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032dc:	4809      	ldr	r0, [pc, #36]	; (8003304 <HAL_RCC_GetSysClockFreq+0x6c>)
 80032de:	f7fc ff13 	bl	8000108 <__udivsi3>
 80032e2:	4360      	muls	r0, r4
 80032e4:	e7ef      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032e6:	0163      	lsls	r3, r4, #5
 80032e8:	1b1b      	subs	r3, r3, r4
 80032ea:	0198      	lsls	r0, r3, #6
 80032ec:	1ac0      	subs	r0, r0, r3
 80032ee:	00c0      	lsls	r0, r0, #3
 80032f0:	1900      	adds	r0, r0, r4
 80032f2:	0200      	lsls	r0, r0, #8
 80032f4:	e7e7      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x2e>
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	08006ad8 	.word	0x08006ad8
 80032fc:	08006aec 	.word	0x08006aec
 8003300:	40021000 	.word	0x40021000
 8003304:	007a1200 	.word	0x007a1200

08003308 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003308:	4b01      	ldr	r3, [pc, #4]	; (8003310 <HAL_RCC_GetHCLKFreq+0x8>)
 800330a:	6818      	ldr	r0, [r3, #0]
}
 800330c:	4770      	bx	lr
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	200005b0 	.word	0x200005b0

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003316:	4a05      	ldr	r2, [pc, #20]	; (800332c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	055b      	lsls	r3, r3, #21
 800331c:	0f5b      	lsrs	r3, r3, #29
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	4a03      	ldr	r2, [pc, #12]	; (8003330 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003322:	6810      	ldr	r0, [r2, #0]
 8003324:	40d8      	lsrs	r0, r3
}    
 8003326:	4770      	bx	lr
 8003328:	40021000 	.word	0x40021000
 800332c:	08006ad0 	.word	0x08006ad0
 8003330:	200005b0 	.word	0x200005b0

08003334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003336:	46ce      	mov	lr, r9
 8003338:	4647      	mov	r7, r8
 800333a:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800333c:	6803      	ldr	r3, [r0, #0]
{
 800333e:	0004      	movs	r4, r0
 8003340:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003342:	03da      	lsls	r2, r3, #15
 8003344:	d530      	bpl.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800334a:	0552      	lsls	r2, r2, #21
 800334c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800334e:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003350:	4211      	tst	r1, r2
 8003352:	d041      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	2680      	movs	r6, #128	; 0x80
 8003356:	4d41      	ldr	r5, [pc, #260]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003358:	0076      	lsls	r6, r6, #1
 800335a:	682b      	ldr	r3, [r5, #0]
 800335c:	4233      	tst	r3, r6
 800335e:	d049      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003360:	4d3d      	ldr	r5, [pc, #244]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003362:	22c0      	movs	r2, #192	; 0xc0
 8003364:	6a2b      	ldr	r3, [r5, #32]
 8003366:	0092      	lsls	r2, r2, #2
 8003368:	0018      	movs	r0, r3
 800336a:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800336c:	4213      	tst	r3, r2
 800336e:	d063      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003370:	6861      	ldr	r1, [r4, #4]
 8003372:	400a      	ands	r2, r1
 8003374:	4282      	cmp	r2, r0
 8003376:	d00e      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003378:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800337a:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800337c:	6a2e      	ldr	r6, [r5, #32]
 800337e:	0252      	lsls	r2, r2, #9
 8003380:	4332      	orrs	r2, r6
 8003382:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003384:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003388:	4e36      	ldr	r6, [pc, #216]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800338a:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 800338c:	4032      	ands	r2, r6
 800338e:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003390:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003392:	07c3      	lsls	r3, r0, #31
 8003394:	d43f      	bmi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003396:	4a30      	ldr	r2, [pc, #192]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003398:	4831      	ldr	r0, [pc, #196]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800339a:	6a13      	ldr	r3, [r2, #32]
 800339c:	4003      	ands	r3, r0
 800339e:	430b      	orrs	r3, r1
 80033a0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033a2:	2f01      	cmp	r7, #1
 80033a4:	d051      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	07da      	lsls	r2, r3, #31
 80033aa:	d506      	bpl.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ac:	2003      	movs	r0, #3
 80033ae:	492a      	ldr	r1, [pc, #168]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80033b0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80033b2:	4382      	bics	r2, r0
 80033b4:	68a0      	ldr	r0, [r4, #8]
 80033b6:	4302      	orrs	r2, r0
 80033b8:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033ba:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033bc:	069b      	lsls	r3, r3, #26
 80033be:	d506      	bpl.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c0:	2110      	movs	r1, #16
 80033c2:	4a25      	ldr	r2, [pc, #148]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80033c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80033c6:	438b      	bics	r3, r1
 80033c8:	68e1      	ldr	r1, [r4, #12]
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80033ce:	b003      	add	sp, #12
 80033d0:	bcc0      	pop	{r6, r7}
 80033d2:	46b9      	mov	r9, r7
 80033d4:	46b0      	mov	r8, r6
 80033d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	4d1f      	ldr	r5, [pc, #124]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	4311      	orrs	r1, r2
 80033e0:	61d9      	str	r1, [r3, #28]
 80033e2:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	401a      	ands	r2, r3
 80033e8:	9201      	str	r2, [sp, #4]
 80033ea:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 80033ee:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4233      	tst	r3, r6
 80033f2:	d1b5      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	4333      	orrs	r3, r6
 80033f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80033fa:	f7ff f945 	bl	8002688 <HAL_GetTick>
 80033fe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	4233      	tst	r3, r6
 8003404:	d1ac      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003406:	f7ff f93f 	bl	8002688 <HAL_GetTick>
 800340a:	4643      	mov	r3, r8
 800340c:	1ac0      	subs	r0, r0, r3
 800340e:	2864      	cmp	r0, #100	; 0x64
 8003410:	d9f6      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8003412:	2003      	movs	r0, #3
 8003414:	e7db      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003416:	f7ff f937 	bl	8002688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341a:	2302      	movs	r3, #2
 800341c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 8003420:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003422:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	e004      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7ff f92f 	bl	8002688 <HAL_GetTick>
 800342a:	1b80      	subs	r0, r0, r6
 800342c:	4548      	cmp	r0, r9
 800342e:	d8f0      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	4642      	mov	r2, r8
 8003432:	6a2b      	ldr	r3, [r5, #32]
 8003434:	421a      	tst	r2, r3
 8003436:	d0f6      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800343a:	4809      	ldr	r0, [pc, #36]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800343c:	6a13      	ldr	r3, [r2, #32]
 800343e:	6861      	ldr	r1, [r4, #4]
 8003440:	4003      	ands	r3, r0
 8003442:	430b      	orrs	r3, r1
 8003444:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8003446:	2f01      	cmp	r7, #1
 8003448:	d1ad      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 800344a:	69d3      	ldr	r3, [r2, #28]
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800344e:	400b      	ands	r3, r1
 8003450:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	e7a8      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
 8003460:	fffffcff 	.word	0xfffffcff
 8003464:	fffeffff 	.word	0xfffeffff
 8003468:	00001388 	.word	0x00001388
 800346c:	efffffff 	.word	0xefffffff

08003470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003470:	b510      	push	{r4, lr}
 8003472:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	d066      	beq.n	8003544 <HAL_TIM_Base_Init+0xd4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003476:	233d      	movs	r3, #61	; 0x3d
 8003478:	5cc3      	ldrb	r3, [r0, r3]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d041      	beq.n	8003504 <HAL_TIM_Base_Init+0x94>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	233d      	movs	r3, #61	; 0x3d
 8003482:	2202      	movs	r2, #2
 8003484:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003486:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003488:	492f      	ldr	r1, [pc, #188]	; (8003548 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 800348a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800348c:	428a      	cmp	r2, r1
 800348e:	d045      	beq.n	800351c <HAL_TIM_Base_Init+0xac>
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	05c9      	lsls	r1, r1, #23
 8003494:	428a      	cmp	r2, r1
 8003496:	d02c      	beq.n	80034f2 <HAL_TIM_Base_Init+0x82>
 8003498:	492c      	ldr	r1, [pc, #176]	; (800354c <HAL_TIM_Base_Init+0xdc>)
 800349a:	428a      	cmp	r2, r1
 800349c:	d029      	beq.n	80034f2 <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349e:	492c      	ldr	r1, [pc, #176]	; (8003550 <HAL_TIM_Base_Init+0xe0>)
 80034a0:	428a      	cmp	r2, r1
 80034a2:	d02a      	beq.n	80034fa <HAL_TIM_Base_Init+0x8a>
 80034a4:	492b      	ldr	r1, [pc, #172]	; (8003554 <HAL_TIM_Base_Init+0xe4>)
 80034a6:	428a      	cmp	r2, r1
 80034a8:	d03c      	beq.n	8003524 <HAL_TIM_Base_Init+0xb4>
 80034aa:	492b      	ldr	r1, [pc, #172]	; (8003558 <HAL_TIM_Base_Init+0xe8>)
 80034ac:	428a      	cmp	r2, r1
 80034ae:	d039      	beq.n	8003524 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	438b      	bics	r3, r1
 80034b4:	69a1      	ldr	r1, [r4, #24]
 80034b6:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80034b8:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034be:	6863      	ldr	r3, [r4, #4]
 80034c0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c2:	2301      	movs	r3, #1
 80034c4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c6:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80034c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ca:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	3a08      	subs	r2, #8
 80034ce:	54a3      	strb	r3, [r4, r2]
 80034d0:	3201      	adds	r2, #1
 80034d2:	54a3      	strb	r3, [r4, r2]
 80034d4:	3201      	adds	r2, #1
 80034d6:	54a3      	strb	r3, [r4, r2]
 80034d8:	3201      	adds	r2, #1
 80034da:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	3201      	adds	r2, #1
 80034de:	54a3      	strb	r3, [r4, r2]
 80034e0:	3201      	adds	r2, #1
 80034e2:	54a3      	strb	r3, [r4, r2]
 80034e4:	3201      	adds	r2, #1
 80034e6:	54a3      	strb	r3, [r4, r2]
 80034e8:	3201      	adds	r2, #1
 80034ea:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	3a08      	subs	r2, #8
 80034ee:	54a3      	strb	r3, [r4, r2]
}
 80034f0:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f2:	2170      	movs	r1, #112	; 0x70
 80034f4:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80034f6:	68a1      	ldr	r1, [r4, #8]
 80034f8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	4918      	ldr	r1, [pc, #96]	; (800355c <HAL_TIM_Base_Init+0xec>)
 80034fc:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fe:	6921      	ldr	r1, [r4, #16]
 8003500:	430b      	orrs	r3, r1
 8003502:	e7d5      	b.n	80034b0 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8003504:	333c      	adds	r3, #60	; 0x3c
 8003506:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003508:	f7fe fc26 	bl	8001d58 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	233d      	movs	r3, #61	; 0x3d
 800350e:	2202      	movs	r2, #2
 8003510:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003512:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003514:	490c      	ldr	r1, [pc, #48]	; (8003548 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003516:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003518:	428a      	cmp	r2, r1
 800351a:	d1b9      	bne.n	8003490 <HAL_TIM_Base_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800351c:	2170      	movs	r1, #112	; 0x70
 800351e:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003520:	68a1      	ldr	r1, [r4, #8]
 8003522:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003524:	490d      	ldr	r1, [pc, #52]	; (800355c <HAL_TIM_Base_Init+0xec>)
 8003526:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003528:	6921      	ldr	r1, [r4, #16]
 800352a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	438b      	bics	r3, r1
 8003530:	69a1      	ldr	r1, [r4, #24]
 8003532:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003534:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003536:	68e3      	ldr	r3, [r4, #12]
 8003538:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800353a:	6863      	ldr	r3, [r4, #4]
 800353c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800353e:	6963      	ldr	r3, [r4, #20]
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	e7be      	b.n	80034c2 <HAL_TIM_Base_Init+0x52>
    return HAL_ERROR;
 8003544:	2001      	movs	r0, #1
 8003546:	e7d3      	b.n	80034f0 <HAL_TIM_Base_Init+0x80>
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40000400 	.word	0x40000400
 8003550:	40002000 	.word	0x40002000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800
 800355c:	fffffcff 	.word	0xfffffcff

08003560 <HAL_TIM_PWM_Init>:
{
 8003560:	b510      	push	{r4, lr}
 8003562:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003564:	d066      	beq.n	8003634 <HAL_TIM_PWM_Init+0xd4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	233d      	movs	r3, #61	; 0x3d
 8003568:	5cc3      	ldrb	r3, [r0, r3]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d041      	beq.n	80035f4 <HAL_TIM_PWM_Init+0x94>
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	233d      	movs	r3, #61	; 0x3d
 8003572:	2202      	movs	r2, #2
 8003574:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003576:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003578:	492f      	ldr	r1, [pc, #188]	; (8003638 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 800357a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	428a      	cmp	r2, r1
 800357e:	d045      	beq.n	800360c <HAL_TIM_PWM_Init+0xac>
 8003580:	2180      	movs	r1, #128	; 0x80
 8003582:	05c9      	lsls	r1, r1, #23
 8003584:	428a      	cmp	r2, r1
 8003586:	d02c      	beq.n	80035e2 <HAL_TIM_PWM_Init+0x82>
 8003588:	492c      	ldr	r1, [pc, #176]	; (800363c <HAL_TIM_PWM_Init+0xdc>)
 800358a:	428a      	cmp	r2, r1
 800358c:	d029      	beq.n	80035e2 <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358e:	492c      	ldr	r1, [pc, #176]	; (8003640 <HAL_TIM_PWM_Init+0xe0>)
 8003590:	428a      	cmp	r2, r1
 8003592:	d02a      	beq.n	80035ea <HAL_TIM_PWM_Init+0x8a>
 8003594:	492b      	ldr	r1, [pc, #172]	; (8003644 <HAL_TIM_PWM_Init+0xe4>)
 8003596:	428a      	cmp	r2, r1
 8003598:	d03c      	beq.n	8003614 <HAL_TIM_PWM_Init+0xb4>
 800359a:	492b      	ldr	r1, [pc, #172]	; (8003648 <HAL_TIM_PWM_Init+0xe8>)
 800359c:	428a      	cmp	r2, r1
 800359e:	d039      	beq.n	8003614 <HAL_TIM_PWM_Init+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	438b      	bics	r3, r1
 80035a4:	69a1      	ldr	r1, [r4, #24]
 80035a6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80035a8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035aa:	68e3      	ldr	r3, [r4, #12]
 80035ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035ae:	6863      	ldr	r3, [r4, #4]
 80035b0:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80035b2:	2301      	movs	r3, #1
 80035b4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b6:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80035b8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ba:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035bc:	3a08      	subs	r2, #8
 80035be:	54a3      	strb	r3, [r4, r2]
 80035c0:	3201      	adds	r2, #1
 80035c2:	54a3      	strb	r3, [r4, r2]
 80035c4:	3201      	adds	r2, #1
 80035c6:	54a3      	strb	r3, [r4, r2]
 80035c8:	3201      	adds	r2, #1
 80035ca:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	3201      	adds	r2, #1
 80035ce:	54a3      	strb	r3, [r4, r2]
 80035d0:	3201      	adds	r2, #1
 80035d2:	54a3      	strb	r3, [r4, r2]
 80035d4:	3201      	adds	r2, #1
 80035d6:	54a3      	strb	r3, [r4, r2]
 80035d8:	3201      	adds	r2, #1
 80035da:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	3a08      	subs	r2, #8
 80035de:	54a3      	strb	r3, [r4, r2]
}
 80035e0:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e2:	2170      	movs	r1, #112	; 0x70
 80035e4:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80035e6:	68a1      	ldr	r1, [r4, #8]
 80035e8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ea:	4918      	ldr	r1, [pc, #96]	; (800364c <HAL_TIM_PWM_Init+0xec>)
 80035ec:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ee:	6921      	ldr	r1, [r4, #16]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	e7d5      	b.n	80035a0 <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 80035f4:	333c      	adds	r3, #60	; 0x3c
 80035f6:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80035f8:	f7fe fb7a 	bl	8001cf0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	233d      	movs	r3, #61	; 0x3d
 80035fe:	2202      	movs	r2, #2
 8003600:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003602:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	490c      	ldr	r1, [pc, #48]	; (8003638 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003606:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003608:	428a      	cmp	r2, r1
 800360a:	d1b9      	bne.n	8003580 <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	2170      	movs	r1, #112	; 0x70
 800360e:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003610:	68a1      	ldr	r1, [r4, #8]
 8003612:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003614:	490d      	ldr	r1, [pc, #52]	; (800364c <HAL_TIM_PWM_Init+0xec>)
 8003616:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003618:	6921      	ldr	r1, [r4, #16]
 800361a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	438b      	bics	r3, r1
 8003620:	69a1      	ldr	r1, [r4, #24]
 8003622:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003624:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003626:	68e3      	ldr	r3, [r4, #12]
 8003628:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800362e:	6963      	ldr	r3, [r4, #20]
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	e7be      	b.n	80035b2 <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8003634:	2001      	movs	r0, #1
 8003636:	e7d3      	b.n	80035e0 <HAL_TIM_PWM_Init+0x80>
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40000400 	.word	0x40000400
 8003640:	40002000 	.word	0x40002000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800
 800364c:	fffffcff 	.word	0xfffffcff

08003650 <HAL_TIM_PWM_ConfigChannel>:
{
 8003650:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003652:	203c      	movs	r0, #60	; 0x3c
{
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003656:	5c1c      	ldrb	r4, [r3, r0]
 8003658:	2c01      	cmp	r4, #1
 800365a:	d100      	bne.n	800365e <HAL_TIM_PWM_ConfigChannel+0xe>
 800365c:	e0df      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800365e:	2401      	movs	r4, #1
 8003660:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8003662:	2a08      	cmp	r2, #8
 8003664:	d100      	bne.n	8003668 <HAL_TIM_PWM_ConfigChannel+0x18>
 8003666:	e0ad      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003668:	d834      	bhi.n	80036d4 <HAL_TIM_PWM_ConfigChannel+0x84>
 800366a:	2a00      	cmp	r2, #0
 800366c:	d100      	bne.n	8003670 <HAL_TIM_PWM_ConfigChannel+0x20>
 800366e:	e07e      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x11e>
 8003670:	2a04      	cmp	r2, #4
 8003672:	d161      	bne.n	8003738 <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003674:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003676:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003678:	4d78      	ldr	r5, [pc, #480]	; (800385c <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367a:	6a10      	ldr	r0, [r2, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800367c:	4f78      	ldr	r7, [pc, #480]	; (8003860 <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367e:	43a0      	bics	r0, r4
 8003680:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003682:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003684:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003686:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003688:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800368a:	680d      	ldr	r5, [r1, #0]
 800368c:	022d      	lsls	r5, r5, #8
 800368e:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8003690:	2420      	movs	r4, #32
 8003692:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003694:	688c      	ldr	r4, [r1, #8]
 8003696:	0124      	lsls	r4, r4, #4
 8003698:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800369a:	42ba      	cmp	r2, r7
 800369c:	d057      	beq.n	800374e <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369e:	4f71      	ldr	r7, [pc, #452]	; (8003864 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80036a0:	42ba      	cmp	r2, r7
 80036a2:	d05c      	beq.n	800375e <HAL_TIM_PWM_ConfigChannel+0x10e>
 80036a4:	4f70      	ldr	r7, [pc, #448]	; (8003868 <HAL_TIM_PWM_ConfigChannel+0x218>)
 80036a6:	42ba      	cmp	r2, r7
 80036a8:	d059      	beq.n	800375e <HAL_TIM_PWM_ConfigChannel+0x10e>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036aa:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80036ac:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80036ae:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80036b0:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b2:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b4:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b6:	6994      	ldr	r4, [r2, #24]
 80036b8:	0100      	lsls	r0, r0, #4
 80036ba:	4320      	orrs	r0, r4
 80036bc:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036be:	6990      	ldr	r0, [r2, #24]
 80036c0:	4c6a      	ldr	r4, [pc, #424]	; (800386c <HAL_TIM_PWM_ConfigChannel+0x21c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c4:	4020      	ands	r0, r4
 80036c6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036c8:	6990      	ldr	r0, [r2, #24]
 80036ca:	0209      	lsls	r1, r1, #8
 80036cc:	4301      	orrs	r1, r0
 80036ce:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2000      	movs	r0, #0
      break;
 80036d2:	e032      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 80036d4:	2a0c      	cmp	r2, #12
 80036d6:	d12f      	bne.n	8003738 <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036d8:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036da:	4c65      	ldr	r4, [pc, #404]	; (8003870 <HAL_TIM_PWM_ConfigChannel+0x220>)
 80036dc:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036de:	4d5f      	ldr	r5, [pc, #380]	; (800385c <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036e0:	4020      	ands	r0, r4
 80036e2:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80036e4:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80036e6:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80036e8:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ea:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ec:	680d      	ldr	r5, [r1, #0]
 80036ee:	022d      	lsls	r5, r5, #8
 80036f0:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036f2:	4c60      	ldr	r4, [pc, #384]	; (8003874 <HAL_TIM_PWM_ConfigChannel+0x224>)
 80036f4:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036f6:	6888      	ldr	r0, [r1, #8]
 80036f8:	0300      	lsls	r0, r0, #12
 80036fa:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	4c58      	ldr	r4, [pc, #352]	; (8003860 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80036fe:	42a2      	cmp	r2, r4
 8003700:	d01f      	beq.n	8003742 <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003702:	4c58      	ldr	r4, [pc, #352]	; (8003864 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003704:	42a2      	cmp	r2, r4
 8003706:	d01c      	beq.n	8003742 <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003708:	4c57      	ldr	r4, [pc, #348]	; (8003868 <HAL_TIM_PWM_ConfigChannel+0x218>)
 800370a:	42a2      	cmp	r2, r4
 800370c:	d019      	beq.n	8003742 <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370e:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003710:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003712:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003714:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003716:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003718:	2080      	movs	r0, #128	; 0x80
 800371a:	69d4      	ldr	r4, [r2, #28]
 800371c:	0100      	lsls	r0, r0, #4
 800371e:	4320      	orrs	r0, r4
 8003720:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003722:	69d0      	ldr	r0, [r2, #28]
 8003724:	4c51      	ldr	r4, [pc, #324]	; (800386c <HAL_TIM_PWM_ConfigChannel+0x21c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003726:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003728:	4020      	ands	r0, r4
 800372a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800372c:	69d0      	ldr	r0, [r2, #28]
 800372e:	0209      	lsls	r1, r1, #8
 8003730:	4301      	orrs	r1, r0
 8003732:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003734:	2000      	movs	r0, #0
      break;
 8003736:	e000      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003738:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800373a:	223c      	movs	r2, #60	; 0x3c
 800373c:	2100      	movs	r1, #0
 800373e:	5499      	strb	r1, [r3, r2]
}
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003742:	4c4d      	ldr	r4, [pc, #308]	; (8003878 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8003744:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003746:	694e      	ldr	r6, [r1, #20]
 8003748:	01b6      	lsls	r6, r6, #6
 800374a:	4326      	orrs	r6, r4
 800374c:	e7df      	b.n	800370e <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 800374e:	2080      	movs	r0, #128	; 0x80
 8003750:	4384      	bics	r4, r0
 8003752:	0020      	movs	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003754:	68cc      	ldr	r4, [r1, #12]
 8003756:	0124      	lsls	r4, r4, #4
 8003758:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 800375a:	2040      	movs	r0, #64	; 0x40
 800375c:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800375e:	4847      	ldr	r0, [pc, #284]	; (800387c <HAL_TIM_PWM_ConfigChannel+0x22c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003760:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003762:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003764:	698e      	ldr	r6, [r1, #24]
 8003766:	433e      	orrs	r6, r7
 8003768:	00b6      	lsls	r6, r6, #2
 800376a:	4306      	orrs	r6, r0
 800376c:	e79d      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800376e:	2773      	movs	r7, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003770:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003772:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003774:	6a10      	ldr	r0, [r2, #32]
 8003776:	43a0      	bics	r0, r4
 8003778:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800377a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800377c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800377e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003780:	43bc      	bics	r4, r7
  tmpccer &= ~TIM_CCER_CC1P;
 8003782:	3f71      	subs	r7, #113	; 0x71
 8003784:	43b8      	bics	r0, r7
  tmpccmrx |= OC_Config->OCMode;
 8003786:	432c      	orrs	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003788:	4f35      	ldr	r7, [pc, #212]	; (8003860 <HAL_TIM_PWM_ConfigChannel+0x210>)
  tmpccer |= OC_Config->OCPolarity;
 800378a:	688d      	ldr	r5, [r1, #8]
 800378c:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800378e:	42ba      	cmp	r2, r7
 8003790:	d047      	beq.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8003792:	4d34      	ldr	r5, [pc, #208]	; (8003864 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003794:	42aa      	cmp	r2, r5
 8003796:	d044      	beq.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8003798:	4d33      	ldr	r5, [pc, #204]	; (8003868 <HAL_TIM_PWM_ConfigChannel+0x218>)
 800379a:	42aa      	cmp	r2, r5
 800379c:	d041      	beq.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1d2>
  TIMx->CR2 = tmpcr2;
 800379e:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80037a0:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80037a2:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a4:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 80037a6:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a8:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80037aa:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037ac:	6990      	ldr	r0, [r2, #24]
 80037ae:	4320      	orrs	r0, r4
 80037b0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b2:	6990      	ldr	r0, [r2, #24]
 80037b4:	3c04      	subs	r4, #4
 80037b6:	43a0      	bics	r0, r4
 80037b8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037ba:	6990      	ldr	r0, [r2, #24]
 80037bc:	4301      	orrs	r1, r0
 80037be:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2000      	movs	r0, #0
      break;
 80037c2:	e7ba      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c4:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037c6:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c8:	4c2d      	ldr	r4, [pc, #180]	; (8003880 <HAL_TIM_PWM_ConfigChannel+0x230>)
 80037ca:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ce:	4020      	ands	r0, r4
 80037d0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80037d2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80037d4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80037d6:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037d8:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 80037da:	4327      	orrs	r7, r4
  tmpccer &= ~TIM_CCER_CC3P;
 80037dc:	4c29      	ldr	r4, [pc, #164]	; (8003884 <HAL_TIM_PWM_ConfigChannel+0x234>)
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037de:	4e20      	ldr	r6, [pc, #128]	; (8003860 <HAL_TIM_PWM_ConfigChannel+0x210>)
  tmpccer &= ~TIM_CCER_CC3P;
 80037e0:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037e2:	688c      	ldr	r4, [r1, #8]
 80037e4:	0224      	lsls	r4, r4, #8
 80037e6:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037e8:	42b2      	cmp	r2, r6
 80037ea:	d027      	beq.n	800383c <HAL_TIM_PWM_ConfigChannel+0x1ec>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ec:	4e1d      	ldr	r6, [pc, #116]	; (8003864 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80037ee:	42b2      	cmp	r2, r6
 80037f0:	d02b      	beq.n	800384a <HAL_TIM_PWM_ConfigChannel+0x1fa>
 80037f2:	481d      	ldr	r0, [pc, #116]	; (8003868 <HAL_TIM_PWM_ConfigChannel+0x218>)
 80037f4:	4282      	cmp	r2, r0
 80037f6:	d028      	beq.n	800384a <HAL_TIM_PWM_ConfigChannel+0x1fa>
  TIMx->CCR3 = OC_Config->Pulse;
 80037f8:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80037fa:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80037fc:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80037fe:	63d0      	str	r0, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003800:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003802:	2408      	movs	r4, #8
 8003804:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003806:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003808:	4320      	orrs	r0, r4
 800380a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800380c:	69d0      	ldr	r0, [r2, #28]
 800380e:	3c04      	subs	r4, #4
 8003810:	43a0      	bics	r0, r4
 8003812:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003814:	69d0      	ldr	r0, [r2, #28]
 8003816:	4301      	orrs	r1, r0
 8003818:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2000      	movs	r0, #0
      break;
 800381c:	e78d      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 800381e:	2002      	movs	r0, #2
 8003820:	e78e      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8003822:	2508      	movs	r5, #8
 8003824:	43a8      	bics	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8003826:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003828:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800382a:	4328      	orrs	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800382c:	2504      	movs	r5, #4
 800382e:	43a8      	bics	r0, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003830:	4d15      	ldr	r5, [pc, #84]	; (8003888 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003832:	4035      	ands	r5, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003834:	694e      	ldr	r6, [r1, #20]
 8003836:	433e      	orrs	r6, r7
 8003838:	432e      	orrs	r6, r5
 800383a:	e7b0      	b.n	800379e <HAL_TIM_PWM_ConfigChannel+0x14e>
    tmpccer &= ~TIM_CCER_CC3NP;
 800383c:	4813      	ldr	r0, [pc, #76]	; (800388c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 800383e:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003840:	68cc      	ldr	r4, [r1, #12]
 8003842:	0224      	lsls	r4, r4, #8
 8003844:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8003846:	4809      	ldr	r0, [pc, #36]	; (800386c <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8003848:	4004      	ands	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800384a:	4811      	ldr	r0, [pc, #68]	; (8003890 <HAL_TIM_PWM_ConfigChannel+0x240>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800384c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800384e:	4028      	ands	r0, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003850:	698d      	ldr	r5, [r1, #24]
 8003852:	4335      	orrs	r5, r6
 8003854:	012d      	lsls	r5, r5, #4
 8003856:	4305      	orrs	r5, r0
 8003858:	e7ce      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	ffff8cff 	.word	0xffff8cff
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800
 800386c:	fffffbff 	.word	0xfffffbff
 8003870:	ffffefff 	.word	0xffffefff
 8003874:	ffffdfff 	.word	0xffffdfff
 8003878:	ffffbfff 	.word	0xffffbfff
 800387c:	fffff3ff 	.word	0xfffff3ff
 8003880:	fffffeff 	.word	0xfffffeff
 8003884:	fffffdff 	.word	0xfffffdff
 8003888:	fffffcff 	.word	0xfffffcff
 800388c:	fffff7ff 	.word	0xfffff7ff
 8003890:	ffffcfff 	.word	0xffffcfff

08003894 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003894:	233c      	movs	r3, #60	; 0x3c
{
 8003896:	b570      	push	{r4, r5, r6, lr}
 8003898:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800389a:	5cc0      	ldrb	r0, [r0, r3]
 800389c:	2801      	cmp	r0, #1
 800389e:	d100      	bne.n	80038a2 <HAL_TIM_ConfigClockSource+0xe>
 80038a0:	e077      	b.n	8003992 <HAL_TIM_ConfigClockSource+0xfe>
 80038a2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80038a6:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	3301      	adds	r3, #1
 80038aa:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80038ac:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ae:	4d54      	ldr	r5, [pc, #336]	; (8003a00 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 80038b0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80038b4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80038b6:	680b      	ldr	r3, [r1, #0]
 80038b8:	2b60      	cmp	r3, #96	; 0x60
 80038ba:	d100      	bne.n	80038be <HAL_TIM_ConfigClockSource+0x2a>
 80038bc:	e06b      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x102>
 80038be:	d825      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x78>
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d100      	bne.n	80038c6 <HAL_TIM_ConfigClockSource+0x32>
 80038c4:	e082      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x138>
 80038c6:	d954      	bls.n	8003972 <HAL_TIM_ConfigClockSource+0xde>
 80038c8:	2b50      	cmp	r3, #80	; 0x50
 80038ca:	d13d      	bne.n	8003948 <HAL_TIM_ConfigClockSource+0xb4>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038cc:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d2:	43a3      	bics	r3, r4
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d4:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038da:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038dc:	43a3      	bics	r3, r4
 80038de:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e0:	010b      	lsls	r3, r1, #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e2:	210a      	movs	r1, #10
 80038e4:	438e      	bics	r6, r1
 80038e6:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e8:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 80038ea:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80038ee:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f0:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80038f2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f4:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038f6:	3919      	subs	r1, #25
 80038f8:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fa:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	233d      	movs	r3, #61	; 0x3d
 8003900:	2101      	movs	r1, #1
 8003902:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8003904:	2100      	movs	r1, #0
 8003906:	3b01      	subs	r3, #1
 8003908:	54d1      	strb	r1, [r2, r3]
}
 800390a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800390c:	2480      	movs	r4, #128	; 0x80
 800390e:	0164      	lsls	r4, r4, #5
 8003910:	42a3      	cmp	r3, r4
 8003912:	d03c      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xfa>
 8003914:	2480      	movs	r4, #128	; 0x80
 8003916:	01a4      	lsls	r4, r4, #6
 8003918:	42a3      	cmp	r3, r4
 800391a:	d117      	bne.n	800394c <HAL_TIM_ConfigClockSource+0xb8>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800391c:	6883      	ldr	r3, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391e:	4c39      	ldr	r4, [pc, #228]	; (8003a04 <HAL_TIM_ConfigClockSource+0x170>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003920:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003922:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003924:	688b      	ldr	r3, [r1, #8]
 8003926:	68c9      	ldr	r1, [r1, #12]
 8003928:	432b      	orrs	r3, r5
 800392a:	0209      	lsls	r1, r1, #8
 800392c:	430b      	orrs	r3, r1
 800392e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003930:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	6881      	ldr	r1, [r0, #8]
 8003936:	01db      	lsls	r3, r3, #7
 8003938:	430b      	orrs	r3, r1
 800393a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2000      	movs	r0, #0
      break;
 800393e:	e7de      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003940:	2110      	movs	r1, #16
 8003942:	001c      	movs	r4, r3
 8003944:	438c      	bics	r4, r1
 8003946:	d019      	beq.n	800397c <HAL_TIM_ConfigClockSource+0xe8>
 8003948:	2001      	movs	r0, #1
 800394a:	e7d8      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x6a>
 800394c:	2b70      	cmp	r3, #112	; 0x70
 800394e:	d1fb      	bne.n	8003948 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr = TIMx->SMCR;
 8003950:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003952:	4c2c      	ldr	r4, [pc, #176]	; (8003a04 <HAL_TIM_ConfigClockSource+0x170>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003954:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003956:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003958:	688b      	ldr	r3, [r1, #8]
 800395a:	68c9      	ldr	r1, [r1, #12]
 800395c:	432b      	orrs	r3, r5
 800395e:	0209      	lsls	r1, r1, #8
 8003960:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003962:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003964:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8003966:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003968:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396a:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800396c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2000      	movs	r0, #0
      break;
 8003970:	e7c5      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003972:	2b20      	cmp	r3, #32
 8003974:	d002      	beq.n	800397c <HAL_TIM_ConfigClockSource+0xe8>
 8003976:	d9e3      	bls.n	8003940 <HAL_TIM_ConfigClockSource+0xac>
 8003978:	2b30      	cmp	r3, #48	; 0x30
 800397a:	d1e5      	bne.n	8003948 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr &= ~TIM_SMCR_TS;
 800397c:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800397e:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003980:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003982:	430b      	orrs	r3, r1
 8003984:	2107      	movs	r1, #7
 8003986:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003988:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2000      	movs	r0, #0
}
 800398c:	e7b7      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2000      	movs	r0, #0
 8003990:	e7b5      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 8003992:	2002      	movs	r0, #2
 8003994:	e7b9      	b.n	800390a <HAL_TIM_ConfigClockSource+0x76>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003996:	68cd      	ldr	r5, [r1, #12]
 8003998:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399a:	2110      	movs	r1, #16
 800399c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800399e:	4e1a      	ldr	r6, [pc, #104]	; (8003a08 <HAL_TIM_ConfigClockSource+0x174>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a0:	438b      	bics	r3, r1
 80039a2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a4:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 80039a6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a8:	400e      	ands	r6, r1
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039aa:	0329      	lsls	r1, r5, #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ac:	25a0      	movs	r5, #160	; 0xa0
 80039ae:	43ab      	bics	r3, r5
 80039b0:	001d      	movs	r5, r3
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039b2:	4331      	orrs	r1, r6
  TIMx->CCMR1 = tmpccmr1 ;
 80039b4:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039b6:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b8:	0123      	lsls	r3, r4, #4
 80039ba:	432b      	orrs	r3, r5
  TIMx->CCER = tmpccer;
 80039bc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80039be:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039c0:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039c2:	3909      	subs	r1, #9
 80039c4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80039c6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039c8:	2000      	movs	r0, #0
}
 80039ca:	e798      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x6a>
  tmpccer = TIMx->CCER;
 80039cc:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ce:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d2:	43a3      	bics	r3, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d4:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039da:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039dc:	43a3      	bics	r3, r4
 80039de:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e0:	010b      	lsls	r3, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039e2:	210a      	movs	r1, #10
 80039e4:	438e      	bics	r6, r1
 80039e6:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e8:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 80039ea:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80039ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039ee:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f0:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80039f2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f4:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f6:	3929      	subs	r1, #41	; 0x29
 80039f8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80039fa:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2000      	movs	r0, #0
}
 80039fe:	e77e      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x6a>
 8003a00:	ffff0088 	.word	0xffff0088
 8003a04:	ffff00ff 	.word	0xffff00ff
 8003a08:	ffff0fff 	.word	0xffff0fff

08003a0c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8003a0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a10:	4290      	cmp	r0, r2
 8003a12:	d033      	beq.n	8003a7c <TIM_Base_SetConfig+0x70>
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	05d2      	lsls	r2, r2, #23
 8003a18:	4290      	cmp	r0, r2
 8003a1a:	d01b      	beq.n	8003a54 <TIM_Base_SetConfig+0x48>
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <TIM_Base_SetConfig+0x80>)
 8003a1e:	4290      	cmp	r0, r2
 8003a20:	d018      	beq.n	8003a54 <TIM_Base_SetConfig+0x48>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a22:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <TIM_Base_SetConfig+0x84>)
 8003a24:	4290      	cmp	r0, r2
 8003a26:	d019      	beq.n	8003a5c <TIM_Base_SetConfig+0x50>
 8003a28:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <TIM_Base_SetConfig+0x88>)
 8003a2a:	4290      	cmp	r0, r2
 8003a2c:	d002      	beq.n	8003a34 <TIM_Base_SetConfig+0x28>
 8003a2e:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <TIM_Base_SetConfig+0x8c>)
 8003a30:	4290      	cmp	r0, r2
 8003a32:	d117      	bne.n	8003a64 <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a34:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <TIM_Base_SetConfig+0x90>)
 8003a36:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a38:	68ca      	ldr	r2, [r1, #12]
 8003a3a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	4393      	bics	r3, r2
 8003a40:	694a      	ldr	r2, [r1, #20]
 8003a42:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a44:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a46:	688b      	ldr	r3, [r1, #8]
 8003a48:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a4a:	680b      	ldr	r3, [r1, #0]
 8003a4c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003a4e:	690b      	ldr	r3, [r1, #16]
 8003a50:	6303      	str	r3, [r0, #48]	; 0x30
 8003a52:	e010      	b.n	8003a76 <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a54:	2270      	movs	r2, #112	; 0x70
 8003a56:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003a58:	684a      	ldr	r2, [r1, #4]
 8003a5a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5c:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <TIM_Base_SetConfig+0x90>)
 8003a5e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a60:	68ca      	ldr	r2, [r1, #12]
 8003a62:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	4393      	bics	r3, r2
 8003a68:	694a      	ldr	r2, [r1, #20]
 8003a6a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6e:	688b      	ldr	r3, [r1, #8]
 8003a70:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003a76:	2301      	movs	r3, #1
 8003a78:	6143      	str	r3, [r0, #20]
}
 8003a7a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7c:	2270      	movs	r2, #112	; 0x70
 8003a7e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003a80:	684a      	ldr	r2, [r1, #4]
 8003a82:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a84:	e7d6      	b.n	8003a34 <TIM_Base_SetConfig+0x28>
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40002000 	.word	0x40002000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800
 8003a9c:	fffffcff 	.word	0xfffffcff

08003aa0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	6a03      	ldr	r3, [r0, #32]
{
 8003aa4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa6:	4393      	bics	r3, r2
 8003aa8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003aaa:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aac:	4c15      	ldr	r4, [pc, #84]	; (8003b04 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8003aae:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ab0:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab2:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab4:	680c      	ldr	r4, [r1, #0]
 8003ab6:	0224      	lsls	r4, r4, #8
 8003ab8:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8003aba:	2420      	movs	r4, #32
 8003abc:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003abe:	688c      	ldr	r4, [r1, #8]
 8003ac0:	0124      	lsls	r4, r4, #4
 8003ac2:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ac4:	4c10      	ldr	r4, [pc, #64]	; (8003b08 <TIM_OC2_SetConfig+0x68>)
 8003ac6:	42a0      	cmp	r0, r4
 8003ac8:	d012      	beq.n	8003af0 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aca:	4c10      	ldr	r4, [pc, #64]	; (8003b0c <TIM_OC2_SetConfig+0x6c>)
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d002      	beq.n	8003ad6 <TIM_OC2_SetConfig+0x36>
 8003ad0:	4c0f      	ldr	r4, [pc, #60]	; (8003b10 <TIM_OC2_SetConfig+0x70>)
 8003ad2:	42a0      	cmp	r0, r4
 8003ad4:	d106      	bne.n	8003ae4 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad6:	4e0f      	ldr	r6, [pc, #60]	; (8003b14 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ad8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ada:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003adc:	698b      	ldr	r3, [r1, #24]
 8003ade:	4323      	orrs	r3, r4
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4333      	orrs	r3, r6
  TIMx->CR2 = tmpcr2;
 8003ae4:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ae6:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ae8:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003aea:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003aec:	6202      	str	r2, [r0, #32]
}
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af0:	2480      	movs	r4, #128	; 0x80
 8003af2:	43a2      	bics	r2, r4
 8003af4:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af6:	68ca      	ldr	r2, [r1, #12]
 8003af8:	0112      	lsls	r2, r2, #4
 8003afa:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003afc:	2440      	movs	r4, #64	; 0x40
 8003afe:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b00:	e7e9      	b.n	8003ad6 <TIM_OC2_SetConfig+0x36>
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	ffff8cff 	.word	0xffff8cff
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800
 8003b14:	fffff3ff 	.word	0xfffff3ff

08003b18 <TIM_TI1_SetConfig>:
{
 8003b18:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1a:	2401      	movs	r4, #1
{
 8003b1c:	001d      	movs	r5, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1e:	6a03      	ldr	r3, [r0, #32]
{
 8003b20:	0017      	movs	r7, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b22:	43a3      	bics	r3, r4
 8003b24:	6203      	str	r3, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <TIM_TI1_SetConfig+0x4c>)
  tmpccmr1 = TIMx->CCMR1;
 8003b28:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003b2a:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b2c:	4298      	cmp	r0, r3
 8003b2e:	d008      	beq.n	8003b42 <TIM_TI1_SetConfig+0x2a>
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	05db      	lsls	r3, r3, #23
 8003b34:	4298      	cmp	r0, r3
 8003b36:	d004      	beq.n	8003b42 <TIM_TI1_SetConfig+0x2a>
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <TIM_TI1_SetConfig+0x50>)
 8003b3a:	4298      	cmp	r0, r3
 8003b3c:	d001      	beq.n	8003b42 <TIM_TI1_SetConfig+0x2a>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b3e:	4322      	orrs	r2, r4
 8003b40:	e002      	b.n	8003b48 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b42:	2303      	movs	r3, #3
 8003b44:	439a      	bics	r2, r3
    tmpccmr1 |= TIM_ICSelection;
 8003b46:	433a      	orrs	r2, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b48:	23f0      	movs	r3, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b4a:	24ff      	movs	r4, #255	; 0xff
 8003b4c:	012d      	lsls	r5, r5, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b4e:	439a      	bics	r2, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b50:	3be6      	subs	r3, #230	; 0xe6
 8003b52:	439e      	bics	r6, r3
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b54:	402c      	ands	r4, r5
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b56:	400b      	ands	r3, r1
 8003b58:	4333      	orrs	r3, r6
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b5a:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 8003b5c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b5e:	6203      	str	r3, [r0, #32]
}
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40000400 	.word	0x40000400

08003b6c <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8003b6c:	4770      	bx	lr
 8003b6e:	46c0      	nop			; (mov r8, r8)

08003b70 <HAL_TIMEx_HallSensor_Init>:
{
 8003b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b72:	0004      	movs	r4, r0
 8003b74:	000d      	movs	r5, r1
 8003b76:	b08b      	sub	sp, #44	; 0x2c
  if (htim == NULL)
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d057      	beq.n	8003c2c <HAL_TIMEx_HallSensor_Init+0xbc>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7c:	233d      	movs	r3, #61	; 0x3d
 8003b7e:	5cc3      	ldrb	r3, [r0, r3]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d04d      	beq.n	8003c22 <HAL_TIMEx_HallSensor_Init+0xb2>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b86:	2302      	movs	r3, #2
 8003b88:	263d      	movs	r6, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8a:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	55a3      	strb	r3, [r4, r6]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8e:	c901      	ldmia	r1!, {r0}
 8003b90:	f7ff ff3c 	bl	8003a0c <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8003b94:	2203      	movs	r2, #3
 8003b96:	68ab      	ldr	r3, [r5, #8]
 8003b98:	6829      	ldr	r1, [r5, #0]
 8003b9a:	6820      	ldr	r0, [r4, #0]
 8003b9c:	f7ff ffbc 	bl	8003b18 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	6820      	ldr	r0, [r4, #0]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003ba4:	2770      	movs	r7, #112	; 0x70
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ba6:	6983      	ldr	r3, [r0, #24]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003ba8:	a903      	add	r1, sp, #12
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003baa:	4393      	bics	r3, r2
 8003bac:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003bae:	6983      	ldr	r3, [r0, #24]
 8003bb0:	686a      	ldr	r2, [r5, #4]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003bb2:	9703      	str	r7, [sp, #12]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003bb4:	4313      	orrs	r3, r2
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003bb6:	2280      	movs	r2, #128	; 0x80
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003bb8:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003bba:	6843      	ldr	r3, [r0, #4]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003bc0:	6883      	ldr	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003bc2:	3a40      	subs	r2, #64	; 0x40
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003bc4:	43bb      	bics	r3, r7
 8003bc6:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003bc8:	6883      	ldr	r3, [r0, #8]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003bce:	6883      	ldr	r3, [r0, #8]
 8003bd0:	3a39      	subs	r2, #57	; 0x39
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003bd6:	6883      	ldr	r3, [r0, #8]
 8003bd8:	3a03      	subs	r2, #3
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	9307      	str	r3, [sp, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003be2:	9308      	str	r3, [sp, #32]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003be4:	9309      	str	r3, [sp, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003be6:	9306      	str	r3, [sp, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003be8:	9305      	str	r3, [sp, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003bea:	68eb      	ldr	r3, [r5, #12]
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	9304      	str	r3, [sp, #16]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003bf0:	f7ff ff56 	bl	8003aa0 <TIM_OC2_SetConfig>
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003bf4:	2150      	movs	r1, #80	; 0x50
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003bf6:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8003bf8:	2000      	movs	r0, #0
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	43ba      	bics	r2, r7
 8003bfe:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c06:	2301      	movs	r3, #1
 8003c08:	2246      	movs	r2, #70	; 0x46
 8003c0a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	3a08      	subs	r2, #8
 8003c0e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	3201      	adds	r2, #1
 8003c12:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	3203      	adds	r2, #3
 8003c16:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c18:	3201      	adds	r2, #1
 8003c1a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	55a3      	strb	r3, [r4, r6]
}
 8003c1e:	b00b      	add	sp, #44	; 0x2c
 8003c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003c22:	333c      	adds	r3, #60	; 0x3c
 8003c24:	54c2      	strb	r2, [r0, r3]
    HAL_TIMEx_HallSensor_MspInit(htim);
 8003c26:	f7ff ffa1 	bl	8003b6c <HAL_TIMEx_HallSensor_MspInit>
 8003c2a:	e7ac      	b.n	8003b86 <HAL_TIMEx_HallSensor_Init+0x16>
    return HAL_ERROR;
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	e7f6      	b.n	8003c1e <HAL_TIMEx_HallSensor_Init+0xae>

08003c30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c30:	233c      	movs	r3, #60	; 0x3c
{
 8003c32:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003c34:	5cc3      	ldrb	r3, [r0, r3]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d021      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3a:	233d      	movs	r3, #61	; 0x3d
 8003c3c:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3e:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8003c42:	6803      	ldr	r3, [r0, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003c46:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c4a:	680d      	ldr	r5, [r1, #0]
 8003c4c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c50:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d006      	beq.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	05d2      	lsls	r2, r2, #23
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d002      	beq.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d104      	bne.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c68:	684a      	ldr	r2, [r1, #4]
 8003c6a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c6c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c6e:	233d      	movs	r3, #61	; 0x3d
 8003c70:	2201      	movs	r2, #1
 8003c72:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003c74:	2200      	movs	r2, #0
 8003c76:	3b01      	subs	r3, #1
 8003c78:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003c7a:	2000      	movs	r0, #0
}
 8003c7c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003c7e:	2002      	movs	r0, #2
 8003c80:	e7fc      	b.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40000400 	.word	0x40000400

08003c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8c:	223c      	movs	r2, #60	; 0x3c
{
 8003c8e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003c90:	5c83      	ldrb	r3, [r0, r2]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d01e      	beq.n	8003cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c96:	68cc      	ldr	r4, [r1, #12]
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8003c9a:	4023      	ands	r3, r4
 8003c9c:	688c      	ldr	r4, [r1, #8]
 8003c9e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ca0:	4c0e      	ldr	r4, [pc, #56]	; (8003cdc <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8003ca2:	4023      	ands	r3, r4
 8003ca4:	684c      	ldr	r4, [r1, #4]
 8003ca6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ca8:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8003caa:	4023      	ands	r3, r4
 8003cac:	680c      	ldr	r4, [r1, #0]
 8003cae:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cb0:	4c0c      	ldr	r4, [pc, #48]	; (8003ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8003cb2:	4023      	ands	r3, r4
 8003cb4:	690c      	ldr	r4, [r1, #16]
 8003cb6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cb8:	4c0b      	ldr	r4, [pc, #44]	; (8003ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8003cba:	4023      	ands	r3, r4
 8003cbc:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cbe:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cc0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cc2:	4c0a      	ldr	r4, [pc, #40]	; (8003cec <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8003cc4:	4023      	ands	r3, r4
 8003cc6:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cc8:	6801      	ldr	r1, [r0, #0]
 8003cca:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8003cd0:	2000      	movs	r0, #0
}
 8003cd2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	e7fc      	b.n	8003cd2 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8003cd8:	fffffcff 	.word	0xfffffcff
 8003cdc:	fffffbff 	.word	0xfffffbff
 8003ce0:	fffff7ff 	.word	0xfffff7ff
 8003ce4:	ffffefff 	.word	0xffffefff
 8003ce8:	ffffdfff 	.word	0xffffdfff
 8003cec:	ffffbfff 	.word	0xffffbfff

08003cf0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003cf2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf4:	07da      	lsls	r2, r3, #31
 8003cf6:	d506      	bpl.n	8003d06 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cf8:	6801      	ldr	r1, [r0, #0]
 8003cfa:	4c28      	ldr	r4, [pc, #160]	; (8003d9c <UART_AdvFeatureConfig+0xac>)
 8003cfc:	684a      	ldr	r2, [r1, #4]
 8003cfe:	4022      	ands	r2, r4
 8003d00:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003d02:	4322      	orrs	r2, r4
 8003d04:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d06:	079a      	lsls	r2, r3, #30
 8003d08:	d506      	bpl.n	8003d18 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d0a:	6801      	ldr	r1, [r0, #0]
 8003d0c:	4c24      	ldr	r4, [pc, #144]	; (8003da0 <UART_AdvFeatureConfig+0xb0>)
 8003d0e:	684a      	ldr	r2, [r1, #4]
 8003d10:	4022      	ands	r2, r4
 8003d12:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003d14:	4322      	orrs	r2, r4
 8003d16:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d18:	075a      	lsls	r2, r3, #29
 8003d1a:	d506      	bpl.n	8003d2a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d1c:	6801      	ldr	r1, [r0, #0]
 8003d1e:	4c21      	ldr	r4, [pc, #132]	; (8003da4 <UART_AdvFeatureConfig+0xb4>)
 8003d20:	684a      	ldr	r2, [r1, #4]
 8003d22:	4022      	ands	r2, r4
 8003d24:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003d26:	4322      	orrs	r2, r4
 8003d28:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d2a:	071a      	lsls	r2, r3, #28
 8003d2c:	d506      	bpl.n	8003d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d2e:	6801      	ldr	r1, [r0, #0]
 8003d30:	4c1d      	ldr	r4, [pc, #116]	; (8003da8 <UART_AdvFeatureConfig+0xb8>)
 8003d32:	684a      	ldr	r2, [r1, #4]
 8003d34:	4022      	ands	r2, r4
 8003d36:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003d38:	4322      	orrs	r2, r4
 8003d3a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d3c:	06da      	lsls	r2, r3, #27
 8003d3e:	d506      	bpl.n	8003d4e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d40:	6801      	ldr	r1, [r0, #0]
 8003d42:	4c1a      	ldr	r4, [pc, #104]	; (8003dac <UART_AdvFeatureConfig+0xbc>)
 8003d44:	688a      	ldr	r2, [r1, #8]
 8003d46:	4022      	ands	r2, r4
 8003d48:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d4a:	4322      	orrs	r2, r4
 8003d4c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4e:	069a      	lsls	r2, r3, #26
 8003d50:	d506      	bpl.n	8003d60 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d52:	6801      	ldr	r1, [r0, #0]
 8003d54:	4c16      	ldr	r4, [pc, #88]	; (8003db0 <UART_AdvFeatureConfig+0xc0>)
 8003d56:	688a      	ldr	r2, [r1, #8]
 8003d58:	4022      	ands	r2, r4
 8003d5a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003d5c:	4322      	orrs	r2, r4
 8003d5e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d60:	065a      	lsls	r2, r3, #25
 8003d62:	d50a      	bpl.n	8003d7a <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d64:	6801      	ldr	r1, [r0, #0]
 8003d66:	4d13      	ldr	r5, [pc, #76]	; (8003db4 <UART_AdvFeatureConfig+0xc4>)
 8003d68:	684a      	ldr	r2, [r1, #4]
 8003d6a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003d6c:	402a      	ands	r2, r5
 8003d6e:	4322      	orrs	r2, r4
 8003d70:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	0352      	lsls	r2, r2, #13
 8003d76:	4294      	cmp	r4, r2
 8003d78:	d009      	beq.n	8003d8e <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	d506      	bpl.n	8003d8c <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d7e:	6802      	ldr	r2, [r0, #0]
 8003d80:	490d      	ldr	r1, [pc, #52]	; (8003db8 <UART_AdvFeatureConfig+0xc8>)
 8003d82:	6853      	ldr	r3, [r2, #4]
 8003d84:	400b      	ands	r3, r1
 8003d86:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6053      	str	r3, [r2, #4]
  }
}
 8003d8c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d8e:	684a      	ldr	r2, [r1, #4]
 8003d90:	4c0a      	ldr	r4, [pc, #40]	; (8003dbc <UART_AdvFeatureConfig+0xcc>)
 8003d92:	4022      	ands	r2, r4
 8003d94:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003d96:	4322      	orrs	r2, r4
 8003d98:	604a      	str	r2, [r1, #4]
 8003d9a:	e7ee      	b.n	8003d7a <UART_AdvFeatureConfig+0x8a>
 8003d9c:	fffdffff 	.word	0xfffdffff
 8003da0:	fffeffff 	.word	0xfffeffff
 8003da4:	fffbffff 	.word	0xfffbffff
 8003da8:	ffff7fff 	.word	0xffff7fff
 8003dac:	ffffefff 	.word	0xffffefff
 8003db0:	ffffdfff 	.word	0xffffdfff
 8003db4:	ffefffff 	.word	0xffefffff
 8003db8:	fff7ffff 	.word	0xfff7ffff
 8003dbc:	ff9fffff 	.word	0xff9fffff

08003dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc2:	4646      	mov	r6, r8
 8003dc4:	4698      	mov	r8, r3
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dc6:	2304      	movs	r3, #4
{
 8003dc8:	464f      	mov	r7, r9
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dca:	4699      	mov	r9, r3
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dcc:	2380      	movs	r3, #128	; 0x80
{
 8003dce:	46d6      	mov	lr, sl
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dd0:	011b      	lsls	r3, r3, #4
{
 8003dd2:	b5c0      	push	{r6, r7, lr}
 8003dd4:	0015      	movs	r5, r2
 8003dd6:	0007      	movs	r7, r0
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dd8:	469a      	mov	sl, r3
{
 8003dda:	000c      	movs	r4, r1
 8003ddc:	9e08      	ldr	r6, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dde:	6801      	ldr	r1, [r0, #0]
 8003de0:	1c73      	adds	r3, r6, #1
 8003de2:	d10c      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0x3e>
 8003de4:	69cb      	ldr	r3, [r1, #28]
 8003de6:	4023      	ands	r3, r4
 8003de8:	1b1b      	subs	r3, r3, r4
 8003dea:	425a      	negs	r2, r3
 8003dec:	4153      	adcs	r3, r2
 8003dee:	42ab      	cmp	r3, r5
 8003df0:	d0f8      	beq.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003df2:	2000      	movs	r0, #0
}
 8003df4:	bce0      	pop	{r5, r6, r7}
 8003df6:	46ba      	mov	sl, r7
 8003df8:	46b1      	mov	r9, r6
 8003dfa:	46a8      	mov	r8, r5
 8003dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfe:	69cb      	ldr	r3, [r1, #28]
 8003e00:	4023      	ands	r3, r4
 8003e02:	1b1b      	subs	r3, r3, r4
 8003e04:	425a      	negs	r2, r3
 8003e06:	4153      	adcs	r3, r2
 8003e08:	42ab      	cmp	r3, r5
 8003e0a:	d1f2      	bne.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0c:	f7fe fc3c 	bl	8002688 <HAL_GetTick>
 8003e10:	4643      	mov	r3, r8
 8003e12:	1ac0      	subs	r0, r0, r3
 8003e14:	42b0      	cmp	r0, r6
 8003e16:	d82b      	bhi.n	8003e70 <UART_WaitOnFlagUntilTimeout+0xb0>
 8003e18:	2e00      	cmp	r6, #0
 8003e1a:	d029      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0xb0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e1c:	464a      	mov	r2, r9
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	680b      	ldr	r3, [r1, #0]
 8003e22:	421a      	tst	r2, r3
 8003e24:	d0dc      	beq.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e26:	4652      	mov	r2, sl
 8003e28:	69cb      	ldr	r3, [r1, #28]
 8003e2a:	4213      	tst	r3, r2
 8003e2c:	d0d8      	beq.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e2e:	620a      	str	r2, [r1, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e30:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	2201      	movs	r2, #1
 8003e36:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3a:	6839      	ldr	r1, [r7, #0]
 8003e3c:	4c1b      	ldr	r4, [pc, #108]	; (8003eac <UART_WaitOnFlagUntilTimeout+0xec>)
 8003e3e:	680b      	ldr	r3, [r1, #0]
 8003e40:	4023      	ands	r3, r4
 8003e42:	600b      	str	r3, [r1, #0]
 8003e44:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e48:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	6839      	ldr	r1, [r7, #0]
 8003e52:	688b      	ldr	r3, [r1, #8]
 8003e54:	4393      	bics	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]
 8003e58:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8003e5c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e5e:	327f      	adds	r2, #127	; 0x7f
          huart->gState = HAL_UART_STATE_READY;
 8003e60:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e62:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e64:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 8003e66:	2200      	movs	r2, #0
 8003e68:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 8003e6a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003e6c:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8003e6e:	e7c1      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e70:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	2201      	movs	r2, #1
 8003e76:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	4c0b      	ldr	r4, [pc, #44]	; (8003eac <UART_WaitOnFlagUntilTimeout+0xec>)
 8003e7e:	680b      	ldr	r3, [r1, #0]
 8003e80:	4023      	ands	r3, r4
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	688b      	ldr	r3, [r1, #8]
 8003e94:	4393      	bics	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]
 8003e98:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003e9c:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003e9e:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8003ea0:	67bb      	str	r3, [r7, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8003ea4:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 8003ea6:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8003ea8:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8003eaa:	e7a3      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x34>
 8003eac:	fffffe5f 	.word	0xfffffe5f

08003eb0 <HAL_UART_Init>:
{
 8003eb0:	b530      	push	{r4, r5, lr}
 8003eb2:	0004      	movs	r4, r0
 8003eb4:	b083      	sub	sp, #12
  if (huart == NULL)
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d100      	bne.n	8003ebc <HAL_UART_Init+0xc>
 8003eba:	e0af      	b.n	800401c <HAL_UART_Init+0x16c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ebc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d100      	bne.n	8003ec4 <HAL_UART_Init+0x14>
 8003ec2:	e08a      	b.n	8003fda <HAL_UART_Init+0x12a>
  huart->gState = HAL_UART_STATE_BUSY;
 8003ec4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003eca:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003ecc:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ece:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8003ed0:	438b      	bics	r3, r1
 8003ed2:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed4:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed6:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed8:	432b      	orrs	r3, r5
 8003eda:	6965      	ldr	r5, [r4, #20]
 8003edc:	69e1      	ldr	r1, [r4, #28]
 8003ede:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee0:	4d68      	ldr	r5, [pc, #416]	; (8004084 <HAL_UART_Init+0x1d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee4:	4028      	ands	r0, r5
 8003ee6:	4303      	orrs	r3, r0
 8003ee8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eea:	6853      	ldr	r3, [r2, #4]
 8003eec:	4866      	ldr	r0, [pc, #408]	; (8004088 <HAL_UART_Init+0x1d8>)
  tmpreg |= huart->Init.OneBitSampling;
 8003eee:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	4003      	ands	r3, r0
 8003ef2:	68e0      	ldr	r0, [r4, #12]
 8003ef4:	4303      	orrs	r3, r0
 8003ef6:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8003ef8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003efa:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003efc:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003efe:	4d63      	ldr	r5, [pc, #396]	; (800408c <HAL_UART_Init+0x1dc>)
 8003f00:	4028      	ands	r0, r5
 8003f02:	4303      	orrs	r3, r0
 8003f04:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f06:	4b62      	ldr	r3, [pc, #392]	; (8004090 <HAL_UART_Init+0x1e0>)
 8003f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d912      	bls.n	8003f3a <HAL_UART_Init+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	4299      	cmp	r1, r3
 8003f1a:	d100      	bne.n	8003f1e <HAL_UART_Init+0x6e>
 8003f1c:	e0ae      	b.n	800407c <HAL_UART_Init+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1e:	f7ff f9f9 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d119      	bne.n	8003f5a <HAL_UART_Init+0xaa>
  huart->RxISR = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003f2a:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d028      	beq.n	8003f84 <HAL_UART_Init+0xd4>
    UART_AdvFeatureConfig(huart);
 8003f32:	0020      	movs	r0, r4
 8003f34:	f7ff fedc 	bl	8003cf0 <UART_AdvFeatureConfig>
 8003f38:	e024      	b.n	8003f84 <HAL_UART_Init+0xd4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3a:	2080      	movs	r0, #128	; 0x80
 8003f3c:	4a55      	ldr	r2, [pc, #340]	; (8004094 <HAL_UART_Init+0x1e4>)
 8003f3e:	0200      	lsls	r0, r0, #8
 8003f40:	5cd3      	ldrb	r3, [r2, r3]
 8003f42:	4281      	cmp	r1, r0
 8003f44:	d100      	bne.n	8003f48 <HAL_UART_Init+0x98>
 8003f46:	e06b      	b.n	8004020 <HAL_UART_Init+0x170>
    switch (clocksource)
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d100      	bne.n	8003f4e <HAL_UART_Init+0x9e>
 8003f4c:	e08c      	b.n	8004068 <HAL_UART_Init+0x1b8>
 8003f4e:	d83c      	bhi.n	8003fca <HAL_UART_Init+0x11a>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0e4      	beq.n	8003f1e <HAL_UART_Init+0x6e>
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d13a      	bne.n	8003fce <HAL_UART_Init+0x11e>
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	484f      	ldr	r0, [pc, #316]	; (8004098 <HAL_UART_Init+0x1e8>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	6861      	ldr	r1, [r4, #4]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	1818      	adds	r0, r3, r0
 8003f62:	f7fc f8d1 	bl	8000108 <__udivsi3>
 8003f66:	0400      	lsls	r0, r0, #16
 8003f68:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	; (800409c <HAL_UART_Init+0x1ec>)
 8003f6e:	3a10      	subs	r2, #16
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d82c      	bhi.n	8003fce <HAL_UART_Init+0x11e>
        huart->Instance->BRR = usartdiv;
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003f7c:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1d6      	bne.n	8003f32 <HAL_UART_Init+0x82>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	4946      	ldr	r1, [pc, #280]	; (80040a0 <HAL_UART_Init+0x1f0>)
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f8c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	438a      	bics	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	3929      	subs	r1, #41	; 0x29
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	50e2      	str	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8003fa4:	f7fe fb70 	bl	8002688 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fa8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003faa:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	0712      	lsls	r2, r2, #28
 8003fb0:	d418      	bmi.n	8003fe4 <HAL_UART_Init+0x134>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	075b      	lsls	r3, r3, #29
 8003fb6:	d424      	bmi.n	8004002 <HAL_UART_Init+0x152>
  huart->gState = HAL_UART_STATE_READY;
 8003fb8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003fba:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8003fbc:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	2300      	movs	r3, #0
  return HAL_OK;
 8003fc2:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003fc6:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003fc8:	e005      	b.n	8003fd6 <HAL_UART_Init+0x126>
    switch (clocksource)
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d0c5      	beq.n	8003f5a <HAL_UART_Init+0xaa>
  huart->RxISR = NULL;
 8003fce:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003fd0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003fd2:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003fd4:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8003fd6:	b003      	add	sp, #12
 8003fd8:	bd30      	pop	{r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8003fda:	2274      	movs	r2, #116	; 0x74
 8003fdc:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8003fde:	f7fd ff31 	bl	8001e44 <HAL_UART_MspInit>
 8003fe2:	e76f      	b.n	8003ec4 <HAL_UART_Init+0x14>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_UART_Init+0x1f4>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0389      	lsls	r1, r1, #14
 8003fee:	0003      	movs	r3, r0
 8003ff0:	0020      	movs	r0, r4
 8003ff2:	f7ff fee5 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d10e      	bne.n	8004018 <HAL_UART_Init+0x168>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	075b      	lsls	r3, r3, #29
 8004000:	d5da      	bpl.n	8003fb8 <HAL_UART_Init+0x108>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_UART_Init+0x1f4>)
 8004006:	2200      	movs	r2, #0
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	0020      	movs	r0, r4
 800400c:	002b      	movs	r3, r5
 800400e:	03c9      	lsls	r1, r1, #15
 8004010:	f7ff fed6 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8004014:	2800      	cmp	r0, #0
 8004016:	d0cf      	beq.n	8003fb8 <HAL_UART_Init+0x108>
      return HAL_TIMEOUT;
 8004018:	2003      	movs	r0, #3
 800401a:	e7dc      	b.n	8003fd6 <HAL_UART_Init+0x126>
    return HAL_ERROR;
 800401c:	2001      	movs	r0, #1
 800401e:	e7da      	b.n	8003fd6 <HAL_UART_Init+0x126>
    switch (clocksource)
 8004020:	2b04      	cmp	r3, #4
 8004022:	d024      	beq.n	800406e <HAL_UART_Init+0x1be>
 8004024:	d81b      	bhi.n	800405e <HAL_UART_Init+0x1ae>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d028      	beq.n	800407c <HAL_UART_Init+0x1cc>
 800402a:	2b02      	cmp	r3, #2
 800402c:	d1cf      	bne.n	8003fce <HAL_UART_Init+0x11e>
 800402e:	481e      	ldr	r0, [pc, #120]	; (80040a8 <HAL_UART_Init+0x1f8>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	6861      	ldr	r1, [r4, #4]
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	1818      	adds	r0, r3, r0
 8004038:	f7fc f866 	bl	8000108 <__udivsi3>
 800403c:	0403      	lsls	r3, r0, #16
 800403e:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004040:	4916      	ldr	r1, [pc, #88]	; (800409c <HAL_UART_Init+0x1ec>)
 8004042:	3a10      	subs	r2, #16
 8004044:	428a      	cmp	r2, r1
 8004046:	d8c2      	bhi.n	8003fce <HAL_UART_Init+0x11e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <HAL_UART_Init+0x1fc>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800404a:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800404c:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800404e:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8004050:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 8004052:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8004058:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800405a:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 800405c:	e78f      	b.n	8003f7e <HAL_UART_Init+0xce>
    switch (clocksource)
 800405e:	2b08      	cmp	r3, #8
 8004060:	d1b5      	bne.n	8003fce <HAL_UART_Init+0x11e>
 8004062:	2080      	movs	r0, #128	; 0x80
 8004064:	0240      	lsls	r0, r0, #9
 8004066:	e7e3      	b.n	8004030 <HAL_UART_Init+0x180>
        pclk = HAL_RCC_GetSysClockFreq();
 8004068:	f7ff f916 	bl	8003298 <HAL_RCC_GetSysClockFreq>
        break;
 800406c:	e759      	b.n	8003f22 <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetSysClockFreq();
 800406e:	f7ff f913 	bl	8003298 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004072:	2800      	cmp	r0, #0
 8004074:	d100      	bne.n	8004078 <HAL_UART_Init+0x1c8>
 8004076:	e756      	b.n	8003f26 <HAL_UART_Init+0x76>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004078:	0040      	lsls	r0, r0, #1
 800407a:	e7d9      	b.n	8004030 <HAL_UART_Init+0x180>
        pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7ff f94a 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
        break;
 8004080:	e7f7      	b.n	8004072 <HAL_UART_Init+0x1c2>
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	ffff69f3 	.word	0xffff69f3
 8004088:	ffffcfff 	.word	0xffffcfff
 800408c:	fffff4ff 	.word	0xfffff4ff
 8004090:	40021000 	.word	0x40021000
 8004094:	08006b00 	.word	0x08006b00
 8004098:	007a1200 	.word	0x007a1200
 800409c:	0000ffef 	.word	0x0000ffef
 80040a0:	ffffb7ff 	.word	0xffffb7ff
 80040a4:	01ffffff 	.word	0x01ffffff
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	0000fff0 	.word	0x0000fff0

080040b0 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 80040b0:	0003      	movs	r3, r0
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80040b2:	88c0      	ldrh	r0, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80040b4:	885b      	ldrh	r3, [r3, #2]
 80040b6:	4358      	muls	r0, r3
  temp /= 65536u;

  return ( ( uint16_t )temp );
 80040b8:	0c00      	lsrs	r0, r0, #16
}
 80040ba:	4770      	bx	lr

080040bc <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80040bc:	b510      	push	{r4, lr}
 80040be:	140a      	asrs	r2, r1, #16
 80040c0:	b20b      	sxth	r3, r1
 80040c2:	b084      	sub	sp, #16
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
            ( int32_t )( Vqd.d ) * Vqd.d;
 80040c4:	0014      	movs	r4, r2
{
 80040c6:	9101      	str	r1, [sp, #4]
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80040c8:	0019      	movs	r1, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 80040ca:	4354      	muls	r4, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80040cc:	4359      	muls	r1, r3
 80040ce:	1909      	adds	r1, r1, r4

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80040d0:	8804      	ldrh	r4, [r0, #0]
 80040d2:	4364      	muls	r4, r4
 80040d4:	428c      	cmp	r4, r1
 80040d6:	d217      	bcs.n	8004108 <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80040d8:	24b2      	movs	r4, #178	; 0xb2
 80040da:	5d04      	ldrb	r4, [r0, r4]
    uw_temp /= ( uint32_t )( 16777216 );
 80040dc:	0e09      	lsrs	r1, r1, #24
    uw_temp -= pHandle->Start_index;
 80040de:	1b09      	subs	r1, r1, r4

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80040e0:	24ff      	movs	r4, #255	; 0xff
 80040e2:	4021      	ands	r1, r4
 80040e4:	0049      	lsls	r1, r1, #1
 80040e6:	1840      	adds	r0, r0, r1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80040e8:	8881      	ldrh	r1, [r0, #4]
 80040ea:	434b      	muls	r3, r1
 80040ec:	0018      	movs	r0, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80040ee:	4351      	muls	r1, r2
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80040f0:	17dc      	asrs	r4, r3, #31
 80040f2:	0464      	lsls	r4, r4, #17
 80040f4:	0c63      	lsrs	r3, r4, #17
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80040f6:	17cc      	asrs	r4, r1, #31
 80040f8:	0464      	lsls	r4, r4, #17
 80040fa:	0c62      	lsrs	r2, r4, #17
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80040fc:	181b      	adds	r3, r3, r0
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80040fe:	1852      	adds	r2, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004100:	13db      	asrs	r3, r3, #15
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004102:	13d2      	asrs	r2, r2, #15
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004104:	b21b      	sxth	r3, r3
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004106:	b212      	sxth	r2, r2
  }

  return ( local_vqd );
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	0412      	lsls	r2, r2, #16
 800410c:	0c18      	lsrs	r0, r3, #16
 800410e:	4310      	orrs	r0, r2
}
 8004110:	b004      	add	sp, #16
 8004112:	bd10      	pop	{r4, pc}

08004114 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004114:	2300      	movs	r3, #0

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8004116:	2196      	movs	r1, #150	; 0x96
  pHandle->RxTimeoutCountdown = 0;
 8004118:	2200      	movs	r2, #0
 800411a:	8243      	strh	r3, [r0, #18]
  pHandle->TxFrame.Code = 0x0;
 800411c:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.FrameCRC = 0;
 800411e:	5243      	strh	r3, [r0, r1]
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;
 8004120:	3102      	adds	r1, #2
 8004122:	5243      	strh	r3, [r0, r1]

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8004124:	3102      	adds	r1, #2
 8004126:	5442      	strb	r2, [r0, r1]
  pHandle->RxFrame.FrameCRC = 0;
 8004128:	211c      	movs	r1, #28
 800412a:	31ff      	adds	r1, #255	; 0xff
 800412c:	5442      	strb	r2, [r0, r1]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800412e:	228e      	movs	r2, #142	; 0x8e
 8004130:	0052      	lsls	r2, r2, #1
 8004132:	5283      	strh	r3, [r0, r2]
  pHandle->RxFrameLevel = 0;
}
 8004134:	4770      	bx	lr
 8004136:	46c0      	nop			; (mov r8, r8)

08004138 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004138:	2800      	cmp	r0, #0
 800413a:	d004      	beq.n	8004146 <FCP_SetClient+0xe>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800413c:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800413e:	9b00      	ldr	r3, [sp, #0]
    pHandle->ClientEntity = pClient;
 8004140:	6001      	str	r1, [r0, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8004142:	6042      	str	r2, [r0, #4]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004144:	60c3      	str	r3, [r0, #12]
  }
}
 8004146:	4770      	bx	lr

08004148 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 8004148:	b510      	push	{r4, lr}
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 800414a:	2800      	cmp	r0, #0
 800414c:	d011      	beq.n	8004172 <FCP_CalcCRC+0x2a>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800414e:	7844      	ldrb	r4, [r0, #1]
    nSum += pFrame->Code;
 8004150:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8004152:	191b      	adds	r3, r3, r4

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004154:	2c00      	cmp	r4, #0
 8004156:	d008      	beq.n	800416a <FCP_CalcCRC+0x22>
 8004158:	2200      	movs	r2, #0
 800415a:	3002      	adds	r0, #2
    {
      nSum += pFrame->Buffer[idx];
 800415c:	5c81      	ldrb	r1, [r0, r2]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800415e:	3201      	adds	r2, #1
      nSum += pFrame->Buffer[idx];
 8004160:	185b      	adds	r3, r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004162:	b2d1      	uxtb	r1, r2
      nSum += pFrame->Buffer[idx];
 8004164:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004166:	428c      	cmp	r4, r1
 8004168:	d8f8      	bhi.n	800415c <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800416a:	0a18      	lsrs	r0, r3, #8
 800416c:	1818      	adds	r0, r3, r0
 800416e:	b2c0      	uxtb	r0, r0
  }

  return nCRC ;
}
 8004170:	bd10      	pop	{r4, pc}
  uint8_t nCRC = 0;
 8004172:	2000      	movs	r0, #0
 8004174:	e7fc      	b.n	8004170 <FCP_CalcCRC+0x28>
 8004176:	46c0      	nop			; (mov r8, r8)

08004178 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8004178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417a:	4646      	mov	r6, r8
 800417c:	464f      	mov	r7, r9
 800417e:	46d6      	mov	lr, sl
 8004180:	b5c0      	push	{r6, r7, lr}

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004182:	6a87      	ldr	r7, [r0, #40]	; 0x28
                                     pHandle->_Super.bElToMecRatio;
 8004184:	7842      	ldrb	r2, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004186:	8ac3      	ldrh	r3, [r0, #22]
  hMaxReliableElSpeedUnit *= 2u;
 8004188:	8a86      	ldrh	r6, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800418a:	4353      	muls	r3, r2
  hMaxReliableElSpeedUnit *= 2u;
 800418c:	4356      	muls	r6, r2
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800418e:	0c3a      	lsrs	r2, r7, #16
 8004190:	4690      	mov	r8, r2
 8004192:	22c2      	movs	r2, #194	; 0xc2
 8004194:	4641      	mov	r1, r8
  hMaxReliableElSpeedUnit *= 2u;
 8004196:	0076      	lsls	r6, r6, #1
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004198:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800419a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
 800419c:	0004      	movs	r4, r0
  hMaxReliableElSpeedUnit *= 2u;
 800419e:	b2b6      	uxth	r6, r6
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80041a0:	5281      	strh	r1, [r0, r2]

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d800      	bhi.n	80041a8 <HALL_Init+0x30>
 80041a6:	e06e      	b.n	8004286 <HALL_Init+0x10e>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 80041a8:	0899      	lsrs	r1, r3, #2
 80041aa:	004b      	lsls	r3, r1, #1
 80041ac:	1859      	adds	r1, r3, r1
 80041ae:	4837      	ldr	r0, [pc, #220]	; (800428c <HALL_Init+0x114>)
 80041b0:	0049      	lsls	r1, r1, #1
 80041b2:	f7fb ffa9 	bl	8000108 <__udivsi3>
 80041b6:	b282      	uxth	r2, r0
 80041b8:	23c0      	movs	r3, #192	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80041ba:	21fa      	movs	r1, #250	; 0xfa
 80041bc:	52e2      	strh	r2, [r4, r3]
 80041be:	4643      	mov	r3, r8
 80041c0:	0089      	lsls	r1, r1, #2
 80041c2:	4358      	muls	r0, r3
 80041c4:	f7fc f82a 	bl	800021c <__divsi3>
 80041c8:	23ae      	movs	r3, #174	; 0xae
 80041ca:	52e0      	strh	r0, [r4, r3]

  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80041cc:	0400      	lsls	r0, r0, #16
 80041ce:	0c03      	lsrs	r3, r0, #16
 80041d0:	4699      	mov	r9, r3
 80041d2:	23b8      	movs	r3, #184	; 0xb8
 80041d4:	50e0      	str	r0, [r4, r3]
 80041d6:	4698      	mov	r8, r3

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 80041d8:	3b08      	subs	r3, #8
 80041da:	52e6      	strh	r6, [r4, r3]

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80041dc:	2106      	movs	r1, #6
 80041de:	0038      	movs	r0, r7
 80041e0:	f7fb ff92 	bl	8000108 <__udivsi3>
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80041e4:	8b67      	ldrh	r7, [r4, #26]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80041e6:	4682      	mov	sl, r0
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80041e8:	0039      	movs	r1, r7
 80041ea:	f7fb ff8d 	bl	8000108 <__udivsi3>
 80041ee:	69e3      	ldr	r3, [r4, #28]

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
                       / hMaxReliableElSpeedUnit);
 80041f0:	0031      	movs	r1, r6
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80041f2:	4358      	muls	r0, r3
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80041f4:	23b4      	movs	r3, #180	; 0xb4
 80041f6:	50e0      	str	r0, [r4, r3]
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80041f8:	4653      	mov	r3, sl
 80041fa:	0098      	lsls	r0, r3, #2
 80041fc:	4450      	add	r0, sl
 80041fe:	0040      	lsls	r0, r0, #1
                       / hMaxReliableElSpeedUnit);
 8004200:	f7fb ff82 	bl	8000108 <__udivsi3>
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004204:	23bc      	movs	r3, #188	; 0xbc
 8004206:	50e0      	str	r0, [r4, r3]

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004208:	330a      	adds	r3, #10
 800420a:	5ce0      	ldrb	r0, [r4, r3]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800420c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800420e:	4378      	muls	r0, r7
 8004210:	f7fc f804 	bl	800021c <__divsi3>
 8004214:	23c4      	movs	r3, #196	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 8004216:	2249      	movs	r2, #73	; 0x49
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004218:	21f0      	movs	r1, #240	; 0xf0
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800421a:	3801      	subs	r0, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800421c:	52e0      	strh	r0, [r4, r3]
  pHandle->SensorIsReliable = true;
 800421e:	3bc3      	subs	r3, #195	; 0xc3
 8004220:	54a3      	strb	r3, [r4, r2]

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8004222:	3a01      	subs	r2, #1
 8004224:	69a8      	ldr	r0, [r5, #24]
 8004226:	5ca2      	ldrb	r2, [r4, r2]
 8004228:	4388      	bics	r0, r1
 800422a:	0112      	lsls	r2, r2, #4
 800422c:	4302      	orrs	r2, r0
 800422e:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004230:	464a      	mov	r2, r9
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8004232:	2100      	movs	r1, #0
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8004234:	2004      	movs	r0, #4
  WRITE_REG(TIMx->PSC, Prescaler);
 8004236:	62aa      	str	r2, [r5, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004238:	696a      	ldr	r2, [r5, #20]
 800423a:	431a      	orrs	r2, r3
 800423c:	616a      	str	r2, [r5, #20]
 800423e:	6129      	str	r1, [r5, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8004240:	682a      	ldr	r2, [r5, #0]
 8004242:	4302      	orrs	r2, r0
 8004244:	602a      	str	r2, [r5, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004246:	68ea      	ldr	r2, [r5, #12]
 8004248:	3802      	subs	r0, #2
 800424a:	4302      	orrs	r2, r0
 800424c:	60ea      	str	r2, [r5, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800424e:	68ea      	ldr	r2, [r5, #12]
 8004250:	431a      	orrs	r2, r3
 8004252:	60ea      	str	r2, [r5, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8004254:	6269      	str	r1, [r5, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8004256:	6a2a      	ldr	r2, [r5, #32]
 8004258:	431a      	orrs	r2, r3
 800425a:	622a      	str	r2, [r5, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800425c:	682a      	ldr	r2, [r5, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	602b      	str	r3, [r5, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8004262:	2326      	movs	r3, #38	; 0x26
 8004264:	5ce2      	ldrb	r2, [r4, r3]

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8004266:	2a00      	cmp	r2, #0
 8004268:	d008      	beq.n	800427c <HALL_Init+0x104>
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800426a:	4643      	mov	r3, r8
 800426c:	58e1      	ldr	r1, [r4, r3]
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800426e:	2300      	movs	r3, #0
 8004270:	3450      	adds	r4, #80	; 0x50
 8004272:	3301      	adds	r3, #1
 8004274:	b2db      	uxtb	r3, r3
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004276:	c402      	stmia	r4!, {r1}
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8004278:	429a      	cmp	r2, r3
 800427a:	d1fa      	bne.n	8004272 <HALL_Init+0xfa>
  }
}
 800427c:	bce0      	pop	{r5, r6, r7}
 800427e:	46ba      	mov	sl, r7
 8004280:	46b1      	mov	r9, r6
 8004282:	46a8      	mov	r8, r5
 8004284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004286:	2096      	movs	r0, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8004288:	2296      	movs	r2, #150	; 0x96
 800428a:	e795      	b.n	80041b8 <HALL_Init+0x40>
 800428c:	00002710 	.word	0x00002710

08004290 <HALL_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
 8004290:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004292:	2502      	movs	r5, #2
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004294:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8004296:	2200      	movs	r2, #0
 8004298:	68d9      	ldr	r1, [r3, #12]
  pHandle->RatioInc = false;

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 800429a:	2401      	movs	r4, #1
 800429c:	43a9      	bics	r1, r5
 800429e:	60d9      	str	r1, [r3, #12]
  pHandle->RatioDec = false;
 80042a0:	214a      	movs	r1, #74	; 0x4a
 80042a2:	5442      	strb	r2, [r0, r1]
  pHandle->RatioInc = false;
 80042a4:	3101      	adds	r1, #1
 80042a6:	5442      	strb	r2, [r0, r1]
  pHandle->SensorIsReliable = true;
 80042a8:	3902      	subs	r1, #2
 80042aa:	5444      	strb	r4, [r0, r1]

  /* Acceleration measurement not implemented.*/
  pHandle->_Super.hMecAccelUnitP = 0;

  pHandle->FirstCapt = 0u;
 80042ac:	264c      	movs	r6, #76	; 0x4c
  pHandle->_Super.hMecAccelUnitP = 0;
 80042ae:	2100      	movs	r1, #0
 80042b0:	8242      	strh	r2, [r0, #18]
  pHandle->FirstCapt = 0u;
 80042b2:	5581      	strb	r1, [r0, r6]
  pHandle->BufferFilled = 0u;
 80042b4:	3601      	adds	r6, #1
 80042b6:	5581      	strb	r1, [r0, r6]
  pHandle->OVFCounter = 0u;
 80042b8:	3601      	adds	r6, #1
 80042ba:	5581      	strb	r1, [r0, r6]

  pHandle->CompSpeed = 0;
 80042bc:	365e      	adds	r6, #94	; 0x5e
 80042be:	5382      	strh	r2, [r0, r6]

  pHandle->Direction = POSITIVE;
 80042c0:	3e0a      	subs	r6, #10
 80042c2:	5584      	strb	r4, [r0, r6]

  /* Initialize speed buffer index */
  pHandle->SpeedFIFOIdx = 0u;
 80042c4:	3e0a      	subs	r6, #10
 80042c6:	5581      	strb	r1, [r0, r6]


  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
 80042c8:	7001      	strb	r1, [r0, #0]
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 80042ca:	21ae      	movs	r1, #174	; 0xae
 80042cc:	5a41      	ldrh	r1, [r0, r1]
  WRITE_REG(TIMx->PSC, Prescaler);
 80042ce:	6299      	str	r1, [r3, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	4321      	orrs	r1, r4
 80042d6:	6019      	str	r1, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	432a      	orrs	r2, r5
 80042dc:	60da      	str	r2, [r3, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 80042de:	2320      	movs	r3, #32
 80042e0:	5cc3      	ldrb	r3, [r0, r3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d120      	bne.n	8004328 <HALL_Clear+0x98>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80042e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042e8:	6c46      	ldr	r6, [r0, #68]	; 0x44
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80042ea:	691a      	ldr	r2, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80042ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042ee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80042f0:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80042f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80042f4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80042f6:	4032      	ands	r2, r6
 80042f8:	4025      	ands	r5, r4
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	1b92      	subs	r2, r2, r6
 80042fe:	1b2c      	subs	r4, r5, r4
 8004300:	400b      	ands	r3, r1
 8004302:	4256      	negs	r6, r2
 8004304:	4172      	adcs	r2, r6
 8004306:	4265      	negs	r5, r4
 8004308:	416c      	adcs	r4, r5
 800430a:	1a5b      	subs	r3, r3, r1
 800430c:	4259      	negs	r1, r3
 800430e:	414b      	adcs	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004310:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004312:	0064      	lsls	r4, r4, #1
 8004314:	4322      	orrs	r2, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004316:	4313      	orrs	r3, r2
 8004318:	22a6      	movs	r2, #166	; 0xa6
 800431a:	5483      	strb	r3, [r0, r2]
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 800431c:	2b06      	cmp	r3, #6
 800431e:	d84c      	bhi.n	80043ba <HALL_Clear+0x12a>
 8004320:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <HALL_Clear+0x138>)
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	58d3      	ldr	r3, [r2, r3]
 8004326:	469f      	mov	pc, r3
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004328:	6b83      	ldr	r3, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800432a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800432c:	691c      	ldr	r4, [r3, #16]
 800432e:	6c03      	ldr	r3, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004330:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	6912      	ldr	r2, [r2, #16]
 8004336:	402b      	ands	r3, r5
 8004338:	1b5b      	subs	r3, r3, r5
 800433a:	425d      	negs	r5, r3
 800433c:	416b      	adcs	r3, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800433e:	005d      	lsls	r5, r3, #1
 8004340:	6b43      	ldr	r3, [r0, #52]	; 0x34
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004342:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004344:	401a      	ands	r2, r3
 8004346:	400c      	ands	r4, r1
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	425a      	negs	r2, r3
 800434c:	4153      	adcs	r3, r2
 800434e:	1a62      	subs	r2, r4, r1
 8004350:	4251      	negs	r1, r2
 8004352:	414a      	adcs	r2, r1
 8004354:	2104      	movs	r1, #4
 8004356:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004358:	432b      	orrs	r3, r5
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800435a:	404a      	eors	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800435c:	4313      	orrs	r3, r2
 800435e:	b2db      	uxtb	r3, r3
 8004360:	e7da      	b.n	8004318 <HALL_Clear+0x88>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004362:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <HALL_Clear+0x13c>)
 8004364:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004366:	4694      	mov	ip, r2
 8004368:	4463      	add	r3, ip
 800436a:	b21b      	sxth	r3, r3
 800436c:	8083      	strh	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800436e:	22aa      	movs	r2, #170	; 0xaa
 8004370:	5283      	strh	r3, [r0, r2]
}
 8004372:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004374:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <HALL_Clear+0x140>)
 8004376:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004378:	4694      	mov	ip, r2
 800437a:	4463      	add	r3, ip
 800437c:	b21b      	sxth	r3, r3
 800437e:	8083      	strh	r3, [r0, #4]
      break;
 8004380:	e7f5      	b.n	800436e <HALL_Clear+0xde>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004382:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <HALL_Clear+0x144>)
 8004384:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004386:	4694      	mov	ip, r2
 8004388:	4463      	add	r3, ip
 800438a:	b21b      	sxth	r3, r3
 800438c:	8083      	strh	r3, [r0, #4]
      break;
 800438e:	e7ee      	b.n	800436e <HALL_Clear+0xde>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004390:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <HALL_Clear+0x148>)
 8004392:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004394:	4694      	mov	ip, r2
 8004396:	4463      	add	r3, ip
 8004398:	b21b      	sxth	r3, r3
 800439a:	8083      	strh	r3, [r0, #4]
      break;
 800439c:	e7e7      	b.n	800436e <HALL_Clear+0xde>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 800439e:	4a0f      	ldr	r2, [pc, #60]	; (80043dc <HALL_Clear+0x14c>)
 80043a0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80043a2:	4694      	mov	ip, r2
 80043a4:	4463      	add	r3, ip
 80043a6:	b21b      	sxth	r3, r3
 80043a8:	8083      	strh	r3, [r0, #4]
      break;
 80043aa:	e7e0      	b.n	800436e <HALL_Clear+0xde>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80043ac:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <HALL_Clear+0x150>)
 80043ae:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80043b0:	4694      	mov	ip, r2
 80043b2:	4463      	add	r3, ip
 80043b4:	b21b      	sxth	r3, r3
 80043b6:	8083      	strh	r3, [r0, #4]
      break;
 80043b8:	e7d9      	b.n	800436e <HALL_Clear+0xde>
      pHandle->SensorIsReliable = false;
 80043ba:	2349      	movs	r3, #73	; 0x49
 80043bc:	2200      	movs	r2, #0
 80043be:	54c2      	strb	r2, [r0, r3]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80043c0:	2204      	movs	r2, #4
 80043c2:	5e83      	ldrsh	r3, [r0, r2]
      break;
 80043c4:	e7d3      	b.n	800436e <HALL_Clear+0xde>
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	08006b04 	.word	0x08006b04
 80043cc:	ffffc001 	.word	0xffffc001
 80043d0:	00003fff 	.word	0x00003fff
 80043d4:	ffff9556 	.word	0xffff9556
 80043d8:	00006aaa 	.word	0x00006aaa
 80043dc:	ffffeaab 	.word	0xffffeaab
 80043e0:	00001555 	.word	0x00001555

080043e4 <HALL_CalcElAngle>:
{
 80043e4:	b510      	push	{r4, lr}
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80043e6:	230e      	movs	r3, #14
 80043e8:	5ec1      	ldrsh	r1, [r0, r3]
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <HALL_CalcElAngle+0x38>)
{
 80043ec:	0002      	movs	r2, r0
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80043ee:	4299      	cmp	r1, r3
 80043f0:	d00e      	beq.n	8004410 <HALL_CalcElAngle+0x2c>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80043f2:	24aa      	movs	r4, #170	; 0xaa
 80043f4:	5b00      	ldrh	r0, [r0, r4]
 80043f6:	b28b      	uxth	r3, r1
 80043f8:	1818      	adds	r0, r3, r0
 80043fa:	5310      	strh	r0, [r2, r4]
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80043fc:	8890      	ldrh	r0, [r2, #4]
 80043fe:	181b      	adds	r3, r3, r0
 8004400:	20ac      	movs	r0, #172	; 0xac
 8004402:	5a10      	ldrh	r0, [r2, r0]
 8004404:	1818      	adds	r0, r3, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8004406:	23a0      	movs	r3, #160	; 0xa0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004408:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800440a:	52d1      	strh	r1, [r2, r3]
 800440c:	8090      	strh	r0, [r2, #4]
}
 800440e:	bd10      	pop	{r4, pc}
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8004410:	21a0      	movs	r1, #160	; 0xa0
 8004412:	8883      	ldrh	r3, [r0, #4]
 8004414:	5a40      	ldrh	r0, [r0, r1]
 8004416:	1818      	adds	r0, r3, r0
 8004418:	b200      	sxth	r0, r0
 800441a:	e7f7      	b.n	800440c <HALL_CalcElAngle+0x28>
 800441c:	00007fff 	.word	0x00007fff

08004420 <HALL_CalcAvrgMecSpeedUnit>:
  if ( pHandle->SensorIsReliable )
 8004420:	2349      	movs	r3, #73	; 0x49
{
 8004422:	b570      	push	{r4, r5, r6, lr}
 8004424:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 8004426:	5cc0      	ldrb	r0, [r0, r3]
{
 8004428:	000d      	movs	r5, r1
  if ( pHandle->SensorIsReliable )
 800442a:	2800      	cmp	r0, #0
 800442c:	d00f      	beq.n	800444e <HALL_CalcAvrgMecSpeedUnit+0x2e>
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 800442e:	22ae      	movs	r2, #174	; 0xae
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004430:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8004432:	5aa2      	ldrh	r2, [r4, r2]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	429a      	cmp	r2, r3
 8004438:	d810      	bhi.n	800445c <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 800443e:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8004440:	0029      	movs	r1, r5
 8004442:	0020      	movs	r0, r4
 8004444:	f001 f942 	bl	80056cc <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004448:	2200      	movs	r2, #0
 800444a:	5eab      	ldrsh	r3, [r5, r2]
 800444c:	e004      	b.n	8004458 <HALL_CalcAvrgMecSpeedUnit+0x38>
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800444e:	78e3      	ldrb	r3, [r4, #3]
    pHandle->_Super.hElSpeedDpp = 0;
 8004450:	81e0      	strh	r0, [r4, #14]
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8004452:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004458:	81a3      	strh	r3, [r4, #12]
}
 800445a:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 800445c:	23a4      	movs	r3, #164	; 0xa4
 800445e:	5ee6      	ldrsh	r6, [r4, r3]
 8004460:	81e6      	strh	r6, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8004462:	2e00      	cmp	r6, #0
 8004464:	d015      	beq.n	8004492 <HALL_CalcAvrgMecSpeedUnit+0x72>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <HALL_CalcAvrgMecSpeedUnit+0x98>)
 8004468:	429e      	cmp	r6, r3
 800446a:	d021      	beq.n	80044b0 <HALL_CalcAvrgMecSpeedUnit+0x90>
          if (pHandle->HallMtpa == true)
 800446c:	23c7      	movs	r3, #199	; 0xc7
 800446e:	5ce3      	ldrb	r3, [r4, r3]
            pHandle->CompSpeed = 0;
 8004470:	2000      	movs	r0, #0
          if (pHandle->HallMtpa == true)
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00f      	beq.n	8004496 <HALL_CalcAvrgMecSpeedUnit+0x76>
 8004476:	23ac      	movs	r3, #172	; 0xac
 8004478:	52e0      	strh	r0, [r4, r3]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800447a:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800447c:	69e3      	ldr	r3, [r4, #28]
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800447e:	4346      	muls	r6, r0
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004480:	7861      	ldrb	r1, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004482:	00b0      	lsls	r0, r6, #2
 8004484:	1980      	adds	r0, r0, r6
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004486:	4359      	muls	r1, r3
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004488:	0040      	lsls	r0, r0, #1
 800448a:	f7fb fec7 	bl	800021c <__divsi3>
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800448e:	8028      	strh	r0, [r5, #0]
 8004490:	e7d6      	b.n	8004440 <HALL_CalcAvrgMecSpeedUnit+0x20>
        *hMecSpeedUnit = 0;
 8004492:	800e      	strh	r6, [r1, #0]
 8004494:	e7d4      	b.n	8004440 <HALL_CalcAvrgMecSpeedUnit+0x20>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8004496:	33aa      	adds	r3, #170	; 0xaa
 8004498:	5ae0      	ldrh	r0, [r4, r3]
 800449a:	88a3      	ldrh	r3, [r4, #4]
 800449c:	1ac0      	subs	r0, r0, r3
 800449e:	23a8      	movs	r3, #168	; 0xa8
 80044a0:	b200      	sxth	r0, r0
 80044a2:	52e0      	strh	r0, [r4, r3]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80044a4:	331c      	adds	r3, #28
 80044a6:	5ae1      	ldrh	r1, [r4, r3]
            ( ( int32_t )( pHandle->DeltaAngle ) /
 80044a8:	f7fb feb8 	bl	800021c <__divsi3>
            pHandle->CompSpeed = ( int16_t )
 80044ac:	b200      	sxth	r0, r0
 80044ae:	e7e2      	b.n	8004476 <HALL_CalcAvrgMecSpeedUnit+0x56>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80044b0:	23b0      	movs	r3, #176	; 0xb0
 80044b2:	5ae3      	ldrh	r3, [r4, r3]
 80044b4:	800b      	strh	r3, [r1, #0]
 80044b6:	e7c3      	b.n	8004440 <HALL_CalcAvrgMecSpeedUnit+0x20>
 80044b8:	00007fff 	.word	0x00007fff

080044bc <HALL_TIMx_CC_IRQHandler>:
{
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	46c6      	mov	lr, r8
  if ( pHandle->SensorIsReliable )
 80044c0:	2349      	movs	r3, #73	; 0x49
{
 80044c2:	b500      	push	{lr}
  if ( pHandle->SensorIsReliable )
 80044c4:	5cc3      	ldrb	r3, [r0, r3]
{
 80044c6:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d041      	beq.n	8004550 <HALL_TIMx_CC_IRQHandler+0x94>
    bPrevHallState = pHandle->HallState;
 80044cc:	23a6      	movs	r3, #166	; 0xa6
 80044ce:	5cc1      	ldrb	r1, [r0, r3]
    PrevDirection = pHandle->Direction;
 80044d0:	3b04      	subs	r3, #4
 80044d2:	56c5      	ldrsb	r5, [r0, r3]
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80044d4:	3b82      	subs	r3, #130	; 0x82
 80044d6:	5cc3      	ldrb	r3, [r0, r3]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d03d      	beq.n	8004558 <HALL_TIMx_CC_IRQHandler+0x9c>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80044dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044de:	6c67      	ldr	r7, [r4, #68]	; 0x44
 80044e0:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80044e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80044e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044e6:	691b      	ldr	r3, [r3, #16]
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80044e8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80044ea:	403b      	ands	r3, r7
 80044ec:	1bdb      	subs	r3, r3, r7
 80044ee:	425f      	negs	r7, r3
 80044f0:	417b      	adcs	r3, r7
 80044f2:	6912      	ldr	r2, [r2, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80044f4:	005f      	lsls	r7, r3, #1
 80044f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044f8:	4006      	ands	r6, r0
 80044fa:	401a      	ands	r2, r3
 80044fc:	1a30      	subs	r0, r6, r0
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	4242      	negs	r2, r0
 8004502:	4150      	adcs	r0, r2
 8004504:	425a      	negs	r2, r3
 8004506:	4153      	adcs	r3, r2
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8004508:	2204      	movs	r2, #4
 800450a:	0080      	lsls	r0, r0, #2
 800450c:	433b      	orrs	r3, r7
 800450e:	4050      	eors	r0, r2
 8004510:	4303      	orrs	r3, r0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	22a6      	movs	r2, #166	; 0xa6
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004516:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004518:	54a3      	strb	r3, [r4, r2]
    switch ( pHandle->HallState )
 800451a:	2b06      	cmp	r3, #6
 800451c:	d803      	bhi.n	8004526 <HALL_TIMx_CC_IRQHandler+0x6a>
 800451e:	4aa6      	ldr	r2, [pc, #664]	; (80047b8 <HALL_TIMx_CC_IRQHandler+0x2fc>)
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	58d3      	ldr	r3, [r2, r3]
 8004524:	469f      	mov	pc, r3
        pHandle->SensorIsReliable = false;
 8004526:	2349      	movs	r3, #73	; 0x49
 8004528:	2200      	movs	r2, #0
 800452a:	54e2      	strb	r2, [r4, r3]
    PrevDirection = pHandle->Direction;
 800452c:	002e      	movs	r6, r5
    if (pHandle->HallMtpa == true)
 800452e:	23c7      	movs	r3, #199	; 0xc7
 8004530:	5ce3      	ldrb	r3, [r4, r3]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HALL_TIMx_CC_IRQHandler+0x80>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8004536:	23aa      	movs	r3, #170	; 0xaa
 8004538:	5ae3      	ldrh	r3, [r4, r3]
 800453a:	80a3      	strh	r3, [r4, #4]
    if ( pHandle->FirstCapt == 0u )
 800453c:	234c      	movs	r3, #76	; 0x4c
 800453e:	5ce2      	ldrb	r2, [r4, r3]
 8004540:	2a00      	cmp	r2, #0
 8004542:	d000      	beq.n	8004546 <HALL_TIMx_CC_IRQHandler+0x8a>
 8004544:	e076      	b.n	8004634 <HALL_TIMx_CC_IRQHandler+0x178>
      pHandle->FirstCapt++;
 8004546:	5ce2      	ldrb	r2, [r4, r3]
 8004548:	3201      	adds	r2, #1
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	54e2      	strb	r2, [r4, r3]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800454e:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004550:	2000      	movs	r0, #0
 8004552:	bc80      	pop	{r7}
 8004554:	46b8      	mov	r8, r7
 8004556:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004558:	6c03      	ldr	r3, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800455a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004560:	691f      	ldr	r7, [r3, #16]
 8004562:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004564:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8004566:	4037      	ands	r7, r6
 8004568:	4002      	ands	r2, r0
 800456a:	1a12      	subs	r2, r2, r0
 800456c:	4250      	negs	r0, r2
 800456e:	4142      	adcs	r2, r0
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004574:	1bbe      	subs	r6, r7, r6
 8004576:	4003      	ands	r3, r0
 8004578:	4277      	negs	r7, r6
 800457a:	417e      	adcs	r6, r7
 800457c:	1a1b      	subs	r3, r3, r0
 800457e:	4258      	negs	r0, r3
 8004580:	4143      	adcs	r3, r0
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004582:	0092      	lsls	r2, r2, #2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8004584:	0076      	lsls	r6, r6, #1
 8004586:	4332      	orrs	r2, r6
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004588:	4313      	orrs	r3, r2
 800458a:	e7c3      	b.n	8004514 <HALL_TIMx_CC_IRQHandler+0x58>
        if ( bPrevHallState == STATE_2 )
 800458c:	2902      	cmp	r1, #2
 800458e:	d100      	bne.n	8004592 <HALL_TIMx_CC_IRQHandler+0xd6>
 8004590:	e0eb      	b.n	800476a <HALL_TIMx_CC_IRQHandler+0x2ae>
        else if ( bPrevHallState == STATE_4 )
 8004592:	2904      	cmp	r1, #4
 8004594:	d1ca      	bne.n	800452c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 8004596:	23a2      	movs	r3, #162	; 0xa2
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800459c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800459e:	4a87      	ldr	r2, [pc, #540]	; (80047bc <HALL_TIMx_CC_IRQHandler+0x300>)
 80045a0:	e039      	b.n	8004616 <HALL_TIMx_CC_IRQHandler+0x15a>
        if ( bPrevHallState == STATE_4 )
 80045a2:	2904      	cmp	r1, #4
 80045a4:	d100      	bne.n	80045a8 <HALL_TIMx_CC_IRQHandler+0xec>
 80045a6:	e0d8      	b.n	800475a <HALL_TIMx_CC_IRQHandler+0x29e>
        else if ( bPrevHallState == STATE_1 )
 80045a8:	2901      	cmp	r1, #1
 80045aa:	d1bf      	bne.n	800452c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 80045ac:	23a2      	movs	r3, #162	; 0xa2
 80045ae:	22ff      	movs	r2, #255	; 0xff
 80045b0:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80045b2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80045b4:	4a82      	ldr	r2, [pc, #520]	; (80047c0 <HALL_TIMx_CC_IRQHandler+0x304>)
 80045b6:	e02e      	b.n	8004616 <HALL_TIMx_CC_IRQHandler+0x15a>
        if ( bPrevHallState == STATE_6 )
 80045b8:	2906      	cmp	r1, #6
 80045ba:	d100      	bne.n	80045be <HALL_TIMx_CC_IRQHandler+0x102>
 80045bc:	e0e5      	b.n	800478a <HALL_TIMx_CC_IRQHandler+0x2ce>
        else if ( bPrevHallState == STATE_5 )
 80045be:	2905      	cmp	r1, #5
 80045c0:	d1b4      	bne.n	800452c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 80045c2:	23a2      	movs	r3, #162	; 0xa2
 80045c4:	22ff      	movs	r2, #255	; 0xff
 80045c6:	2601      	movs	r6, #1
 80045c8:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 80045ca:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80045cc:	3308      	adds	r3, #8
 80045ce:	52e2      	strh	r2, [r4, r3]
 80045d0:	4276      	negs	r6, r6
 80045d2:	e026      	b.n	8004622 <HALL_TIMx_CC_IRQHandler+0x166>
        if ( bPrevHallState == STATE_1 )
 80045d4:	2901      	cmp	r1, #1
 80045d6:	d100      	bne.n	80045da <HALL_TIMx_CC_IRQHandler+0x11e>
 80045d8:	e0d2      	b.n	8004780 <HALL_TIMx_CC_IRQHandler+0x2c4>
        else if ( bPrevHallState == STATE_2 )
 80045da:	2902      	cmp	r1, #2
 80045dc:	d1a6      	bne.n	800452c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 80045de:	23a2      	movs	r3, #162	; 0xa2
 80045e0:	22ff      	movs	r2, #255	; 0xff
 80045e2:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80045e4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80045e6:	4a77      	ldr	r2, [pc, #476]	; (80047c4 <HALL_TIMx_CC_IRQHandler+0x308>)
 80045e8:	e015      	b.n	8004616 <HALL_TIMx_CC_IRQHandler+0x15a>
        if ( bPrevHallState == STATE_3 )
 80045ea:	2903      	cmp	r1, #3
 80045ec:	d100      	bne.n	80045f0 <HALL_TIMx_CC_IRQHandler+0x134>
 80045ee:	e0d8      	b.n	80047a2 <HALL_TIMx_CC_IRQHandler+0x2e6>
        else if ( bPrevHallState == STATE_6 )
 80045f0:	2906      	cmp	r1, #6
 80045f2:	d19b      	bne.n	800452c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 80045f4:	23a2      	movs	r3, #162	; 0xa2
 80045f6:	22ff      	movs	r2, #255	; 0xff
 80045f8:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80045fa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80045fc:	4a72      	ldr	r2, [pc, #456]	; (80047c8 <HALL_TIMx_CC_IRQHandler+0x30c>)
 80045fe:	e00a      	b.n	8004616 <HALL_TIMx_CC_IRQHandler+0x15a>
        if ( bPrevHallState == STATE_5 )
 8004600:	2905      	cmp	r1, #5
 8004602:	d100      	bne.n	8004606 <HALL_TIMx_CC_IRQHandler+0x14a>
 8004604:	e0c7      	b.n	8004796 <HALL_TIMx_CC_IRQHandler+0x2da>
        else if ( bPrevHallState == STATE_3 )
 8004606:	2903      	cmp	r1, #3
 8004608:	d000      	beq.n	800460c <HALL_TIMx_CC_IRQHandler+0x150>
 800460a:	e78f      	b.n	800452c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 800460c:	23a2      	movs	r3, #162	; 0xa2
 800460e:	22ff      	movs	r2, #255	; 0xff
 8004610:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004612:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004614:	4a6d      	ldr	r2, [pc, #436]	; (80047cc <HALL_TIMx_CC_IRQHandler+0x310>)
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004616:	4694      	mov	ip, r2
 8004618:	2601      	movs	r6, #1
 800461a:	22aa      	movs	r2, #170	; 0xaa
 800461c:	4463      	add	r3, ip
 800461e:	52a3      	strh	r3, [r4, r2]
 8004620:	4276      	negs	r6, r6
    if (pHandle->Direction != PrevDirection)
 8004622:	42b5      	cmp	r5, r6
 8004624:	d100      	bne.n	8004628 <HALL_TIMx_CC_IRQHandler+0x16c>
 8004626:	e782      	b.n	800452e <HALL_TIMx_CC_IRQHandler+0x72>
      pHandle->BufferFilled = 0 ;
 8004628:	2300      	movs	r3, #0
 800462a:	224d      	movs	r2, #77	; 0x4d
 800462c:	54a3      	strb	r3, [r4, r2]
      pHandle->SpeedFIFOIdx = 0;
 800462e:	324b      	adds	r2, #75	; 0x4b
 8004630:	54a3      	strb	r3, [r4, r2]
 8004632:	e77c      	b.n	800452e <HALL_TIMx_CC_IRQHandler+0x72>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8004634:	234d      	movs	r3, #77	; 0x4d
 8004636:	2126      	movs	r1, #38	; 0x26
 8004638:	5ce2      	ldrb	r2, [r4, r3]
 800463a:	5c61      	ldrb	r1, [r4, r1]
 800463c:	428a      	cmp	r2, r1
 800463e:	d203      	bcs.n	8004648 <HALL_TIMx_CC_IRQHandler+0x18c>
        pHandle->BufferFilled++;
 8004640:	5ce2      	ldrb	r2, [r4, r3]
 8004642:	3201      	adds	r2, #1
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	54e2      	strb	r2, [r4, r3]
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004648:	254e      	movs	r5, #78	; 0x4e
 800464a:	6b47      	ldr	r7, [r0, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 800464c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 800464e:	b293      	uxth	r3, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004650:	5d62      	ldrb	r2, [r4, r5]
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8004652:	469c      	mov	ip, r3
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004654:	043b      	lsls	r3, r7, #16
 8004656:	0412      	lsls	r2, r2, #16
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	189b      	adds	r3, r3, r2
      if ( pHandle->OVFCounter != 0u )
 800465c:	5d62      	ldrb	r2, [r4, r5]
 800465e:	b2d5      	uxtb	r5, r2
 8004660:	46a8      	mov	r8, r5
 8004662:	2a00      	cmp	r2, #0
 8004664:	d03b      	beq.n	80046de <HALL_TIMx_CC_IRQHandler+0x222>
        hAux = hPrscBuf + 1u;
 8004666:	4662      	mov	r2, ip
 8004668:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 800466a:	b292      	uxth	r2, r2
 800466c:	4353      	muls	r3, r2
        if ( pHandle->RatioInc )
 800466e:	224b      	movs	r2, #75	; 0x4b
 8004670:	5ca5      	ldrb	r5, [r4, r2]
 8004672:	2d00      	cmp	r5, #0
 8004674:	d03e      	beq.n	80046f4 <HALL_TIMx_CC_IRQHandler+0x238>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8004676:	2000      	movs	r0, #0
 8004678:	54a0      	strb	r0, [r4, r2]
        if ( wCaptBuf < pHandle->MinPeriod )
 800467a:	22bc      	movs	r2, #188	; 0xbc
 800467c:	58a2      	ldr	r2, [r4, r2]
 800467e:	429a      	cmp	r2, r3
 8004680:	d829      	bhi.n	80046d6 <HALL_TIMx_CC_IRQHandler+0x21a>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004682:	209c      	movs	r0, #156	; 0x9c
 8004684:	2298      	movs	r2, #152	; 0x98
 8004686:	4684      	mov	ip, r0
 8004688:	5ca2      	ldrb	r2, [r4, r2]
 800468a:	5820      	ldr	r0, [r4, r0]
 800468c:	0095      	lsls	r5, r2, #2
 800468e:	1965      	adds	r5, r4, r5
 8004690:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8004692:	1bc0      	subs	r0, r0, r7
 8004694:	4667      	mov	r7, ip
 8004696:	51e0      	str	r0, [r4, r7]
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8004698:	371c      	adds	r7, #28
 800469a:	59e7      	ldr	r7, [r4, r7]
 800469c:	429f      	cmp	r7, r3
 800469e:	d849      	bhi.n	8004734 <HALL_TIMx_CC_IRQHandler+0x278>
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 80046a0:	4377      	muls	r7, r6
 80046a2:	46b8      	mov	r8, r7
 80046a4:	4640      	mov	r0, r8
          pHandle->SpeedFIFOIdx++;
 80046a6:	3201      	adds	r2, #1
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	6528      	str	r0, [r5, #80]	; 0x50
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 80046ac:	4291      	cmp	r1, r2
 80046ae:	d100      	bne.n	80046b2 <HALL_TIMx_CC_IRQHandler+0x1f6>
 80046b0:	e07d      	b.n	80047ae <HALL_TIMx_CC_IRQHandler+0x2f2>
          pHandle->SpeedFIFOIdx++;
 80046b2:	2098      	movs	r0, #152	; 0x98
 80046b4:	5422      	strb	r2, [r4, r0]
          if ( pHandle->SensorIsReliable) 
 80046b6:	2249      	movs	r2, #73	; 0x49
 80046b8:	5ca2      	ldrb	r2, [r4, r2]
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d037      	beq.n	800472e <HALL_TIMx_CC_IRQHandler+0x272>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80046be:	224d      	movs	r2, #77	; 0x4d
 80046c0:	5ca2      	ldrb	r2, [r4, r2]
 80046c2:	4291      	cmp	r1, r2
 80046c4:	d93d      	bls.n	8004742 <HALL_TIMx_CC_IRQHandler+0x286>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80046c6:	0019      	movs	r1, r3
 80046c8:	23b4      	movs	r3, #180	; 0xb4
 80046ca:	58e0      	ldr	r0, [r4, r3]
 80046cc:	f7fb fd1c 	bl	8000108 <__udivsi3>
 80046d0:	23a4      	movs	r3, #164	; 0xa4
 80046d2:	4346      	muls	r6, r0
 80046d4:	52e6      	strh	r6, [r4, r3]
      pHandle->OVFCounter = 0u;
 80046d6:	234e      	movs	r3, #78	; 0x4e
 80046d8:	2200      	movs	r2, #0
 80046da:	54e2      	strb	r2, [r4, r3]
  return MC_NULL;
 80046dc:	e738      	b.n	8004550 <HALL_TIMx_CC_IRQHandler+0x94>
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80046de:	254a      	movs	r5, #74	; 0x4a
 80046e0:	5d62      	ldrb	r2, [r4, r5]
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	d011      	beq.n	800470a <HALL_TIMx_CC_IRQHandler+0x24e>
          hAux = hPrscBuf + 2u;
 80046e6:	4662      	mov	r2, ip
 80046e8:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 80046ea:	b292      	uxth	r2, r2
 80046ec:	4353      	muls	r3, r2
          pHandle->RatioDec = false;
 80046ee:	4642      	mov	r2, r8
 80046f0:	5562      	strb	r2, [r4, r5]
 80046f2:	e7c2      	b.n	800467a <HALL_TIMx_CC_IRQHandler+0x1be>
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 80046f4:	27ae      	movs	r7, #174	; 0xae
 80046f6:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80046f8:	5be7      	ldrh	r7, [r4, r7]
 80046fa:	42af      	cmp	r7, r5
 80046fc:	d9bd      	bls.n	800467a <HALL_TIMx_CC_IRQHandler+0x1be>
 80046fe:	6a85      	ldr	r5, [r0, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8004700:	3501      	adds	r5, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004702:	6285      	str	r5, [r0, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8004704:	2001      	movs	r0, #1
 8004706:	54a0      	strb	r0, [r4, r2]
 8004708:	e7b7      	b.n	800467a <HALL_TIMx_CC_IRQHandler+0x1be>
          uint16_t hAux = hPrscBuf + 1u;
 800470a:	4662      	mov	r2, ip
 800470c:	3201      	adds	r2, #1
          wCaptBuf *= hAux;
 800470e:	b292      	uxth	r2, r2
 8004710:	4353      	muls	r3, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004712:	22aa      	movs	r2, #170	; 0xaa
 8004714:	b2bf      	uxth	r7, r7
 8004716:	01d2      	lsls	r2, r2, #7
 8004718:	4297      	cmp	r7, r2
 800471a:	d2ae      	bcs.n	800467a <HALL_TIMx_CC_IRQHandler+0x1be>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800471c:	6a82      	ldr	r2, [r0, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 800471e:	2a00      	cmp	r2, #0
 8004720:	d0ab      	beq.n	800467a <HALL_TIMx_CC_IRQHandler+0x1be>
 8004722:	6a82      	ldr	r2, [r0, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8004724:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004726:	6282      	str	r2, [r0, #40]	; 0x28
              pHandle->RatioDec = true;
 8004728:	2201      	movs	r2, #1
 800472a:	5562      	strb	r2, [r4, r5]
 800472c:	e7a5      	b.n	800467a <HALL_TIMx_CC_IRQHandler+0x1be>
            pHandle->AvrElSpeedDpp = 0;
 800472e:	23a4      	movs	r3, #164	; 0xa4
 8004730:	52e2      	strh	r2, [r4, r3]
 8004732:	e7d0      	b.n	80046d6 <HALL_TIMx_CC_IRQHandler+0x21a>
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8004734:	0037      	movs	r7, r6
 8004736:	435f      	muls	r7, r3
 8004738:	46b8      	mov	r8, r7
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800473a:	4667      	mov	r7, ip
 800473c:	4440      	add	r0, r8
 800473e:	51e0      	str	r0, [r4, r7]
 8004740:	e7b0      	b.n	80046a4 <HALL_TIMx_CC_IRQHandler+0x1e8>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8004742:	239c      	movs	r3, #156	; 0x9c
 8004744:	58e0      	ldr	r0, [r4, r3]
 8004746:	f7fb fd69 	bl	800021c <__divsi3>
 800474a:	23b4      	movs	r3, #180	; 0xb4
 800474c:	0001      	movs	r1, r0
 800474e:	58e0      	ldr	r0, [r4, r3]
 8004750:	f7fb fd64 	bl	800021c <__divsi3>
 8004754:	23a4      	movs	r3, #164	; 0xa4
 8004756:	52e0      	strh	r0, [r4, r3]
 8004758:	e7bd      	b.n	80046d6 <HALL_TIMx_CC_IRQHandler+0x21a>
          pHandle->Direction = POSITIVE;
 800475a:	23a2      	movs	r3, #162	; 0xa2
 800475c:	2201      	movs	r2, #1
 800475e:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8004760:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004762:	3308      	adds	r3, #8
 8004764:	2601      	movs	r6, #1
 8004766:	52e2      	strh	r2, [r4, r3]
 8004768:	e75b      	b.n	8004622 <HALL_TIMx_CC_IRQHandler+0x166>
          pHandle->Direction = POSITIVE;
 800476a:	23a2      	movs	r3, #162	; 0xa2
 800476c:	2201      	movs	r2, #1
 800476e:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004770:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004772:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <HALL_TIMx_CC_IRQHandler+0x30c>)
                                                  + S16_60_PHASE_SHIFT );
 8004774:	4694      	mov	ip, r2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8004776:	22aa      	movs	r2, #170	; 0xaa
                                                  + S16_60_PHASE_SHIFT );
 8004778:	4463      	add	r3, ip
 800477a:	2601      	movs	r6, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 800477c:	52a3      	strh	r3, [r4, r2]
 800477e:	e750      	b.n	8004622 <HALL_TIMx_CC_IRQHandler+0x166>
          pHandle->Direction = POSITIVE;
 8004780:	23a2      	movs	r3, #162	; 0xa2
 8004782:	54e1      	strb	r1, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004784:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004786:	4a11      	ldr	r2, [pc, #68]	; (80047cc <HALL_TIMx_CC_IRQHandler+0x310>)
 8004788:	e7f4      	b.n	8004774 <HALL_TIMx_CC_IRQHandler+0x2b8>
          pHandle->Direction = POSITIVE;
 800478a:	23a2      	movs	r3, #162	; 0xa2
 800478c:	2201      	movs	r2, #1
 800478e:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004790:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HALL_TIMx_CC_IRQHandler+0x300>)
 8004794:	e7ee      	b.n	8004774 <HALL_TIMx_CC_IRQHandler+0x2b8>
          pHandle->Direction = POSITIVE;
 8004796:	23a2      	movs	r3, #162	; 0xa2
 8004798:	2201      	movs	r2, #1
 800479a:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800479c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800479e:	4a08      	ldr	r2, [pc, #32]	; (80047c0 <HALL_TIMx_CC_IRQHandler+0x304>)
 80047a0:	e7e8      	b.n	8004774 <HALL_TIMx_CC_IRQHandler+0x2b8>
          pHandle->Direction = POSITIVE;
 80047a2:	23a2      	movs	r3, #162	; 0xa2
 80047a4:	2201      	movs	r2, #1
 80047a6:	54e2      	strb	r2, [r4, r3]
                                                  + S16_60_PHASE_SHIFT );
 80047a8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80047aa:	4a06      	ldr	r2, [pc, #24]	; (80047c4 <HALL_TIMx_CC_IRQHandler+0x308>)
 80047ac:	e7e2      	b.n	8004774 <HALL_TIMx_CC_IRQHandler+0x2b8>
            pHandle->SpeedFIFOIdx = 0u;
 80047ae:	2298      	movs	r2, #152	; 0x98
 80047b0:	2000      	movs	r0, #0
 80047b2:	54a0      	strb	r0, [r4, r2]
 80047b4:	e77f      	b.n	80046b6 <HALL_TIMx_CC_IRQHandler+0x1fa>
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	08006b20 	.word	0x08006b20
 80047bc:	ffffd556 	.word	0xffffd556
 80047c0:	00002aaa 	.word	0x00002aaa
 80047c4:	00007fff 	.word	0x00007fff
 80047c8:	ffffaaab 	.word	0xffffaaab
 80047cc:	00005555 	.word	0x00005555

080047d0 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80047d0:	2349      	movs	r3, #73	; 0x49
{
 80047d2:	b570      	push	{r4, r5, r6, lr}
  if ( pHandle->SensorIsReliable )
 80047d4:	5cc3      	ldrb	r3, [r0, r3]
{
 80047d6:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d018      	beq.n	800480e <HALL_TIMx_UP_IRQHandler+0x3e>
    pHandle->OVFCounter++;
 80047dc:	224e      	movs	r2, #78	; 0x4e
 80047de:	5c83      	ldrb	r3, [r0, r2]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80047e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 80047e2:	3301      	adds	r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	5483      	strb	r3, [r0, r2]
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80047e8:	23c0      	movs	r3, #192	; 0xc0
  return (uint32_t)(READ_REG(TIMx->PSC));
 80047ea:	6a89      	ldr	r1, [r1, #40]	; 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80047ec:	5c85      	ldrb	r5, [r0, r2]
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80047ee:	3274      	adds	r2, #116	; 0x74
 80047f0:	5ac3      	ldrh	r3, [r0, r3]
 80047f2:	5a80      	ldrh	r0, [r0, r2]
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80047f4:	1c4a      	adds	r2, r1, #1
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80047f6:	4358      	muls	r0, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80047f8:	0153      	lsls	r3, r2, #5
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	0099      	lsls	r1, r3, #2
 80047fe:	1889      	adds	r1, r1, r2
 8004800:	00c9      	lsls	r1, r1, #3
 8004802:	f7fb fc81 	bl	8000108 <__udivsi3>
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004806:	b2ed      	uxtb	r5, r5
 8004808:	b280      	uxth	r0, r0
 800480a:	4285      	cmp	r5, r0
 800480c:	d201      	bcs.n	8004812 <HALL_TIMx_UP_IRQHandler+0x42>
}
 800480e:	2000      	movs	r0, #0
 8004810:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->_Super.hElSpeedDpp = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	81e3      	strh	r3, [r4, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004816:	3320      	adds	r3, #32
 8004818:	5ce3      	ldrb	r3, [r4, r3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d120      	bne.n	8004860 <HALL_TIMx_UP_IRQHandler+0x90>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800481e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004820:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8004822:	691a      	ldr	r2, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004826:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004828:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800482a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800482c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800482e:	4032      	ands	r2, r6
 8004830:	4005      	ands	r5, r0
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	1b92      	subs	r2, r2, r6
 8004836:	1a28      	subs	r0, r5, r0
 8004838:	400b      	ands	r3, r1
 800483a:	4256      	negs	r6, r2
 800483c:	4172      	adcs	r2, r6
 800483e:	4245      	negs	r5, r0
 8004840:	4168      	adcs	r0, r5
 8004842:	1a5b      	subs	r3, r3, r1
 8004844:	4259      	negs	r1, r3
 8004846:	414b      	adcs	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004848:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800484a:	0040      	lsls	r0, r0, #1
 800484c:	4302      	orrs	r2, r0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800484e:	4313      	orrs	r3, r2
 8004850:	22a6      	movs	r2, #166	; 0xa6
 8004852:	54a3      	strb	r3, [r4, r2]
  switch ( pHandle->HallState )
 8004854:	2b06      	cmp	r3, #6
 8004856:	d86a      	bhi.n	800492e <HALL_TIMx_UP_IRQHandler+0x15e>
 8004858:	4a39      	ldr	r2, [pc, #228]	; (8004940 <HALL_TIMx_UP_IRQHandler+0x170>)
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	58d3      	ldr	r3, [r2, r3]
 800485e:	469f      	mov	pc, r3
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004862:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8004864:	6918      	ldr	r0, [r3, #16]
 8004866:	6c23      	ldr	r3, [r4, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004868:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	6912      	ldr	r2, [r2, #16]
 800486e:	402b      	ands	r3, r5
 8004870:	1b5b      	subs	r3, r3, r5
 8004872:	425d      	negs	r5, r3
 8004874:	416b      	adcs	r3, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004876:	005d      	lsls	r5, r3, #1
 8004878:	6b63      	ldr	r3, [r4, #52]	; 0x34
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800487a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800487c:	401a      	ands	r2, r3
 800487e:	4008      	ands	r0, r1
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	425a      	negs	r2, r3
 8004884:	4153      	adcs	r3, r2
 8004886:	1a42      	subs	r2, r0, r1
 8004888:	4251      	negs	r1, r2
 800488a:	414a      	adcs	r2, r1
 800488c:	2104      	movs	r1, #4
 800488e:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004890:	432b      	orrs	r3, r5
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004892:	404a      	eors	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004894:	4313      	orrs	r3, r2
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e7da      	b.n	8004850 <HALL_TIMx_UP_IRQHandler+0x80>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800489a:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <HALL_TIMx_UP_IRQHandler+0x174>)
 800489c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800489e:	4694      	mov	ip, r2
 80048a0:	4463      	add	r3, ip
 80048a2:	b21b      	sxth	r3, r3
 80048a4:	80a3      	strh	r3, [r4, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80048a6:	22aa      	movs	r2, #170	; 0xaa
 80048a8:	52a3      	strh	r3, [r4, r2]
      pHandle->OVFCounter = 0u;
 80048aa:	2300      	movs	r3, #0
 80048ac:	3a5c      	subs	r2, #92	; 0x5c
 80048ae:	54a3      	strb	r3, [r4, r2]
      pHandle->FirstCapt = 0u;
 80048b0:	3a02      	subs	r2, #2
 80048b2:	54a3      	strb	r3, [r4, r2]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80048b4:	3326      	adds	r3, #38	; 0x26
 80048b6:	5ce0      	ldrb	r0, [r4, r3]
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d03e      	beq.n	800493a <HALL_TIMx_UP_IRQHandler+0x16a>
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80048bc:	3392      	adds	r3, #146	; 0x92
 80048be:	0022      	movs	r2, r4
 80048c0:	58e1      	ldr	r1, [r4, r3]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80048c2:	2300      	movs	r3, #0
 80048c4:	3250      	adds	r2, #80	; 0x50
 80048c6:	3301      	adds	r3, #1
 80048c8:	b2db      	uxtb	r3, r3
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80048ca:	c202      	stmia	r2!, {r1}
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80048cc:	4283      	cmp	r3, r0
 80048ce:	d1fa      	bne.n	80048c6 <HALL_TIMx_UP_IRQHandler+0xf6>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80048d0:	434b      	muls	r3, r1
      pHandle->BufferFilled = 0 ;
 80048d2:	2200      	movs	r2, #0
 80048d4:	214d      	movs	r1, #77	; 0x4d
 80048d6:	5462      	strb	r2, [r4, r1]
      pHandle->AvrElSpeedDpp = 0;
 80048d8:	3157      	adds	r1, #87	; 0x57
 80048da:	5262      	strh	r2, [r4, r1]
      pHandle->SpeedFIFOIdx = 0;
 80048dc:	2100      	movs	r1, #0
 80048de:	3298      	adds	r2, #152	; 0x98
 80048e0:	54a1      	strb	r1, [r4, r2]
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80048e2:	3204      	adds	r2, #4
 80048e4:	50a3      	str	r3, [r4, r2]
 80048e6:	e792      	b.n	800480e <HALL_TIMx_UP_IRQHandler+0x3e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HALL_TIMx_UP_IRQHandler+0x178>)
 80048ea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80048ec:	4694      	mov	ip, r2
 80048ee:	4463      	add	r3, ip
 80048f0:	b21b      	sxth	r3, r3
 80048f2:	80a3      	strh	r3, [r4, #4]
      break;
 80048f4:	e7d7      	b.n	80048a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80048f6:	4a15      	ldr	r2, [pc, #84]	; (800494c <HALL_TIMx_UP_IRQHandler+0x17c>)
 80048f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80048fa:	4694      	mov	ip, r2
 80048fc:	4463      	add	r3, ip
 80048fe:	b21b      	sxth	r3, r3
 8004900:	80a3      	strh	r3, [r4, #4]
      break;
 8004902:	e7d0      	b.n	80048a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004904:	4a12      	ldr	r2, [pc, #72]	; (8004950 <HALL_TIMx_UP_IRQHandler+0x180>)
 8004906:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004908:	4694      	mov	ip, r2
 800490a:	4463      	add	r3, ip
 800490c:	b21b      	sxth	r3, r3
 800490e:	80a3      	strh	r3, [r4, #4]
      break;
 8004910:	e7c9      	b.n	80048a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004912:	4a10      	ldr	r2, [pc, #64]	; (8004954 <HALL_TIMx_UP_IRQHandler+0x184>)
 8004914:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004916:	4694      	mov	ip, r2
 8004918:	4463      	add	r3, ip
 800491a:	b21b      	sxth	r3, r3
 800491c:	80a3      	strh	r3, [r4, #4]
      break;
 800491e:	e7c2      	b.n	80048a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004920:	4a0d      	ldr	r2, [pc, #52]	; (8004958 <HALL_TIMx_UP_IRQHandler+0x188>)
 8004922:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004924:	4694      	mov	ip, r2
 8004926:	4463      	add	r3, ip
 8004928:	b21b      	sxth	r3, r3
 800492a:	80a3      	strh	r3, [r4, #4]
      break;
 800492c:	e7bb      	b.n	80048a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 800492e:	2349      	movs	r3, #73	; 0x49
 8004930:	2200      	movs	r2, #0
 8004932:	54e2      	strb	r2, [r4, r3]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004934:	2204      	movs	r2, #4
 8004936:	5ea3      	ldrsh	r3, [r4, r2]
      break;
 8004938:	e7b5      	b.n	80048a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800493a:	2300      	movs	r3, #0
 800493c:	e7c9      	b.n	80048d2 <HALL_TIMx_UP_IRQHandler+0x102>
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	08006b3c 	.word	0x08006b3c
 8004944:	ffffc001 	.word	0xffffc001
 8004948:	00001555 	.word	0x00001555
 800494c:	ffffeaab 	.word	0xffffeaab
 8004950:	00006aaa 	.word	0x00006aaa
 8004954:	ffff9556 	.word	0xffff9556
 8004958:	00003fff 	.word	0x00003fff

0800495c <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 800495c:	b570      	push	{r4, r5, r6, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 800495e:	2580      	movs	r5, #128	; 0x80
 8004960:	006d      	lsls	r5, r5, #1
 8004962:	002a      	movs	r2, r5
 8004964:	2100      	movs	r1, #0
{
 8004966:	0004      	movs	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8004968:	f001 f9f9 	bl	8005d5e <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
  pHandle->hLastMeasBufferIndex = 0u;
 800496c:	2281      	movs	r2, #129	; 0x81
  pHandle->hNextMeasBufferIndex = 0u;
 800496e:	2300      	movs	r3, #0
  pHandle->hLastMeasBufferIndex = 0u;
 8004970:	0052      	lsls	r2, r2, #1
  pHandle->hNextMeasBufferIndex = 0u;
 8004972:	5363      	strh	r3, [r4, r5]
  pHandle->hLastMeasBufferIndex = 0u;
 8004974:	52a3      	strh	r3, [r4, r2]

}
 8004976:	bd70      	pop	{r4, r5, r6, pc}

08004978 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004978:	2280      	movs	r2, #128	; 0x80
{
 800497a:	b570      	push	{r4, r5, r6, lr}
 800497c:	0005      	movs	r5, r0
 800497e:	0008      	movs	r0, r1
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004980:	0052      	lsls	r2, r2, #1
 8004982:	5aab      	ldrh	r3, [r5, r2]
 8004984:	0059      	lsls	r1, r3, #1
 8004986:	5348      	strh	r0, [r1, r5]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8004988:	2181      	movs	r1, #129	; 0x81
 800498a:	0049      	lsls	r1, r1, #1
 800498c:	526b      	strh	r3, [r5, r1]
  pHandle->hNextMeasBufferIndex++;
 800498e:	3301      	adds	r3, #1
 8004990:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8004992:	2b7f      	cmp	r3, #127	; 0x7f
 8004994:	d900      	bls.n	8004998 <MPM_CalcElMotorPower+0x20>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004996:	2300      	movs	r3, #0
 8004998:	52ab      	strh	r3, [r5, r2]
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800499a:	002b      	movs	r3, r5
  int32_t wAux = 0;
 800499c:	2200      	movs	r2, #0
 800499e:	1c6c      	adds	r4, r5, #1
 80049a0:	34ff      	adds	r4, #255	; 0xff
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80049a2:	2600      	movs	r6, #0
 80049a4:	5f99      	ldrsh	r1, [r3, r6]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80049a6:	3302      	adds	r3, #2
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80049a8:	1852      	adds	r2, r2, r1
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	d1f9      	bne.n	80049a2 <MPM_CalcElMotorPower+0x2a>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80049ae:	237f      	movs	r3, #127	; 0x7f
 80049b0:	17d1      	asrs	r1, r2, #31
 80049b2:	400b      	ands	r3, r1
 80049b4:	189a      	adds	r2, r3, r2
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80049b6:	2382      	movs	r3, #130	; 0x82
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80049b8:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	52ea      	strh	r2, [r5, r3]
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80049be:	bd70      	pop	{r4, r5, r6, pc}

080049c0 <MPM_GetAvrgElMotorPowerW>:
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
 80049c0:	2382      	movs	r3, #130	; 0x82
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	5ec0      	ldrsh	r0, [r0, r3]
}
 80049c6:	4770      	bx	lr

080049c8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80049c8:	8a02      	ldrh	r2, [r0, #16]
 80049ca:	8b41      	ldrh	r1, [r0, #26]
{
 80049cc:	0003      	movs	r3, r0
  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80049ce:	4291      	cmp	r1, r2
 80049d0:	d306      	bcc.n	80049e0 <NTC_SetFaultState+0x18>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80049d2:	8b81      	ldrh	r1, [r0, #28]
  {
    hFault = MC_NO_ERROR;
 80049d4:	2000      	movs	r0, #0
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80049d6:	4291      	cmp	r1, r2
 80049d8:	d900      	bls.n	80049dc <NTC_SetFaultState+0x14>
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80049da:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80049dc:	8ad8      	ldrh	r0, [r3, #22]
 80049de:	e7fc      	b.n	80049da <NTC_SetFaultState+0x12>
    hFault = MC_OVER_TEMP;
 80049e0:	2008      	movs	r0, #8
 80049e2:	e7fa      	b.n	80049da <NTC_SetFaultState+0x12>

080049e4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80049e4:	2300      	movs	r3, #0
 80049e6:	8203      	strh	r3, [r0, #16]
}
 80049e8:	4770      	bx	lr
 80049ea:	46c0      	nop			; (mov r8, r8)

080049ec <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 80049ec:	7803      	ldrb	r3, [r0, #0]
{
 80049ee:	b510      	push	{r4, lr}
 80049f0:	0004      	movs	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d004      	beq.n	8004a00 <NTC_Init+0x14>
    pHandle->hFaultState = MC_NO_ERROR;
 80049f6:	2300      	movs	r3, #0
 80049f8:	82c3      	strh	r3, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80049fa:	8a43      	ldrh	r3, [r0, #18]
 80049fc:	8203      	strh	r3, [r0, #16]
}
 80049fe:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004a00:	3004      	adds	r0, #4
 8004a02:	f7fc ff0b 	bl	800181c <RCM_RegisterRegConv>
 8004a06:	2326      	movs	r3, #38	; 0x26
 8004a08:	54e0      	strb	r0, [r4, r3]
    NTC_Clear( pHandle );
 8004a0a:	0020      	movs	r0, r4
 8004a0c:	f7ff ffea 	bl	80049e4 <NTC_Clear>
 8004a10:	e7f5      	b.n	80049fe <NTC_Init+0x12>
 8004a12:	46c0      	nop			; (mov r8, r8)

08004a14 <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004a14:	7803      	ldrb	r3, [r0, #0]
{
 8004a16:	b510      	push	{r4, lr}
 8004a18:	0004      	movs	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <NTC_CalcAvTemp+0x12>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	82c3      	strh	r3, [r0, #22]
 8004a22:	2000      	movs	r0, #0
  }

  return ( pHandle->hFaultState );
}
 8004a24:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004a26:	3326      	adds	r3, #38	; 0x26
 8004a28:	5cc0      	ldrb	r0, [r0, r3]
 8004a2a:	f7fc ff91 	bl	8001950 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <NTC_CalcAvTemp+0x3c>)
 8004a30:	4298      	cmp	r0, r3
 8004a32:	d007      	beq.n	8004a44 <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004a34:	8b21      	ldrh	r1, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004a36:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004a38:	1e4b      	subs	r3, r1, #1
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004a3a:	4353      	muls	r3, r2
      wtemp += hAux;
 8004a3c:	18c0      	adds	r0, r0, r3
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004a3e:	f7fb fb63 	bl	8000108 <__udivsi3>
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004a42:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004a44:	0020      	movs	r0, r4
 8004a46:	f7ff ffbf 	bl	80049c8 <NTC_SetFaultState>
 8004a4a:	82e0      	strh	r0, [r4, #22]
 8004a4c:	e7ea      	b.n	8004a24 <NTC_CalcAvTemp+0x10>
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	0000ffff 	.word	0x0000ffff

08004a54 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004a54:	7803      	ldrb	r3, [r0, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10e      	bne.n	8004a78 <NTC_GetAvTemp_C+0x24>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004a5a:	6a02      	ldr	r2, [r0, #32]
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004a5c:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004a5e:	1a9b      	subs	r3, r3, r2
    wTemp *= pHandle->hSensitivity;
 8004a60:	221e      	movs	r2, #30
 8004a62:	5e81      	ldrsh	r1, [r0, r2]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004a64:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp *= pHandle->hSensitivity;
 8004a66:	4359      	muls	r1, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004a68:	17ca      	asrs	r2, r1, #31
 8004a6a:	0412      	lsls	r2, r2, #16
 8004a6c:	0c13      	lsrs	r3, r2, #16
 8004a6e:	185b      	adds	r3, r3, r1
 8004a70:	141b      	asrs	r3, r3, #16
 8004a72:	18c0      	adds	r0, r0, r3
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
 8004a74:	b200      	sxth	r0, r0
}
 8004a76:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8004a78:	8a80      	ldrh	r0, [r0, #20]
 8004a7a:	e7fb      	b.n	8004a74 <NTC_GetAvTemp_C+0x20>

08004a7c <PID_HandleInit>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004a7c:	6803      	ldr	r3, [r0, #0]
 8004a7e:	6043      	str	r3, [r0, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004a80:	8c03      	ldrh	r3, [r0, #32]
 8004a82:	8443      	strh	r3, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8004a88:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004a8a:	4770      	bx	lr

08004a8c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004a8c:	8081      	strh	r1, [r0, #4]
}
 8004a8e:	4770      	bx	lr

08004a90 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004a90:	80c1      	strh	r1, [r0, #6]
}
 8004a92:	4770      	bx	lr

08004a94 <PID_GetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
 8004a94:	2304      	movs	r3, #4
 8004a96:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004a98:	4770      	bx	lr
 8004a9a:	46c0      	nop			; (mov r8, r8)

08004a9c <PID_GetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
 8004a9c:	2306      	movs	r3, #6
 8004a9e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004aa0:	4770      	bx	lr
 8004aa2:	46c0      	nop			; (mov r8, r8)

08004aa4 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004aa4:	6081      	str	r1, [r0, #8]

  return;
}
 8004aa6:	4770      	bx	lr

08004aa8 <PID_GetKPDivisor>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
 8004aa8:	8b00      	ldrh	r0, [r0, #24]
}
 8004aaa:	4770      	bx	lr

08004aac <PID_GetKIDivisor>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
 8004aac:	8b40      	ldrh	r0, [r0, #26]
}
 8004aae:	4770      	bx	lr

08004ab0 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004ab0:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8004ab2:	4770      	bx	lr

08004ab4 <PID_GetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
 8004ab4:	2322      	movs	r3, #34	; 0x22
 8004ab6:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004ab8:	4770      	bx	lr
 8004aba:	46c0      	nop			; (mov r8, r8)

08004abc <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 8004abc:	0003      	movs	r3, r0
 8004abe:	b570      	push	{r4, r5, r6, lr}
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004ac0:	2216      	movs	r2, #22
 8004ac2:	5e9e      	ldrsh	r6, [r3, r2]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004ac4:	2214      	movs	r2, #20
 8004ac6:	5e80      	ldrsh	r0, [r0, r2]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004ac8:	2406      	movs	r4, #6
 8004aca:	5f1d      	ldrsh	r5, [r3, r4]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004acc:	2404      	movs	r4, #4
 8004ace:	5f1a      	ldrsh	r2, [r3, r4]
 8004ad0:	2400      	movs	r4, #0
 8004ad2:	434a      	muls	r2, r1
  if ( pHandle->hKiGain == 0 )
 8004ad4:	2d00      	cmp	r5, #0
 8004ad6:	d00b      	beq.n	8004af0 <PI_Controller+0x34>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004ad8:	4369      	muls	r1, r5
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004ada:	689c      	ldr	r4, [r3, #8]

    if ( wIntegral_sum_temp < 0 )
 8004adc:	1865      	adds	r5, r4, r1
 8004ade:	d41b      	bmi.n	8004b18 <PI_Controller+0x5c>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8004ae0:	2c00      	cmp	r4, #0
 8004ae2:	db24      	blt.n	8004b2e <PI_Controller+0x72>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004ae4:	68dc      	ldr	r4, [r3, #12]
 8004ae6:	42ac      	cmp	r4, r5
 8004ae8:	db02      	blt.n	8004af0 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004aea:	691c      	ldr	r4, [r3, #16]
 8004aec:	42ac      	cmp	r4, r5
 8004aee:	dd1c      	ble.n	8004b2a <PI_Controller+0x6e>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004af0:	0025      	movs	r5, r4
 8004af2:	8b99      	ldrh	r1, [r3, #28]
 8004af4:	410a      	asrs	r2, r1
 8004af6:	8bd9      	ldrh	r1, [r3, #30]
 8004af8:	410d      	asrs	r5, r1
 8004afa:	1952      	adds	r2, r2, r5
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004afc:	4290      	cmp	r0, r2
 8004afe:	da03      	bge.n	8004b08 <PI_Controller+0x4c>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8004b00:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004b02:	18a4      	adds	r4, r4, r2
 8004b04:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8004b08:	4296      	cmp	r6, r2
 8004b0a:	dd03      	ble.n	8004b14 <PI_Controller+0x58>
    wDischarge = hLowerOutputLimit - wOutput_32;
 8004b0c:	1ab2      	subs	r2, r6, r2
 8004b0e:	0030      	movs	r0, r6
  pHandle->wIntegralTerm += wDischarge;
 8004b10:	18a4      	adds	r4, r4, r2
 8004b12:	e7f7      	b.n	8004b04 <PI_Controller+0x48>
  return ( ( int16_t )( wOutput_32 ) );
 8004b14:	b210      	sxth	r0, r2
 8004b16:	e7f5      	b.n	8004b04 <PI_Controller+0x48>
      if ( pHandle->wIntegralTerm > 0 )
 8004b18:	2c00      	cmp	r4, #0
 8004b1a:	dde3      	ble.n	8004ae4 <PI_Controller+0x28>
        if ( wIntegral_Term > 0 )
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	dde1      	ble.n	8004ae4 <PI_Controller+0x28>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004b20:	68dc      	ldr	r4, [r3, #12]
 8004b22:	4905      	ldr	r1, [pc, #20]	; (8004b38 <PI_Controller+0x7c>)
          wIntegral_sum_temp = INT32_MAX;
 8004b24:	0025      	movs	r5, r4
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004b26:	428c      	cmp	r4, r1
 8004b28:	d1e2      	bne.n	8004af0 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8004b2a:	002c      	movs	r4, r5
 8004b2c:	e7e0      	b.n	8004af0 <PI_Controller+0x34>
        if ( wIntegral_Term < 0 )
 8004b2e:	2900      	cmp	r1, #0
 8004b30:	dad8      	bge.n	8004ae4 <PI_Controller+0x28>
          wIntegral_sum_temp = -INT32_MAX;
 8004b32:	4d02      	ldr	r5, [pc, #8]	; (8004b3c <PI_Controller+0x80>)
 8004b34:	e7d6      	b.n	8004ae4 <PI_Controller+0x28>
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	7fffffff 	.word	0x7fffffff
 8004b3c:	80000001 	.word	0x80000001

08004b40 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004b40:	2386      	movs	r3, #134	; 0x86
{
 8004b42:	b570      	push	{r4, r5, r6, lr}
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	58c3      	ldr	r3, [r0, r3]
{
 8004b48:	0005      	movs	r5, r0
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004b4a:	220c      	movs	r2, #12
 8004b4c:	5e9e      	ldrsh	r6, [r3, r2]
 8004b4e:	2216      	movs	r2, #22
 8004b50:	5e9c      	ldrsh	r4, [r3, r2]
 8004b52:	4374      	muls	r4, r6
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004b54:	220e      	movs	r2, #14
 8004b56:	5e9e      	ldrsh	r6, [r3, r2]
 8004b58:	2218      	movs	r2, #24
 8004b5a:	5e9b      	ldrsh	r3, [r3, r2]
 8004b5c:	435e      	muls	r6, r3
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004b5e:	2384      	movs	r3, #132	; 0x84
 8004b60:	005b      	lsls	r3, r3, #1
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004b62:	19a6      	adds	r6, r4, r6
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004b64:	58c4      	ldr	r4, [r0, r3]
 8004b66:	3308      	adds	r3, #8
 8004b68:	58c0      	ldr	r0, [r0, r3]
 8004b6a:	f7ff faa1 	bl	80040b0 <VBS_GetAvBusVoltage_V>
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004b6e:	2196      	movs	r1, #150	; 0x96
  wAux /= 65536;
 8004b70:	17f3      	asrs	r3, r6, #31
 8004b72:	041b      	lsls	r3, r3, #16
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004b74:	4360      	muls	r0, r4
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004b76:	0089      	lsls	r1, r1, #2
  wAux /= 65536;
 8004b78:	0c1c      	lsrs	r4, r3, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004b7a:	f7fb fb4f 	bl	800021c <__divsi3>

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004b7e:	21a0      	movs	r1, #160	; 0xa0
  wAux /= 65536;
 8004b80:	19a4      	adds	r4, r4, r6
 8004b82:	1424      	asrs	r4, r4, #16
  wAux3 = wAux * wAux2;
 8004b84:	4344      	muls	r4, r0
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004b86:	0060      	lsls	r0, r4, #1
 8004b88:	1900      	adds	r0, r0, r4
  wAux3 /= 65536;
 8004b8a:	0309      	lsls	r1, r1, #12
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004b8c:	0040      	lsls	r0, r0, #1
  wAux3 /= 65536;
 8004b8e:	f7fb fb45 	bl	800021c <__divsi3>

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004b92:	b201      	sxth	r1, r0
 8004b94:	0028      	movs	r0, r5
 8004b96:	f7ff feef 	bl	8004978 <MPM_CalcElMotorPower>

}
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}

08004b9c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8004b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8004b9e:	2560      	movs	r5, #96	; 0x60
 8004ba0:	002e      	movs	r6, r5
 8004ba2:	6804      	ldr	r4, [r0, #0]
 8004ba4:	4026      	ands	r6, r4
  if (counter_mode == 0U)
 8004ba6:	4225      	tst	r5, r4
 8004ba8:	d119      	bne.n	8004bde <waitForPolarizationEnd+0x42>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004baa:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004bac:	3201      	adds	r2, #1
 8004bae:	0855      	lsrs	r5, r2, #1
 8004bb0:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004bb2:	2703      	movs	r7, #3
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004bb4:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004bb6:	2602      	movs	r6, #2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004bb8:	427f      	negs	r7, r7
 8004bba:	6107      	str	r7, [r0, #16]
  while (*cnt < NB_CONVERSIONS)
 8004bbc:	781c      	ldrb	r4, [r3, #0]
 8004bbe:	2c0f      	cmp	r4, #15
 8004bc0:	d80c      	bhi.n	8004bdc <waitForPolarizationEnd+0x40>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004bc2:	6904      	ldr	r4, [r0, #16]
 8004bc4:	4226      	tst	r6, r4
 8004bc6:	d0f9      	beq.n	8004bbc <waitForPolarizationEnd+0x20>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8004bc8:	3201      	adds	r2, #1
 8004bca:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004bcc:	6107      	str	r7, [r0, #16]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004bce:	4295      	cmp	r5, r2
 8004bd0:	d8f4      	bhi.n	8004bbc <waitForPolarizationEnd+0x20>
      {
        if (*cnt < NB_CONVERSIONS)
 8004bd2:	781c      	ldrb	r4, [r3, #0]
 8004bd4:	2c0f      	cmp	r4, #15
 8004bd6:	d8f1      	bhi.n	8004bbc <waitForPolarizationEnd+0x20>
        {
          *SWerror = 1u;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8004bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004bde:	2e60      	cmp	r6, #96	; 0x60
 8004be0:	d1e4      	bne.n	8004bac <waitForPolarizationEnd+0x10>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004be2:	3201      	adds	r2, #1
 8004be4:	0155      	lsls	r5, r2, #5
 8004be6:	e7e4      	b.n	8004bb2 <waitForPolarizationEnd+0x16>

08004be8 <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 8004be8:	b510      	push	{r4, lr}
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8004bea:	6843      	ldr	r3, [r0, #4]
 8004bec:	4798      	blx	r3
}
 8004bee:	bd10      	pop	{r4, pc}

08004bf0 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	9101      	str	r1, [sp, #4]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004bf6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8004bf8:	b20b      	sxth	r3, r1
 8004bfa:	435a      	muls	r2, r3
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004bfc:	2350      	movs	r3, #80	; 0x50
 8004bfe:	5ac6      	ldrh	r6, [r0, r3]
 8004c00:	1409      	asrs	r1, r1, #16
 8004c02:	4371      	muls	r1, r6
 8004c04:	0049      	lsls	r1, r1, #1
 8004c06:	424f      	negs	r7, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8004c08:	1a51      	subs	r1, r2, r1
 8004c0a:	0fcc      	lsrs	r4, r1, #31
 8004c0c:	1864      	adds	r4, r4, r1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004c0e:	1aba      	subs	r2, r7, r2
  wY = ( wUBeta + wUAlpha ) / 2;
 8004c10:	1063      	asrs	r3, r4, #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004c12:	0fd4      	lsrs	r4, r2, #31
 8004c14:	18a4      	adds	r4, r4, r2
 8004c16:	1064      	asrs	r4, r4, #1

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8004c18:	1c4d      	adds	r5, r1, #1
 8004c1a:	db51      	blt.n	8004cc0 <PWMC_SetPhaseVoltage+0xd0>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8004c1c:	1c55      	adds	r5, r2, #1
 8004c1e:	db31      	blt.n	8004c84 <PWMC_SetPhaseVoltage+0x94>
    {
      pHandle->Sector = SECTOR_2;
 8004c20:	253a      	movs	r5, #58	; 0x3a
 8004c22:	2701      	movs	r7, #1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c24:	1b1c      	subs	r4, r3, r4
      pHandle->Sector = SECTOR_2;
 8004c26:	5547      	strb	r7, [r0, r5]
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c28:	17e5      	asrs	r5, r4, #31
 8004c2a:	03ad      	lsls	r5, r5, #14
 8004c2c:	0bab      	lsrs	r3, r5, #14
      wTimePhB = wTimePhA + wZ / 131072;
      wTimePhC = wTimePhA - wY / 131072;
 8004c2e:	17cd      	asrs	r5, r1, #31
 8004c30:	03ad      	lsls	r5, r5, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c32:	191b      	adds	r3, r3, r4
      wTimePhC = wTimePhA - wY / 131072;
 8004c34:	0bad      	lsrs	r5, r5, #14
 8004c36:	1869      	adds	r1, r5, r1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c38:	149b      	asrs	r3, r3, #18
 8004c3a:	08b6      	lsrs	r6, r6, #2
 8004c3c:	199b      	adds	r3, r3, r6
      wTimePhC = wTimePhA - wY / 131072;
 8004c3e:	1489      	asrs	r1, r1, #18
 8004c40:	1a5d      	subs	r5, r3, r1
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8004c42:	2140      	movs	r1, #64	; 0x40
      wTimePhB = wTimePhA + wZ / 131072;
 8004c44:	17d4      	asrs	r4, r2, #31
 8004c46:	03a4      	lsls	r4, r4, #14
 8004c48:	0ba4      	lsrs	r4, r4, #14
 8004c4a:	18a2      	adds	r2, r4, r2
 8004c4c:	1492      	asrs	r2, r2, #18
 8004c4e:	18d2      	adds	r2, r2, r3
      pHandle->lowDuty = wTimePhB;
 8004c50:	8782      	strh	r2, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8004c52:	87c3      	strh	r3, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8004c54:	5245      	strh	r5, [r0, r1]
        pHandle->midDuty = wTimePhB;
        pHandle->highDuty = wTimePhC;
      }
  }

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004c56:	43dc      	mvns	r4, r3
 8004c58:	17e4      	asrs	r4, r4, #31
 8004c5a:	4023      	ands	r3, r4
 8004c5c:	43d4      	mvns	r4, r2
 8004c5e:	43e9      	mvns	r1, r5
 8004c60:	17e4      	asrs	r4, r4, #31
 8004c62:	4022      	ands	r2, r4
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8004c64:	244e      	movs	r4, #78	; 0x4e
 8004c66:	17c9      	asrs	r1, r1, #31
 8004c68:	4029      	ands	r1, r5
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	b289      	uxth	r1, r1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004c70:	8643      	strh	r3, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8004c72:	8682      	strh	r2, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8004c74:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8004c76:	5b04      	ldrh	r4, [r0, r4]
 8004c78:	2c01      	cmp	r4, #1
 8004c7a:	d03d      	beq.n	8004cf8 <PWMC_SetPhaseVoltage+0x108>
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004c7c:	6983      	ldr	r3, [r0, #24]
 8004c7e:	4798      	blx	r3
}
 8004c80:	b003      	add	sp, #12
 8004c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( wX <= 0 )
 8004c84:	2f00      	cmp	r7, #0
 8004c86:	dd6a      	ble.n	8004d5e <PWMC_SetPhaseVoltage+0x16e>
        pHandle->Sector = SECTOR_1;
 8004c88:	233a      	movs	r3, #58	; 0x3a
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	54c1      	strb	r1, [r0, r3]
        wTimePhB = wTimePhA + wZ / 131072;
 8004c8e:	17d1      	asrs	r1, r2, #31
 8004c90:	0389      	lsls	r1, r1, #14
 8004c92:	0b89      	lsrs	r1, r1, #14
 8004c94:	188a      	adds	r2, r1, r2
        wTimePhC = wTimePhB - wX / 131072;
 8004c96:	17f9      	asrs	r1, r7, #31
 8004c98:	03c9      	lsls	r1, r1, #15
 8004c9a:	0bc9      	lsrs	r1, r1, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004c9c:	1b3c      	subs	r4, r7, r4
        wTimePhC = wTimePhB - wX / 131072;
 8004c9e:	19cf      	adds	r7, r1, r7
        pHandle->highDuty = wTimePhC;
 8004ca0:	2140      	movs	r1, #64	; 0x40
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004ca2:	17e3      	asrs	r3, r4, #31
 8004ca4:	039b      	lsls	r3, r3, #14
 8004ca6:	0b9b      	lsrs	r3, r3, #14
 8004ca8:	191c      	adds	r4, r3, r4
 8004caa:	14a4      	asrs	r4, r4, #18
 8004cac:	08b3      	lsrs	r3, r6, #2
 8004cae:	18e3      	adds	r3, r4, r3
        wTimePhB = wTimePhA + wZ / 131072;
 8004cb0:	1492      	asrs	r2, r2, #18
 8004cb2:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhB - wX / 131072;
 8004cb4:	147d      	asrs	r5, r7, #17
 8004cb6:	1b55      	subs	r5, r2, r5
        pHandle->lowDuty = wTimePhA;
 8004cb8:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004cba:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8004cbc:	5245      	strh	r5, [r0, r1]
 8004cbe:	e7ca      	b.n	8004c56 <PWMC_SetPhaseVoltage+0x66>
    if ( wZ < 0 )
 8004cc0:	1c55      	adds	r5, r2, #1
 8004cc2:	db68      	blt.n	8004d96 <PWMC_SetPhaseVoltage+0x1a6>
      if ( wX <= 0 )
 8004cc4:	2f00      	cmp	r7, #0
 8004cc6:	dd2e      	ble.n	8004d26 <PWMC_SetPhaseVoltage+0x136>
        pHandle->Sector = SECTOR_3;
 8004cc8:	223a      	movs	r2, #58	; 0x3a
 8004cca:	2402      	movs	r4, #2
 8004ccc:	5484      	strb	r4, [r0, r2]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004cce:	1bdc      	subs	r4, r3, r7
 8004cd0:	17e2      	asrs	r2, r4, #31
 8004cd2:	0392      	lsls	r2, r2, #14
        wTimePhC = wTimePhA - wY / 131072;
 8004cd4:	17cd      	asrs	r5, r1, #31
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004cd6:	0b93      	lsrs	r3, r2, #14
        wTimePhC = wTimePhA - wY / 131072;
 8004cd8:	03ad      	lsls	r5, r5, #14
 8004cda:	0bad      	lsrs	r5, r5, #14
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004cdc:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhA - wY / 131072;
 8004cde:	1869      	adds	r1, r5, r1
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004ce0:	149b      	asrs	r3, r3, #18
 8004ce2:	08b6      	lsrs	r6, r6, #2
 8004ce4:	199b      	adds	r3, r3, r6
        wTimePhC = wTimePhA - wY / 131072;
 8004ce6:	1489      	asrs	r1, r1, #18
 8004ce8:	1a5d      	subs	r5, r3, r1
        pHandle->highDuty = wTimePhA;
 8004cea:	2140      	movs	r1, #64	; 0x40
        wTimePhB = wTimePhC + wX / 131072;
 8004cec:	147a      	asrs	r2, r7, #17
 8004cee:	1952      	adds	r2, r2, r5
        pHandle->lowDuty = wTimePhB;
 8004cf0:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8004cf2:	87c5      	strh	r5, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8004cf4:	5243      	strh	r3, [r0, r1]
 8004cf6:	e7ae      	b.n	8004c56 <PWMC_SetPhaseVoltage+0x66>
    if ( pHandle->Ia > 0 )
 8004cf8:	3447      	adds	r4, #71	; 0x47
 8004cfa:	5f04      	ldrsh	r4, [r0, r4]
 8004cfc:	2c00      	cmp	r4, #0
 8004cfe:	dd6c      	ble.n	8004dda <PWMC_SetPhaseVoltage+0x1ea>
      pHandle->CntPhA += pHandle->DTCompCnt;
 8004d00:	2454      	movs	r4, #84	; 0x54
 8004d02:	5b04      	ldrh	r4, [r0, r4]
 8004d04:	18e3      	adds	r3, r4, r3
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8643      	strh	r3, [r0, #50]	; 0x32
    if ( pHandle->Ib > 0 )
 8004d0a:	234a      	movs	r3, #74	; 0x4a
 8004d0c:	5ec3      	ldrsh	r3, [r0, r3]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dd60      	ble.n	8004dd4 <PWMC_SetPhaseVoltage+0x1e4>
      pHandle->CntPhB += pHandle->DTCompCnt;
 8004d12:	1912      	adds	r2, r2, r4
 8004d14:	b292      	uxth	r2, r2
    if ( pHandle->Ic > 0 )
 8004d16:	234c      	movs	r3, #76	; 0x4c
 8004d18:	8682      	strh	r2, [r0, #52]	; 0x34
 8004d1a:	5ec3      	ldrsh	r3, [r0, r3]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dd56      	ble.n	8004dce <PWMC_SetPhaseVoltage+0x1de>
      pHandle->CntPhC += pHandle->DTCompCnt;
 8004d20:	1909      	adds	r1, r1, r4
 8004d22:	86c1      	strh	r1, [r0, #54]	; 0x36
 8004d24:	e7aa      	b.n	8004c7c <PWMC_SetPhaseVoltage+0x8c>
        pHandle->Sector = SECTOR_4;
 8004d26:	233a      	movs	r3, #58	; 0x3a
 8004d28:	2103      	movs	r1, #3
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004d2a:	1b3c      	subs	r4, r7, r4
        pHandle->Sector = SECTOR_4;
 8004d2c:	54c1      	strb	r1, [r0, r3]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004d2e:	17e1      	asrs	r1, r4, #31
 8004d30:	0389      	lsls	r1, r1, #14
 8004d32:	0b8b      	lsrs	r3, r1, #14
        wTimePhB = wTimePhA + wZ / 131072;
 8004d34:	17d1      	asrs	r1, r2, #31
 8004d36:	0389      	lsls	r1, r1, #14
 8004d38:	0b89      	lsrs	r1, r1, #14
 8004d3a:	188a      	adds	r2, r1, r2
        wTimePhC = wTimePhB - wX / 131072;
 8004d3c:	17f9      	asrs	r1, r7, #31
 8004d3e:	03c9      	lsls	r1, r1, #15
 8004d40:	0bc9      	lsrs	r1, r1, #15
 8004d42:	19cf      	adds	r7, r1, r7
        pHandle->highDuty = wTimePhA;
 8004d44:	2140      	movs	r1, #64	; 0x40
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004d46:	191b      	adds	r3, r3, r4
 8004d48:	149b      	asrs	r3, r3, #18
 8004d4a:	08b6      	lsrs	r6, r6, #2
 8004d4c:	199b      	adds	r3, r3, r6
        wTimePhB = wTimePhA + wZ / 131072;
 8004d4e:	1492      	asrs	r2, r2, #18
 8004d50:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhB - wX / 131072;
 8004d52:	147d      	asrs	r5, r7, #17
 8004d54:	1b55      	subs	r5, r2, r5
        pHandle->lowDuty = wTimePhC;
 8004d56:	8785      	strh	r5, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004d58:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8004d5a:	5243      	strh	r3, [r0, r1]
 8004d5c:	e77b      	b.n	8004c56 <PWMC_SetPhaseVoltage+0x66>
        pHandle->Sector = SECTOR_6;
 8004d5e:	223a      	movs	r2, #58	; 0x3a
 8004d60:	2405      	movs	r4, #5
 8004d62:	5484      	strb	r4, [r0, r2]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004d64:	1bdc      	subs	r4, r3, r7
 8004d66:	17e3      	asrs	r3, r4, #31
        wTimePhC = wTimePhA - wY / 131072;
 8004d68:	17cd      	asrs	r5, r1, #31
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004d6a:	039b      	lsls	r3, r3, #14
 8004d6c:	0b9b      	lsrs	r3, r3, #14
        wTimePhC = wTimePhA - wY / 131072;
 8004d6e:	03ad      	lsls	r5, r5, #14
 8004d70:	0bad      	lsrs	r5, r5, #14
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004d72:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhA - wY / 131072;
 8004d74:	1869      	adds	r1, r5, r1
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004d76:	149b      	asrs	r3, r3, #18
 8004d78:	08b6      	lsrs	r6, r6, #2
 8004d7a:	199b      	adds	r3, r3, r6
        wTimePhC = wTimePhA - wY / 131072;
 8004d7c:	1489      	asrs	r1, r1, #18
 8004d7e:	1a5d      	subs	r5, r3, r1
        pHandle->highDuty = wTimePhB;
 8004d80:	2140      	movs	r1, #64	; 0x40
        wTimePhB = wTimePhC + wX / 131072;
 8004d82:	17fa      	asrs	r2, r7, #31
 8004d84:	03d2      	lsls	r2, r2, #15
 8004d86:	0bd2      	lsrs	r2, r2, #15
 8004d88:	19d2      	adds	r2, r2, r7
 8004d8a:	1452      	asrs	r2, r2, #17
 8004d8c:	1952      	adds	r2, r2, r5
        pHandle->lowDuty = wTimePhA;
 8004d8e:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8004d90:	87c5      	strh	r5, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8004d92:	5242      	strh	r2, [r0, r1]
 8004d94:	e75f      	b.n	8004c56 <PWMC_SetPhaseVoltage+0x66>
      pHandle->Sector = SECTOR_5;
 8004d96:	253a      	movs	r5, #58	; 0x3a
 8004d98:	2704      	movs	r7, #4
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004d9a:	1b1c      	subs	r4, r3, r4
      pHandle->Sector = SECTOR_5;
 8004d9c:	5547      	strb	r7, [r0, r5]
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004d9e:	17e5      	asrs	r5, r4, #31
 8004da0:	03ad      	lsls	r5, r5, #14
 8004da2:	0bab      	lsrs	r3, r5, #14
      wTimePhC = wTimePhA - wY / 131072;
 8004da4:	17cd      	asrs	r5, r1, #31
 8004da6:	03ad      	lsls	r5, r5, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004da8:	191b      	adds	r3, r3, r4
      wTimePhC = wTimePhA - wY / 131072;
 8004daa:	0bad      	lsrs	r5, r5, #14
 8004dac:	1869      	adds	r1, r5, r1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004dae:	149b      	asrs	r3, r3, #18
 8004db0:	08b6      	lsrs	r6, r6, #2
 8004db2:	199b      	adds	r3, r3, r6
      wTimePhC = wTimePhA - wY / 131072;
 8004db4:	1489      	asrs	r1, r1, #18
 8004db6:	1a5d      	subs	r5, r3, r1
      pHandle->highDuty = wTimePhB;
 8004db8:	2140      	movs	r1, #64	; 0x40
      wTimePhB = wTimePhA + wZ / 131072;
 8004dba:	17d4      	asrs	r4, r2, #31
 8004dbc:	03a4      	lsls	r4, r4, #14
 8004dbe:	0ba4      	lsrs	r4, r4, #14
 8004dc0:	18a2      	adds	r2, r4, r2
 8004dc2:	1492      	asrs	r2, r2, #18
 8004dc4:	18d2      	adds	r2, r2, r3
      pHandle->lowDuty = wTimePhC;
 8004dc6:	8785      	strh	r5, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8004dc8:	87c3      	strh	r3, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8004dca:	5242      	strh	r2, [r0, r1]
 8004dcc:	e743      	b.n	8004c56 <PWMC_SetPhaseVoltage+0x66>
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8004dce:	1b09      	subs	r1, r1, r4
 8004dd0:	86c1      	strh	r1, [r0, #54]	; 0x36
 8004dd2:	e753      	b.n	8004c7c <PWMC_SetPhaseVoltage+0x8c>
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004dd4:	1b12      	subs	r2, r2, r4
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	e79d      	b.n	8004d16 <PWMC_SetPhaseVoltage+0x126>
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8004dda:	2454      	movs	r4, #84	; 0x54
 8004ddc:	5b04      	ldrh	r4, [r0, r4]
 8004dde:	1b1b      	subs	r3, r3, r4
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	e791      	b.n	8004d08 <PWMC_SetPhaseVoltage+0x118>

08004de4 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 8004de4:	b510      	push	{r4, lr}
  pHandle->pFctSwitchOffPwm( pHandle );
 8004de6:	6883      	ldr	r3, [r0, #8]
 8004de8:	4798      	blx	r3
}
 8004dea:	bd10      	pop	{r4, pc}

08004dec <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	0004      	movs	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 8004df0:	2900      	cmp	r1, #0
 8004df2:	d011      	beq.n	8004e18 <PWMC_CurrentReadingCalibr+0x2c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8004df4:	2901      	cmp	r1, #1
 8004df6:	d002      	beq.n	8004dfe <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8004df8:	2500      	movs	r5, #0
  }
  else
  {
  }
  return retVal;
}
 8004dfa:	0028      	movs	r0, r5
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8004dfe:	2244      	movs	r2, #68	; 0x44
 8004e00:	5a83      	ldrh	r3, [r0, r2]
      retVal = true;
 8004e02:	2501      	movs	r5, #1
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f8      	beq.n	8004dfa <PWMC_CurrentReadingCalibr+0xe>
      pHandle->OffCalibrWaitTimeCounter--;
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	5283      	strh	r3, [r0, r2]
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f2      	bne.n	8004df8 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8004e12:	6903      	ldr	r3, [r0, #16]
 8004e14:	4798      	blx	r3
        retVal = true;
 8004e16:	e7f0      	b.n	8004dfa <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8004e18:	f7ff ffe4 	bl	8004de4 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8004e1c:	2352      	movs	r3, #82	; 0x52
 8004e1e:	2244      	movs	r2, #68	; 0x44
 8004e20:	5ae3      	ldrh	r3, [r4, r3]
 8004e22:	52a3      	strh	r3, [r4, r2]
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e7      	bne.n	8004df8 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8004e28:	0020      	movs	r0, r4
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	4798      	blx	r3
      retVal = true;
 8004e2e:	2501      	movs	r5, #1
 8004e30:	e7e3      	b.n	8004dfa <PWMC_CurrentReadingCalibr+0xe>
 8004e32:	46c0      	nop			; (mov r8, r8)

08004e34 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 8004e34:	b510      	push	{r4, lr}
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8004e36:	69c3      	ldr	r3, [r0, #28]
 8004e38:	4798      	blx	r3
}
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <R3_1_GetPhaseCurrents>:
 * @brief  It computes and return latest converted motor phase currents
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval ab_t Ia and Ib current in ab_t format
 */
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8004e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004e3e:	2470      	movs	r4, #112	; 0x70
 8004e40:	4a59      	ldr	r2, [pc, #356]	; (8004fa8 <R3_1_GetPhaseCurrents+0x16c>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8004e42:	2504      	movs	r5, #4
 8004e44:	6853      	ldr	r3, [r2, #4]
 8004e46:	43a3      	bics	r3, r4
 8004e48:	6053      	str	r3, [r2, #4]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);

  bSector = ( uint8_t ) pHandle->_Super.Sector;
 8004e4a:	233a      	movs	r3, #58	; 0x3a
 8004e4c:	4c57      	ldr	r4, [pc, #348]	; (8004fac <R3_1_GetPhaseCurrents+0x170>)
 8004e4e:	5cc2      	ldrb	r2, [r0, r3]
 8004e50:	68e3      	ldr	r3, [r4, #12]
 8004e52:	43ab      	bics	r3, r5
 8004e54:	60e3      	str	r3, [r4, #12]

  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004e56:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8004e58:	0093      	lsls	r3, r2, #2
 8004e5a:	46a4      	mov	ip, r4
 8004e5c:	4463      	add	r3, ip
 8004e5e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004e62:	8824      	ldrh	r4, [r4, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004e64:	881e      	ldrh	r6, [r3, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004e66:	b2a4      	uxth	r4, r4
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004e68:	b2b6      	uxth	r6, r6
  
  switch ( bSector )
 8004e6a:	2a04      	cmp	r2, #4
 8004e6c:	d822      	bhi.n	8004eb4 <R3_1_GetPhaseCurrents+0x78>
 8004e6e:	2a02      	cmp	r2, #2
 8004e70:	d841      	bhi.n	8004ef6 <R3_1_GetPhaseCurrents+0xba>
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	d027      	beq.n	8004ec6 <R3_1_GetPhaseCurrents+0x8a>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) ------------------------------*/
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004e76:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004e78:	1b1a      	subs	r2, r3, r4

      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8004e7a:	4c4d      	ldr	r4, [pc, #308]	; (8004fb0 <R3_1_GetPhaseCurrents+0x174>)
 8004e7c:	42a2      	cmp	r2, r4
 8004e7e:	da66      	bge.n	8004f4e <R3_1_GetPhaseCurrents+0x112>
      {
        pStator_Currents->a = -INT16_MAX;
 8004e80:	0022      	movs	r2, r4
 8004e82:	0027      	movs	r7, r4
 8004e84:	4b4b      	ldr	r3, [pc, #300]	; (8004fb4 <R3_1_GetPhaseCurrents+0x178>)
 8004e86:	800c      	strh	r4, [r1, #0]

      /* Ic = PhaseCOffset - ADC converted value) ------------------------------*/
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );

      /* Ib = -Ic -Ia */
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8004e88:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8004e8a:	1b35      	subs	r5, r6, r4

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 8004e8c:	2480      	movs	r4, #128	; 0x80
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8004e8e:	1aad      	subs	r5, r5, r2
      if ( wAux > INT16_MAX )
 8004e90:	0224      	lsls	r4, r4, #8
 8004e92:	42a5      	cmp	r5, r4
 8004e94:	da51      	bge.n	8004f3a <R3_1_GetPhaseCurrents+0xfe>
      {
        pStator_Currents->b = INT16_MAX;
      }
      else  if ( wAux < -INT16_MAX )
 8004e96:	4c46      	ldr	r4, [pc, #280]	; (8004fb0 <R3_1_GetPhaseCurrents+0x174>)
 8004e98:	42a5      	cmp	r5, r4
 8004e9a:	db00      	blt.n	8004e9e <R3_1_GetPhaseCurrents+0x62>
 8004e9c:	e07c      	b.n	8004f98 <R3_1_GetPhaseCurrents+0x15c>
      {
        pStator_Currents->b = -INT16_MAX;
 8004e9e:	4d45      	ldr	r5, [pc, #276]	; (8004fb4 <R3_1_GetPhaseCurrents+0x178>)
 8004ea0:	804c      	strh	r4, [r1, #2]

    default:
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
 8004ea2:	2248      	movs	r2, #72	; 0x48
 8004ea4:	5287      	strh	r7, [r0, r2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004ea6:	195b      	adds	r3, r3, r5
  pHandle->_Super.Ib = pStator_Currents->b;
 8004ea8:	3202      	adds	r2, #2
 8004eaa:	5284      	strh	r4, [r0, r2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004eac:	425b      	negs	r3, r3
 8004eae:	3202      	adds	r2, #2
 8004eb0:	5283      	strh	r3, [r0, r2]
}
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch ( bSector )
 8004eb4:	2a05      	cmp	r2, #5
 8004eb6:	d006      	beq.n	8004ec6 <R3_1_GetPhaseCurrents+0x8a>
  pHandle->_Super.Ia = pStator_Currents->a;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	5ecf      	ldrsh	r7, [r1, r3]
  pHandle->_Super.Ib = pStator_Currents->b;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	5ecc      	ldrsh	r4, [r1, r3]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004ec0:	884d      	ldrh	r5, [r1, #2]
 8004ec2:	880b      	ldrh	r3, [r1, #0]
 8004ec4:	e7ed      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8004ec6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004ec8:	1b1a      	subs	r2, r3, r4
      if ( wAux < -INT16_MAX )
 8004eca:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <R3_1_GetPhaseCurrents+0x174>)
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	db23      	blt.n	8004f18 <R3_1_GetPhaseCurrents+0xdc>
      else  if ( wAux > INT16_MAX )
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	db57      	blt.n	8004f88 <R3_1_GetPhaseCurrents+0x14c>
        pStator_Currents->b = INT16_MAX;
 8004ed8:	4d37      	ldr	r5, [pc, #220]	; (8004fb8 <R3_1_GetPhaseCurrents+0x17c>)
 8004eda:	002a      	movs	r2, r5
 8004edc:	002c      	movs	r4, r5
 8004ede:	804d      	strh	r5, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004ee0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004ee2:	1af6      	subs	r6, r6, r3
      if ( wAux > INT16_MAX )
 8004ee4:	2380      	movs	r3, #128	; 0x80
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004ee6:	1ab2      	subs	r2, r6, r2
      if ( wAux > INT16_MAX )
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	429a      	cmp	r2, r3
 8004eec:	db1f      	blt.n	8004f2e <R3_1_GetPhaseCurrents+0xf2>
        pStator_Currents->a = INT16_MAX;
 8004eee:	4b32      	ldr	r3, [pc, #200]	; (8004fb8 <R3_1_GetPhaseCurrents+0x17c>)
 8004ef0:	001f      	movs	r7, r3
 8004ef2:	800b      	strh	r3, [r1, #0]
 8004ef4:	e7d5      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004ef6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004ef8:	1b1c      	subs	r4, r3, r4
      if ( wAux < -INT16_MAX )
 8004efa:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <R3_1_GetPhaseCurrents+0x174>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	da20      	bge.n	8004f42 <R3_1_GetPhaseCurrents+0x106>
        pStator_Currents->a = INT16_MAX;
 8004f00:	800b      	strh	r3, [r1, #0]
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8004f02:	6e03      	ldr	r3, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8004f04:	4c2a      	ldr	r4, [pc, #168]	; (8004fb0 <R3_1_GetPhaseCurrents+0x174>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8004f06:	1b9e      	subs	r6, r3, r6
      if ( wAux < -INT16_MAX )
 8004f08:	42a6      	cmp	r6, r4
 8004f0a:	da29      	bge.n	8004f60 <R3_1_GetPhaseCurrents+0x124>
  pHandle->_Super.Ia = pStator_Currents->a;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	5ecf      	ldrsh	r7, [r1, r3]
 8004f10:	4d28      	ldr	r5, [pc, #160]	; (8004fb4 <R3_1_GetPhaseCurrents+0x178>)
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004f12:	880b      	ldrh	r3, [r1, #0]
        pStator_Currents->b = -INT16_MAX;
 8004f14:	804c      	strh	r4, [r1, #2]
 8004f16:	e7c4      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = -INT16_MAX;
 8004f18:	001a      	movs	r2, r3
 8004f1a:	001c      	movs	r4, r3
 8004f1c:	804b      	strh	r3, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004f1e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004f20:	4d24      	ldr	r5, [pc, #144]	; (8004fb4 <R3_1_GetPhaseCurrents+0x178>)
 8004f22:	1af6      	subs	r6, r6, r3
      if ( wAux > INT16_MAX )
 8004f24:	2380      	movs	r3, #128	; 0x80
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004f26:	1ab2      	subs	r2, r6, r2
      if ( wAux > INT16_MAX )
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	dadf      	bge.n	8004eee <R3_1_GetPhaseCurrents+0xb2>
      else  if ( wAux < -INT16_MAX )
 8004f2e:	4f20      	ldr	r7, [pc, #128]	; (8004fb0 <R3_1_GetPhaseCurrents+0x174>)
 8004f30:	42ba      	cmp	r2, r7
 8004f32:	da35      	bge.n	8004fa0 <R3_1_GetPhaseCurrents+0x164>
        pStator_Currents->a = -INT16_MAX;
 8004f34:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <R3_1_GetPhaseCurrents+0x178>)
 8004f36:	800f      	strh	r7, [r1, #0]
 8004f38:	e7b3      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = INT16_MAX;
 8004f3a:	4d1f      	ldr	r5, [pc, #124]	; (8004fb8 <R3_1_GetPhaseCurrents+0x17c>)
 8004f3c:	002c      	movs	r4, r5
 8004f3e:	804d      	strh	r5, [r1, #2]
 8004f40:	e7af      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
      else  if ( wAux > INT16_MAX )
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	429c      	cmp	r4, r3
 8004f48:	db15      	blt.n	8004f76 <R3_1_GetPhaseCurrents+0x13a>
        pStator_Currents->a = INT16_MAX;
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <R3_1_GetPhaseCurrents+0x17c>)
 8004f4c:	e7d8      	b.n	8004f00 <R3_1_GetPhaseCurrents+0xc4>
      else  if ( wAux > INT16_MAX )
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	429a      	cmp	r2, r3
 8004f54:	db1c      	blt.n	8004f90 <R3_1_GetPhaseCurrents+0x154>
        pStator_Currents->a = INT16_MAX;
 8004f56:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <R3_1_GetPhaseCurrents+0x17c>)
 8004f58:	001a      	movs	r2, r3
 8004f5a:	001f      	movs	r7, r3
 8004f5c:	800b      	strh	r3, [r1, #0]
 8004f5e:	e793      	b.n	8004e88 <R3_1_GetPhaseCurrents+0x4c>
      else  if ( wAux > INT16_MAX )
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	429e      	cmp	r6, r3
 8004f66:	db08      	blt.n	8004f7a <R3_1_GetPhaseCurrents+0x13e>
        pStator_Currents->b = INT16_MAX;
 8004f68:	4d13      	ldr	r5, [pc, #76]	; (8004fb8 <R3_1_GetPhaseCurrents+0x17c>)
  pHandle->_Super.Ia = pStator_Currents->a;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	5ecf      	ldrsh	r7, [r1, r3]
 8004f6e:	002c      	movs	r4, r5
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004f70:	880b      	ldrh	r3, [r1, #0]
        pStator_Currents->b = INT16_MAX;
 8004f72:	804d      	strh	r5, [r1, #2]
 8004f74:	e795      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->a = ( int16_t )wAux;
 8004f76:	800c      	strh	r4, [r1, #0]
 8004f78:	e7c3      	b.n	8004f02 <R3_1_GetPhaseCurrents+0xc6>
        pStator_Currents->b = ( int16_t )wAux;
 8004f7a:	b234      	sxth	r4, r6
  pHandle->_Super.Ia = pStator_Currents->a;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	5ecf      	ldrsh	r7, [r1, r3]
        pStator_Currents->b = ( int16_t )wAux;
 8004f80:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004f82:	880b      	ldrh	r3, [r1, #0]
 8004f84:	b2b5      	uxth	r5, r6
 8004f86:	e78c      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = ( int16_t )wAux;
 8004f88:	b214      	sxth	r4, r2
 8004f8a:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004f8c:	b295      	uxth	r5, r2
 8004f8e:	e7a7      	b.n	8004ee0 <R3_1_GetPhaseCurrents+0xa4>
        pStator_Currents->a = ( int16_t )wAux;
 8004f90:	b217      	sxth	r7, r2
 8004f92:	800f      	strh	r7, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004f94:	b293      	uxth	r3, r2
 8004f96:	e777      	b.n	8004e88 <R3_1_GetPhaseCurrents+0x4c>
        pStator_Currents->b = ( int16_t )wAux;
 8004f98:	b22c      	sxth	r4, r5
 8004f9a:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004f9c:	b2ad      	uxth	r5, r5
 8004f9e:	e780      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->a = ( int16_t )wAux;
 8004fa0:	b217      	sxth	r7, r2
 8004fa2:	800f      	strh	r7, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004fa4:	b293      	uxth	r3, r2
 8004fa6:	e77c      	b.n	8004ea2 <R3_1_GetPhaseCurrents+0x66>
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40012400 	.word	0x40012400
 8004fb0:	ffff8001 	.word	0xffff8001
 8004fb4:	00008001 	.word	0x00008001
 8004fb8:	00007fff 	.word	0x00007fff

08004fbc <R3_1_HFCurrentsCalibrationAB>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8004fbc:	2373      	movs	r3, #115	; 0x73
{
 8004fbe:	b530      	push	{r4, r5, lr}
 8004fc0:	2570      	movs	r5, #112	; 0x70
 8004fc2:	4a10      	ldr	r2, [pc, #64]	; (8005004 <R3_1_HFCurrentsCalibrationAB+0x48>)
  uint8_t bSector = pHandle->CalibSector;
 8004fc4:	5cc4      	ldrb	r4, [r0, r3]
 8004fc6:	6853      	ldr	r3, [r2, #4]
 8004fc8:	43ab      	bics	r3, r5
 8004fca:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004fcc:	2372      	movs	r3, #114	; 0x72
 8004fce:	5cc2      	ldrb	r2, [r0, r3]
 8004fd0:	2a0f      	cmp	r2, #15
 8004fd2:	d813      	bhi.n	8004ffc <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004fd4:	00a2      	lsls	r2, r4, #2
 8004fd6:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8004fd8:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004fda:	46a4      	mov	ip, r4
 8004fdc:	4462      	add	r2, ip
 8004fde:	46ac      	mov	ip, r5
 8004fe0:	6b54      	ldr	r4, [r2, #52]	; 0x34
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004fe2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004fe4:	8824      	ldrh	r4, [r4, #0]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004fe6:	8812      	ldrh	r2, [r2, #0]
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004fe8:	4464      	add	r4, ip
 8004fea:	65c4      	str	r4, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004fec:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8004fee:	46a4      	mov	ip, r4
 8004ff0:	4462      	add	r2, ip
 8004ff2:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8004ff4:	5cc2      	ldrb	r2, [r0, r3]
 8004ff6:	3201      	adds	r2, #1
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8005000:	804b      	strh	r3, [r1, #2]
}
 8005002:	bd30      	pop	{r4, r5, pc}
 8005004:	40012c00 	.word	0x40012c00

08005008 <R3_1_HFCurrentsCalibrationC>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8005008:	2373      	movs	r3, #115	; 0x73
{
 800500a:	b530      	push	{r4, r5, lr}
 800500c:	2570      	movs	r5, #112	; 0x70
 800500e:	4c0f      	ldr	r4, [pc, #60]	; (800504c <R3_1_HFCurrentsCalibrationC+0x44>)
  uint8_t bSector = pHandle->CalibSector;
 8005010:	5cc2      	ldrb	r2, [r0, r3]
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	43ab      	bics	r3, r5
 8005016:	6063      	str	r3, [r4, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  pHandle->_Super.Sector = SECTOR_1;
 8005018:	233a      	movs	r3, #58	; 0x3a
 800501a:	2400      	movs	r4, #0
 800501c:	54c4      	strb	r4, [r0, r3]
  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800501e:	3338      	adds	r3, #56	; 0x38
 8005020:	5cc4      	ldrb	r4, [r0, r3]
 8005022:	2c0f      	cmp	r4, #15
 8005024:	d80e      	bhi.n	8005044 <R3_1_HFCurrentsCalibrationC+0x3c>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8005026:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8005028:	3212      	adds	r2, #18
 800502a:	46a4      	mov	ip, r4
 800502c:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800502e:	0092      	lsls	r2, r2, #2
 8005030:	4462      	add	r2, ip
 8005032:	46a4      	mov	ip, r4
 8005034:	6852      	ldr	r2, [r2, #4]
 8005036:	8812      	ldrh	r2, [r2, #0]
 8005038:	4462      	add	r2, ip
 800503a:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800503c:	5cc2      	ldrb	r2, [r0, r3]
 800503e:	3201      	adds	r2, #1
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8005048:	804b      	strh	r3, [r1, #2]
}
 800504a:	bd30      	pop	{r4, r5, pc}
 800504c:	40012c00 	.word	0x40012c00

08005050 <R3_1_Init>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005050:	2104      	movs	r1, #4
 8005052:	4a3b      	ldr	r2, [pc, #236]	; (8005140 <R3_1_Init+0xf0>)
{
 8005054:	b530      	push	{r4, r5, lr}
 8005056:	6853      	ldr	r3, [r2, #4]
 8005058:	0004      	movs	r4, r0
 800505a:	438b      	bics	r3, r1
 800505c:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800505e:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8005060:	6853      	ldr	r3, [r2, #4]
 8005062:	3104      	adds	r1, #4
 8005064:	438b      	bics	r3, r1
 8005066:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8005068:	6011      	str	r1, [r2, #0]
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	4b35      	ldr	r3, [pc, #212]	; (8005144 <R3_1_Init+0xf4>)
 800506e:	0309      	lsls	r1, r1, #12
 8005070:	6818      	ldr	r0, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005072:	2580      	movs	r5, #128	; 0x80
 8005074:	4301      	orrs	r1, r0
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005076:	2081      	movs	r0, #129	; 0x81
 8005078:	6019      	str	r1, [r3, #0]
 800507a:	4933      	ldr	r1, [pc, #204]	; (8005148 <R3_1_Init+0xf8>)
 800507c:	4240      	negs	r0, r0
 800507e:	6108      	str	r0, [r1, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005080:	68c8      	ldr	r0, [r1, #12]
 8005082:	b083      	sub	sp, #12
 8005084:	4328      	orrs	r0, r5
 8005086:	60c8      	str	r0, [r1, #12]
    LL_TIM_SetCounter( TIM1, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8005088:	206c      	movs	r0, #108	; 0x6c
 800508a:	5a20      	ldrh	r0, [r4, r0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 800508c:	3d7e      	subs	r5, #126	; 0x7e
 800508e:	3801      	subs	r0, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005090:	6248      	str	r0, [r1, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005092:	2080      	movs	r0, #128	; 0x80
 8005094:	6999      	ldr	r1, [r3, #24]
 8005096:	03c0      	lsls	r0, r0, #15
 8005098:	4301      	orrs	r1, r0
 800509a:	6199      	str	r1, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800509c:	699b      	ldr	r3, [r3, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800509e:	492b      	ldr	r1, [pc, #172]	; (800514c <R3_1_Init+0xfc>)
 80050a0:	4003      	ands	r3, r0
 80050a2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80050a4:	9b01      	ldr	r3, [sp, #4]
 80050a6:	2380      	movs	r3, #128	; 0x80
 80050a8:	68c8      	ldr	r0, [r1, #12]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	4303      	orrs	r3, r0
 80050ae:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CR,
 80050b0:	6893      	ldr	r3, [r2, #8]
 80050b2:	4927      	ldr	r1, [pc, #156]	; (8005150 <R3_1_Init+0x100>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 80050b4:	2010      	movs	r0, #16
  MODIFY_REG(ADCx->CR,
 80050b6:	4019      	ands	r1, r3
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80050be:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 80050c0:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80050c2:	6893      	ldr	r3, [r2, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dbfc      	blt.n	80050c2 <R3_1_Init+0x72>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80050c8:	6893      	ldr	r3, [r2, #8]
 80050ca:	4219      	tst	r1, r3
 80050cc:	d1f9      	bne.n	80050c2 <R3_1_Init+0x72>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 80050ce:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 80050d0:	4218      	tst	r0, r3
 80050d2:	d1f6      	bne.n	80050c2 <R3_1_Init+0x72>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 80050d4:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 80050d6:	421d      	tst	r5, r3
 80050d8:	d1f3      	bne.n	80050c2 <R3_1_Init+0x72>
  MODIFY_REG(ADCx->CR,
 80050da:	6893      	ldr	r3, [r2, #8]
 80050dc:	491c      	ldr	r1, [pc, #112]	; (8005150 <R3_1_Init+0x100>)
 80050de:	400b      	ands	r3, r1
 80050e0:	2101      	movs	r1, #1
 80050e2:	430b      	orrs	r3, r1
 80050e4:	6093      	str	r3, [r2, #8]
    while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 80050e6:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 80050e8:	4915      	ldr	r1, [pc, #84]	; (8005140 <R3_1_Init+0xf0>)
 80050ea:	680b      	ldr	r3, [r1, #0]
 80050ec:	421a      	tst	r2, r3
 80050ee:	d0fc      	beq.n	80050ea <R3_1_Init+0x9a>
    LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )pHandle->ADC1_DMA_converted );
 80050f0:	0023      	movs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80050f2:	2003      	movs	r0, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80050f4:	4917      	ldr	r1, [pc, #92]	; (8005154 <R3_1_Init+0x104>)
 80050f6:	336e      	adds	r3, #110	; 0x6e
 80050f8:	60cb      	str	r3, [r1, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <R3_1_Init+0x108>)
    pHandle->ADCRegularLocked=false; 
 80050fc:	2500      	movs	r5, #0
 80050fe:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005100:	684b      	ldr	r3, [r1, #4]
 8005102:	0c1b      	lsrs	r3, r3, #16
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	4303      	orrs	r3, r0
 8005108:	604b      	str	r3, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800510a:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800510c:	306d      	adds	r0, #109	; 0x6d
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <R3_1_Init+0xf8>)
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	4381      	bics	r1, r0
 8005118:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 800511a:	6a18      	ldr	r0, [r3, #32]
 800511c:	490f      	ldr	r1, [pc, #60]	; (800515c <R3_1_Init+0x10c>)
 800511e:	4301      	orrs	r1, r0
 8005120:	6219      	str	r1, [r3, #32]
    pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005122:	2180      	movs	r1, #128	; 0x80
 8005124:	00c9      	lsls	r1, r1, #3
 8005126:	66a1      	str	r1, [r4, #104]	; 0x68
    pHandle->OverCurrentFlag = false;
 8005128:	2074      	movs	r0, #116	; 0x74
 800512a:	2100      	movs	r1, #0
 800512c:	5221      	strh	r1, [r4, r0]
    pHandle->ADCRegularLocked=false; 
 800512e:	3003      	adds	r0, #3
 8005130:	5425      	strb	r5, [r4, r0]
    pHandle->_Super.DTTest = 0u;
 8005132:	3829      	subs	r0, #41	; 0x29
 8005134:	5221      	strh	r1, [r4, r0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
}
 800513c:	b003      	add	sp, #12
 800513e:	bd30      	pop	{r4, r5, pc}
 8005140:	40012400 	.word	0x40012400
 8005144:	40021000 	.word	0x40021000
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40015800 	.word	0x40015800
 8005150:	7fffffe8 	.word	0x7fffffe8
 8005154:	40020008 	.word	0x40020008
 8005158:	40012440 	.word	0x40012440
 800515c:	00000555 	.word	0x00000555

08005160 <R3_1_WriteTIMRegisters>:
{
 8005160:	0003      	movs	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005162:	6f82      	ldr	r2, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 8005164:	8e40      	ldrh	r0, [r0, #50]	; 0x32
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005166:	6812      	ldr	r2, [r2, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005168:	6350      	str	r0, [r2, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPhB );
 800516a:	8e98      	ldrh	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800516c:	6390      	str	r0, [r2, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPhC );
 800516e:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005170:	63d0      	str	r0, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005172:	6411      	str	r1, [r2, #64]	; 0x40
  if ( pHandle->_Super.SWerror == 1u )
 8005174:	8f18      	ldrh	r0, [r3, #56]	; 0x38
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005176:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8005178:	2801      	cmp	r0, #1
 800517a:	d005      	beq.n	8005188 <R3_1_WriteTIMRegisters+0x28>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800517c:	2070      	movs	r0, #112	; 0x70
 800517e:	4010      	ands	r0, r2
 8005180:	1e43      	subs	r3, r0, #1
 8005182:	4198      	sbcs	r0, r3
    hAux = MC_FOC_DURATION;
 8005184:	b280      	uxth	r0, r0
}
 8005186:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8005188:	2200      	movs	r2, #0
 800518a:	871a      	strh	r2, [r3, #56]	; 0x38
 800518c:	e7fb      	b.n	8005186 <R3_1_WriteTIMRegisters+0x26>
 800518e:	46c0      	nop			; (mov r8, r8)

08005190 <R3_1_SetADCSampPointCalibration>:
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	00db      	lsls	r3, r3, #3
{
 8005194:	b510      	push	{r4, lr}
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005196:	6683      	str	r3, [r0, #104]	; 0x68
  pHandle->_Super.Sector = pHandle->CalibSector;
 8005198:	2373      	movs	r3, #115	; 0x73
 800519a:	5cc2      	ldrb	r2, [r0, r3]
 800519c:	3b39      	subs	r3, #57	; 0x39
 800519e:	54c2      	strb	r2, [r0, r3]
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 80051a0:	3332      	adds	r3, #50	; 0x32
 80051a2:	5ac1      	ldrh	r1, [r0, r3]
 80051a4:	3901      	subs	r1, #1
 80051a6:	b289      	uxth	r1, r1
 80051a8:	f7ff ffda 	bl	8005160 <R3_1_WriteTIMRegisters>
}
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)

080051b0 <R3_1_SetADCSampPointSectX>:
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80051b0:	236c      	movs	r3, #108	; 0x6c
 80051b2:	2166      	movs	r1, #102	; 0x66
{
 80051b4:	b570      	push	{r4, r5, r6, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80051b6:	6f86      	ldr	r6, [r0, #120]	; 0x78
  register uint16_t lowDuty = pHdl->lowDuty;
 80051b8:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80051ba:	5ac2      	ldrh	r2, [r0, r3]
 80051bc:	5a71      	ldrh	r1, [r6, r1]
 80051be:	1b13      	subs	r3, r2, r4
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	428b      	cmp	r3, r1
 80051c4:	d907      	bls.n	80051d6 <R3_1_SetADCSampPointSectX+0x26>
    pHandle->_Super.Sector = SECTOR_5;
 80051c6:	2104      	movs	r1, #4
 80051c8:	233a      	movs	r3, #58	; 0x3a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80051ca:	3a01      	subs	r2, #1
    pHandle->_Super.Sector = SECTOR_5;
 80051cc:	54c1      	strb	r1, [r0, r3]
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80051ce:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
 80051d0:	f7ff ffc6 	bl	8005160 <R3_1_WriteTIMRegisters>
}
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80051d6:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80051d8:	005b      	lsls	r3, r3, #1
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80051da:	1b65      	subs	r5, r4, r5
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80051dc:	b2ad      	uxth	r5, r5
 80051de:	429d      	cmp	r5, r3
 80051e0:	d904      	bls.n	80051ec <R3_1_SetADCSampPointSectX+0x3c>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80051e2:	2368      	movs	r3, #104	; 0x68
 80051e4:	5af1      	ldrh	r1, [r6, r3]
 80051e6:	1a61      	subs	r1, r4, r1
 80051e8:	b289      	uxth	r1, r1
 80051ea:	e7f1      	b.n	80051d0 <R3_1_SetADCSampPointSectX+0x20>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80051ec:	1909      	adds	r1, r1, r4
 80051ee:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80051f0:	428a      	cmp	r2, r1
 80051f2:	d8ed      	bhi.n	80051d0 <R3_1_SetADCSampPointSectX+0x20>
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80051f4:	2380      	movs	r3, #128	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80051f6:	0052      	lsls	r2, r2, #1
 80051f8:	3a01      	subs	r2, #1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80051fa:	011b      	lsls	r3, r3, #4
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80051fc:	1a51      	subs	r1, r2, r1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80051fe:	6683      	str	r3, [r0, #104]	; 0x68
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005200:	b289      	uxth	r1, r1
 8005202:	e7e5      	b.n	80051d0 <R3_1_SetADCSampPointSectX+0x20>

08005204 <R3_1_TurnOnLowSides>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005204:	2342      	movs	r3, #66	; 0x42
 8005206:	2201      	movs	r2, #1
 8005208:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800520a:	4a0f      	ldr	r2, [pc, #60]	; (8005248 <R3_1_TurnOnLowSides+0x44>)
 800520c:	3b44      	subs	r3, #68	; 0x44
 800520e:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005210:	2300      	movs	r3, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005212:	2101      	movs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005214:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005216:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005218:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800521a:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 800521c:	4219      	tst	r1, r3
 800521e:	d0fc      	beq.n	800521a <R3_1_TurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	430b      	orrs	r3, r1
 8005228:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800522a:	2272      	movs	r2, #114	; 0x72
 800522c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800522e:	5c9a      	ldrb	r2, [r3, r2]
 8005230:	2a02      	cmp	r2, #2
 8005232:	d108      	bne.n	8005246 <R3_1_TurnOnLowSides+0x42>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005234:	685a      	ldr	r2, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005236:	6919      	ldr	r1, [r3, #16]
 8005238:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	6959      	ldr	r1, [r3, #20]
 800523e:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	6193      	str	r3, [r2, #24]

  }
  return;
}
 8005246:	4770      	bx	lr
 8005248:	40012c00 	.word	0x40012c00

0800524c <R3_1_SwitchOnPWM>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = false;
 800524c:	2342      	movs	r3, #66	; 0x42
 800524e:	2200      	movs	r2, #0
{
 8005250:	b570      	push	{r4, r5, r6, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005252:	54c2      	strb	r2, [r0, r3]

  /* We forbid ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=true; 
 8005254:	3335      	adds	r3, #53	; 0x35
 8005256:	3201      	adds	r2, #1
 8005258:	54c2      	strb	r2, [r0, r3]
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
 800525a:	3b0b      	subs	r3, #11
 800525c:	5ac2      	ldrh	r2, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800525e:	4b31      	ldr	r3, [pc, #196]	; (8005324 <R3_1_SwitchOnPWM+0xd8>)
 8005260:	0851      	lsrs	r1, r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8005262:	3a05      	subs	r2, #5
 8005264:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005266:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005268:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800526c:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800526e:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005270:	4252      	negs	r2, r2
 8005272:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005274:	691a      	ldr	r2, [r3, #16]

  /* Wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8005276:	4211      	tst	r1, r2
 8005278:	d0fc      	beq.n	8005274 <R3_1_SwitchOnPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800527a:	2202      	movs	r2, #2
 800527c:	4252      	negs	r2, r2
 800527e:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005284:	00d2      	lsls	r2, r2, #3
 8005286:	430a      	orrs	r2, r1
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800528e:	0212      	lsls	r2, r2, #8
 8005290:	430a      	orrs	r2, r1
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005292:	2172      	movs	r1, #114	; 0x72
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
 8005296:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005298:	5c51      	ldrb	r1, [r2, r1]
 800529a:	2902      	cmp	r1, #2
 800529c:	d029      	beq.n	80052f2 <R3_1_SwitchOnPWM+0xa6>

	  
    /* Configuration of DMA and ADC to next conversions */
    /* It's possible write the CHSELR resgister because the ADC conversion
       is stopped by the R3_1_SwitchOffPWM function */
    LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 800529e:	236a      	movs	r3, #106	; 0x6a
 80052a0:	5cd3      	ldrb	r3, [r2, r3]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80052a2:	2207      	movs	r2, #7
 80052a4:	4920      	ldr	r1, [pc, #128]	; (8005328 <R3_1_SwitchOnPWM+0xdc>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80052a6:	2502      	movs	r5, #2
 80052a8:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80052aa:	2603      	movs	r6, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80052ac:	4390      	bics	r0, r2
 80052ae:	4303      	orrs	r3, r0
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80052b0:	2001      	movs	r0, #1
 80052b2:	614b      	str	r3, [r1, #20]
 80052b4:	4b1d      	ldr	r3, [pc, #116]	; (800532c <R3_1_SwitchOnPWM+0xe0>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4382      	bics	r2, r0
 80052ba:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	0c12      	lsrs	r2, r2, #16
 80052c0:	0412      	lsls	r2, r2, #16
 80052c2:	432a      	orrs	r2, r5
 80052c4:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80052c6:	681c      	ldr	r4, [r3, #0]
 80052c8:	4304      	orrs	r4, r0
 80052ca:	601c      	str	r4, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80052cc:	2404      	movs	r4, #4
 80052ce:	600c      	str	r4, [r1, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80052d0:	68ca      	ldr	r2, [r1, #12]
 80052d2:	43b2      	bics	r2, r6
 80052d4:	4302      	orrs	r2, r0
 80052d6:	60ca      	str	r2, [r1, #12]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80052d8:	4a15      	ldr	r2, [pc, #84]	; (8005330 <R3_1_SwitchOnPWM+0xe4>)
 80052da:	6054      	str	r4, [r2, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	432a      	orrs	r2, r5
 80052e0:	601a      	str	r2, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052e2:	2202      	movs	r2, #2
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <R3_1_SwitchOnPWM+0xd8>)
 80052e6:	4252      	negs	r2, r2
 80052e8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	4310      	orrs	r0, r2
 80052ee:	60d8      	str	r0, [r3, #12]
    LL_TIM_ClearFlag_UPDATE( TIMx );
    /* Enable Update IRQ */
    LL_TIM_EnableIT_UPDATE( TIMx );
  
  return;
}
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	490f      	ldr	r1, [pc, #60]	; (8005334 <R3_1_SwitchOnPWM+0xe8>)
 80052f6:	400b      	ands	r3, r1
 80052f8:	428b      	cmp	r3, r1
 80052fa:	d009      	beq.n	8005310 <R3_1_SwitchOnPWM+0xc4>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80052fc:	6853      	ldr	r3, [r2, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80052fe:	6911      	ldr	r1, [r2, #16]
 8005300:	6299      	str	r1, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005302:	6893      	ldr	r3, [r2, #8]
 8005304:	6951      	ldr	r1, [r2, #20]
 8005306:	6299      	str	r1, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005308:	68d3      	ldr	r3, [r2, #12]
 800530a:	6991      	ldr	r1, [r2, #24]
 800530c:	6299      	str	r1, [r3, #40]	; 0x28
}
 800530e:	e7c6      	b.n	800529e <R3_1_SwitchOnPWM+0x52>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005310:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005312:	6911      	ldr	r1, [r2, #16]
 8005314:	6199      	str	r1, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005316:	6893      	ldr	r3, [r2, #8]
 8005318:	6951      	ldr	r1, [r2, #20]
 800531a:	6199      	str	r1, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800531c:	68d3      	ldr	r3, [r2, #12]
 800531e:	6991      	ldr	r1, [r2, #24]
 8005320:	6199      	str	r1, [r3, #24]
}
 8005322:	e7bc      	b.n	800529e <R3_1_SwitchOnPWM+0x52>
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40012400 	.word	0x40012400
 800532c:	40020008 	.word	0x40020008
 8005330:	40020000 	.word	0x40020000
 8005334:	00000555 	.word	0x00000555

08005338 <R3_1_SwitchOffPWM>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005338:	2101      	movs	r1, #1
 800533a:	4b22      	ldr	r3, [pc, #136]	; (80053c4 <R3_1_SwitchOffPWM+0x8c>)
  *         MOE bit and reset the TIM status
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800533c:	b510      	push	{r4, lr}
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	438a      	bics	r2, r1
 8005342:	60da      	str	r2, [r3, #12]
  TIM_TypeDef * TIMx = TIM1;

  /* Enable Update IRQ */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005344:	2100      	movs	r1, #0
 8005346:	2242      	movs	r2, #66	; 0x42
 8005348:	5481      	strb	r1, [r0, r2]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800534a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534c:	491e      	ldr	r1, [pc, #120]	; (80053c8 <R3_1_SwitchOffPWM+0x90>)
 800534e:	400a      	ands	r2, r1
 8005350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if ( pHandle->BrakeActionLock == true )
 8005352:	2376      	movs	r3, #118	; 0x76
 8005354:	5cc3      	ldrb	r3, [r0, r3]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800535a:	2272      	movs	r2, #114	; 0x72
 800535c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800535e:	5c9a      	ldrb	r2, [r3, r2]
 8005360:	2a02      	cmp	r2, #2
 8005362:	d025      	beq.n	80053b0 <R3_1_SwitchOffPWM+0x78>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8005364:	2102      	movs	r1, #2
 8005366:	4a19      	ldr	r2, [pc, #100]	; (80053cc <R3_1_SwitchOffPWM+0x94>)
  MODIFY_REG(ADCx->CR,
 8005368:	4c19      	ldr	r4, [pc, #100]	; (80053d0 <R3_1_SwitchOffPWM+0x98>)
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	438b      	bics	r3, r1
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <R3_1_SwitchOffPWM+0x9c>)
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	4022      	ands	r2, r4
 8005376:	2410      	movs	r4, #16
 8005378:	4322      	orrs	r2, r4
 800537a:	609a      	str	r2, [r3, #8]
  LL_DMA_DisableIT_TC( DMA1, LL_DMA_CHANNEL_1 );

  LL_ADC_REG_StopConversion( ADC1 );

  /* Disable ADC DMA request*/
  ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	3c0f      	subs	r4, #15
 8005380:	43a2      	bics	r2, r4
 8005382:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8005384:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <R3_1_SwitchOffPWM+0xa0>)
 8005386:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8005388:	2204      	movs	r2, #4
 800538a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	4913      	ldr	r1, [pc, #76]	; (80053dc <R3_1_SwitchOffPWM+0xa4>)
 8005390:	400a      	ands	r2, r1
 8005392:	60da      	str	r2, [r3, #12]

  /* The ADC is not triggered anymore by the PWM timer */
  LL_ADC_REG_SetTriggerSource (ADC1, LL_ADC_REG_TRIG_SOFTWARE);
  
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8005394:	2377      	movs	r3, #119	; 0x77
 8005396:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005398:	2101      	movs	r1, #1
 800539a:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800539c:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <R3_1_SwitchOffPWM+0x8c>)
 800539e:	3b79      	subs	r3, #121	; 0x79
 80053a0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80053a2:	6913      	ldr	r3, [r2, #16]

  /* Wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 80053a4:	4219      	tst	r1, r3
 80053a6:	d0fc      	beq.n	80053a2 <R3_1_SwitchOffPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80053a8:	2302      	movs	r3, #2
 80053aa:	425b      	negs	r3, r3
 80053ac:	6113      	str	r3, [r2, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 80053ae:	bd10      	pop	{r4, pc}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80053b0:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 80053b2:	6919      	ldr	r1, [r3, #16]
 80053b4:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	6959      	ldr	r1, [r3, #20]
 80053ba:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80053c2:	e7cf      	b.n	8005364 <R3_1_SwitchOffPWM+0x2c>
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	ffff7fff 	.word	0xffff7fff
 80053cc:	40020008 	.word	0x40020008
 80053d0:	7fffffe8 	.word	0x7fffffe8
 80053d4:	40012400 	.word	0x40012400
 80053d8:	40020000 	.word	0x40020000
 80053dc:	fffff23f 	.word	0xfffff23f

080053e0 <R3_1_CurrentReadingCalibration>:
{
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	46de      	mov	lr, fp
 80053e4:	4657      	mov	r7, sl
 80053e6:	464e      	mov	r6, r9
 80053e8:	4645      	mov	r5, r8
  pHandle->PolarizationCounter = 0u;
 80053ea:	2372      	movs	r3, #114	; 0x72
{
 80053ec:	b5e0      	push	{r5, r6, r7, lr}
  pHandle-> PhaseAOffset = 0u;
 80053ee:	2600      	movs	r6, #0
  CLEAR_BIT(TIMx->CCER, Channels);
 80053f0:	4d3a      	ldr	r5, [pc, #232]	; (80054dc <R3_1_CurrentReadingCalibration+0xfc>)
 80053f2:	65c6      	str	r6, [r0, #92]	; 0x5c
  pHandle-> PhaseBOffset = 0u;
 80053f4:	6606      	str	r6, [r0, #96]	; 0x60
  pHandle-> PhaseCOffset = 0u;
 80053f6:	6646      	str	r6, [r0, #100]	; 0x64
  pHandle->PolarizationCounter = 0u;
 80053f8:	54c6      	strb	r6, [r0, r3]
 80053fa:	6a2b      	ldr	r3, [r5, #32]
 80053fc:	4a38      	ldr	r2, [pc, #224]	; (80054e0 <R3_1_CurrentReadingCalibration+0x100>)
  pHandle->_Super.Sector = SECTOR_5;
 80053fe:	273a      	movs	r7, #58	; 0x3a
 8005400:	4013      	ands	r3, r2
  pHandle->CalibSector = SECTOR_5;
 8005402:	2273      	movs	r2, #115	; 0x73
 8005404:	4693      	mov	fp, r2
 8005406:	3a6f      	subs	r2, #111	; 0x6f
 8005408:	4690      	mov	r8, r2
 800540a:	465a      	mov	r2, fp
 800540c:	4641      	mov	r1, r8
 800540e:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8005410:	4b34      	ldr	r3, [pc, #208]	; (80054e4 <R3_1_CurrentReadingCalibration+0x104>)
{
 8005412:	0004      	movs	r4, r0
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8005414:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8005416:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <R3_1_CurrentReadingCalibration+0x108>)
 8005418:	6183      	str	r3, [r0, #24]
  pHandle->CalibSector = SECTOR_5;
 800541a:	5481      	strb	r1, [r0, r2]
  pHandle->_Super.Sector = SECTOR_5;
 800541c:	55c1      	strb	r1, [r0, r7]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800541e:	f7ff ff15 	bl	800524c <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005422:	2238      	movs	r2, #56	; 0x38
 8005424:	4691      	mov	r9, r2
 8005426:	323a      	adds	r2, #58	; 0x3a
 8005428:	4692      	mov	sl, r2
 800542a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800542c:	44a1      	add	r9, r4
 800542e:	44a2      	add	sl, r4
 8005430:	3a07      	subs	r2, #7
 8005432:	4653      	mov	r3, sl
 8005434:	5c8a      	ldrb	r2, [r1, r2]
 8005436:	0028      	movs	r0, r5
 8005438:	4649      	mov	r1, r9
 800543a:	f7ff fbaf 	bl	8004b9c <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800543e:	0020      	movs	r0, r4
 8005440:	f7ff ff7a 	bl	8005338 <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8005444:	4b29      	ldr	r3, [pc, #164]	; (80054ec <R3_1_CurrentReadingCalibration+0x10c>)
  pHandle->CalibSector = SECTOR_1;
 8005446:	4659      	mov	r1, fp
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8005448:	6063      	str	r3, [r4, #4]
  pHandle->PolarizationCounter = 0;
 800544a:	2372      	movs	r3, #114	; 0x72
  pHandle->CalibSector = SECTOR_1;
 800544c:	5466      	strb	r6, [r4, r1]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800544e:	0020      	movs	r0, r4
  pHandle->_Super.Sector = SECTOR_1;
 8005450:	55e6      	strb	r6, [r4, r7]
  pHandle->PolarizationCounter = 0;
 8005452:	54e6      	strb	r6, [r4, r3]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8005454:	f7ff fefa 	bl	800524c <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005458:	226b      	movs	r2, #107	; 0x6b
 800545a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800545c:	4649      	mov	r1, r9
 800545e:	0028      	movs	r0, r5
 8005460:	5c9a      	ldrb	r2, [r3, r2]
 8005462:	4653      	mov	r3, sl
 8005464:	f7ff fb9a 	bl	8004b9c <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8005468:	0020      	movs	r0, r4
 800546a:	f7ff ff65 	bl	8005338 <R3_1_SwitchOffPWM>
  pHandle->_Super.Sector = SECTOR_5;
 800546e:	4643      	mov	r3, r8
 8005470:	55e3      	strb	r3, [r4, r7]
  pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8005472:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005474:	491e      	ldr	r1, [pc, #120]	; (80054f0 <R3_1_CurrentReadingCalibration+0x110>)
  pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	65e3      	str	r3, [r4, #92]	; 0x5c
  pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 800547a:	6e23      	ldr	r3, [r4, #96]	; 0x60
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800547c:	2008      	movs	r0, #8
  pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->PhaseCOffset = pHandle->PhaseCOffset / NB_CONVERSIONS;
 8005482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	6663      	str	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_GetPhaseCurrents;
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <R3_1_CurrentReadingCalibration+0x114>)
 800548a:	6063      	str	r3, [r4, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800548c:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <R3_1_CurrentReadingCalibration+0x118>)
 800548e:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005490:	4b1a      	ldr	r3, [pc, #104]	; (80054fc <R3_1_CurrentReadingCalibration+0x11c>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	400a      	ands	r2, r1
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	400a      	ands	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	400a      	ands	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 80054a4:	226c      	movs	r2, #108	; 0x6c
 80054a6:	5aa2      	ldrh	r2, [r4, r2]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80054a8:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80054aa:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80054ac:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80054ae:	69a9      	ldr	r1, [r5, #24]
 80054b0:	4301      	orrs	r1, r0
 80054b2:	61a9      	str	r1, [r5, #24]
 80054b4:	2180      	movs	r1, #128	; 0x80
 80054b6:	69aa      	ldr	r2, [r5, #24]
 80054b8:	0109      	lsls	r1, r1, #4
 80054ba:	4311      	orrs	r1, r2
 80054bc:	61a9      	str	r1, [r5, #24]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4302      	orrs	r2, r0
 80054c2:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 80054c4:	6a2a      	ldr	r2, [r5, #32]
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <R3_1_CurrentReadingCalibration+0x120>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 80054cc:	2376      	movs	r3, #118	; 0x76
 80054ce:	54e6      	strb	r6, [r4, r3]
}
 80054d0:	bcf0      	pop	{r4, r5, r6, r7}
 80054d2:	46bb      	mov	fp, r7
 80054d4:	46b2      	mov	sl, r6
 80054d6:	46a9      	mov	r9, r5
 80054d8:	46a0      	mov	r8, r4
 80054da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	fffffaaa 	.word	0xfffffaaa
 80054e4:	08004fbd 	.word	0x08004fbd
 80054e8:	08005191 	.word	0x08005191
 80054ec:	08005009 	.word	0x08005009
 80054f0:	fffff7ff 	.word	0xfffff7ff
 80054f4:	08004e3d 	.word	0x08004e3d
 80054f8:	080051b1 	.word	0x080051b1
 80054fc:	40012c1c 	.word	0x40012c1c
 8005500:	00000555 	.word	0x00000555

08005504 <R3_1_TIMx_UP_IRQHandler>:
  * @brief  It contains the TIMx Update event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 8005504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005506:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005508:	4b18      	ldr	r3, [pc, #96]	; (800556c <R3_1_TIMx_UP_IRQHandler+0x68>)
  
  /* Set the trigger polarity as computed inside SetADCSampPointSectX*/
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 800550a:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800550c:	4c18      	ldr	r4, [pc, #96]	; (8005570 <R3_1_TIMx_UP_IRQHandler+0x6c>)
 800550e:	68da      	ldr	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005510:	00ed      	lsls	r5, r5, #3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005512:	4022      	ands	r2, r4
 8005514:	430a      	orrs	r2, r1
 8005516:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	4916      	ldr	r1, [pc, #88]	; (8005574 <R3_1_TIMx_UP_IRQHandler+0x70>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800551c:	2404      	movs	r4, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800551e:	400a      	ands	r2, r1
 8005520:	432a      	orrs	r2, r5
 8005522:	60da      	str	r2, [r3, #12]
  /* set ADC trigger source */
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_TRGO);
  /* Set scan direction according to the sector */  
  LL_ADC_REG_SetSequencerScanDirection(ADC1, pHandle->pParams_str->ADCScandir[pHandle->_Super.Sector]<<ADC_CFGR1_SCANDIR_Pos);
 8005524:	223a      	movs	r2, #58	; 0x3a
 8005526:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8005528:	5c82      	ldrb	r2, [r0, r2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800552a:	68df      	ldr	r7, [r3, #12]
 800552c:	18b1      	adds	r1, r6, r2
 800552e:	316c      	adds	r1, #108	; 0x6c
 8005530:	7809      	ldrb	r1, [r1, #0]
 8005532:	43a7      	bics	r7, r4
 8005534:	0089      	lsls	r1, r1, #2
  /* Configure the ADC scheduler as selected inside SetADCSampPointSectX*/
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8005536:	3206      	adds	r2, #6
 8005538:	4339      	orrs	r1, r7
 800553a:	0092      	lsls	r2, r2, #2
 800553c:	60d9      	str	r1, [r3, #12]
 800553e:	18b2      	adds	r2, r6, r2
 8005540:	6852      	ldr	r2, [r2, #4]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28
  /* ReConfigure sampling time, as deconfigured by reg_conv_manager */
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 8005544:	226a      	movs	r2, #106	; 0x6a
 8005546:	5cb2      	ldrb	r2, [r6, r2]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8005548:	2607      	movs	r6, #7
 800554a:	6959      	ldr	r1, [r3, #20]
 800554c:	43b1      	bics	r1, r6
 800554e:	430a      	orrs	r2, r1
 8005550:	615a      	str	r2, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005552:	4a09      	ldr	r2, [pc, #36]	; (8005578 <R3_1_TIMx_UP_IRQHandler+0x74>)
 8005554:	3669      	adds	r6, #105	; 0x69
 8005556:	6851      	ldr	r1, [r2, #4]
 8005558:	4331      	orrs	r1, r6
 800555a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(ADCx->CR,
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	4907      	ldr	r1, [pc, #28]	; (800557c <R3_1_TIMx_UP_IRQHandler+0x78>)
 8005560:	400a      	ands	r2, r1
 8005562:	4322      	orrs	r2, r4
 8005564:	609a      	str	r2, [r3, #8]
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
  /* ADC needs to be restarted because DMA is configured as limited */
  LL_ADC_REG_StartConversion( ADC1 );

  /* Reset the ADC trigger edge for next conversion */
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005566:	6685      	str	r5, [r0, #104]	; 0x68

  return &pHandle->_Super.Motor;
 8005568:	3046      	adds	r0, #70	; 0x46
}
 800556a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800556c:	40012400 	.word	0x40012400
 8005570:	fffff3ff 	.word	0xfffff3ff
 8005574:	fffff23f 	.word	0xfffff23f
 8005578:	40012c00 	.word	0x40012c00
 800557c:	7fffffe8 	.word	0x7fffffe8

08005580 <F0XX_BRK_IRQHandler>:
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
__weak void * F0XX_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005580:	2272      	movs	r2, #114	; 0x72
 8005582:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005584:	5c9a      	ldrb	r2, [r3, r2]
 8005586:	2a02      	cmp	r2, #2
 8005588:	d108      	bne.n	800559c <F0XX_BRK_IRQHandler+0x1c>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800558a:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 800558c:	6919      	ldr	r1, [r3, #16]
 800558e:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	6959      	ldr	r1, [r3, #20]
 8005594:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	6293      	str	r3, [r2, #40]	; 0x28
  }
  pHandle->OverCurrentFlag = true;
 800559c:	2374      	movs	r3, #116	; 0x74
 800559e:	2201      	movs	r2, #1
 80055a0:	54c2      	strb	r2, [r0, r3]

  return MC_NULL;
}
 80055a2:	2000      	movs	r0, #0
 80055a4:	4770      	bx	lr
 80055a6:	46c0      	nop			; (mov r8, r8)

080055a8 <R3_1_IsOverCurrentOccurred>:
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  uint16_t retVal = MC_NO_FAULTS;


  if ( pHandle->OverVoltageFlag == true )
 80055a8:	2275      	movs	r2, #117	; 0x75
{
 80055aa:	b510      	push	{r4, lr}
  if ( pHandle->OverVoltageFlag == true )
 80055ac:	5c81      	ldrb	r1, [r0, r2]
{
 80055ae:	0003      	movs	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d00b      	beq.n	80055cc <R3_1_IsOverCurrentOccurred+0x24>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80055b4:	2100      	movs	r1, #0
 80055b6:	2442      	movs	r4, #66	; 0x42
 80055b8:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 80055ba:	2002      	movs	r0, #2
  }

  if ( pHandle->OverCurrentFlag == true )
 80055bc:	2274      	movs	r2, #116	; 0x74
 80055be:	5c99      	ldrb	r1, [r3, r2]
 80055c0:	2900      	cmp	r1, #0
 80055c2:	d002      	beq.n	80055ca <R3_1_IsOverCurrentOccurred+0x22>
  {
    retVal |= MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
 80055c4:	2100      	movs	r1, #0
    retVal |= MC_BREAK_IN;
 80055c6:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 80055c8:	5499      	strb	r1, [r3, r2]
  }
  return retVal;
}
 80055ca:	bd10      	pop	{r4, pc}
 80055cc:	2440      	movs	r4, #64	; 0x40
  uint16_t retVal = MC_NO_FAULTS;
 80055ce:	2000      	movs	r0, #0
 80055d0:	e7f4      	b.n	80055bc <R3_1_IsOverCurrentOccurred+0x14>
 80055d2:	46c0      	nop			; (mov r8, r8)

080055d4 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80055d4:	8b83      	ldrh	r3, [r0, #28]
 80055d6:	8b42      	ldrh	r2, [r0, #26]
{
 80055d8:	b510      	push	{r4, lr}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80055da:	18d2      	adds	r2, r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80055dc:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80055de:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <RVBS_Clear+0x22>
 80055e4:	2300      	movs	r3, #0
  {
    pHandle->aBuffer[index] = aux;
 80055e6:	6a04      	ldr	r4, [r0, #32]
 80055e8:	0059      	lsls	r1, r3, #1
 80055ea:	530a      	strh	r2, [r1, r4]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80055ec:	3301      	adds	r3, #1
 80055ee:	8b01      	ldrh	r1, [r0, #24]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	4299      	cmp	r1, r3
 80055f4:	d8f8      	bhi.n	80055e8 <RVBS_Clear+0x14>
  }
  pHandle->_Super.LatestConv = aux;
 80055f6:	0413      	lsls	r3, r2, #16
 80055f8:	431a      	orrs	r2, r3
 80055fa:	6042      	str	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80055fc:	2325      	movs	r3, #37	; 0x25
 80055fe:	2200      	movs	r2, #0
 8005600:	54c2      	strb	r2, [r0, r3]
}
 8005602:	bd10      	pop	{r4, pc}

08005604 <RVBS_Init>:
{
 8005604:	b510      	push	{r4, lr}
 8005606:	0004      	movs	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005608:	300c      	adds	r0, #12
 800560a:	f7fc f907 	bl	800181c <RCM_RegisterRegConv>
 800560e:	2326      	movs	r3, #38	; 0x26
 8005610:	54e0      	strb	r0, [r4, r3]
  RVBS_Clear( pHandle );
 8005612:	0020      	movs	r0, r4
 8005614:	f7ff ffde 	bl	80055d4 <RVBS_Clear>
}
 8005618:	bd10      	pop	{r4, pc}
 800561a:	46c0      	nop			; (mov r8, r8)

0800561c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800561c:	88c3      	ldrh	r3, [r0, #6]
 800561e:	8b42      	ldrh	r2, [r0, #26]
 8005620:	429a      	cmp	r2, r3
 8005622:	d305      	bcc.n	8005630 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005624:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8005626:	4283      	cmp	r3, r0
 8005628:	4180      	sbcs	r0, r0
 800562a:	4240      	negs	r0, r0
 800562c:	0080      	lsls	r0, r0, #2
  }
  return fault;
}
 800562e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8005630:	2002      	movs	r0, #2
 8005632:	e7fc      	b.n	800562e <RVBS_CheckFaultState+0x12>

08005634 <RVBS_CalcAvVbus>:
{
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005636:	2326      	movs	r3, #38	; 0x26
{
 8005638:	0004      	movs	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800563a:	5cc0      	ldrb	r0, [r0, r3]
 800563c:	f7fc f988 	bl	8001950 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8005640:	4b15      	ldr	r3, [pc, #84]	; (8005698 <RVBS_CalcAvVbus+0x64>)
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005642:	0006      	movs	r6, r0
  if ( hAux != 0xFFFF )
 8005644:	4298      	cmp	r0, r3
 8005646:	d01b      	beq.n	8005680 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8005648:	2325      	movs	r3, #37	; 0x25
 800564a:	5ce7      	ldrb	r7, [r4, r3]
 800564c:	6a21      	ldr	r1, [r4, #32]
 800564e:	007b      	lsls	r3, r7, #1
 8005650:	5258      	strh	r0, [r3, r1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005652:	8b25      	ldrh	r5, [r4, #24]
 8005654:	2d00      	cmp	r5, #0
 8005656:	d018      	beq.n	800568a <RVBS_CalcAvVbus+0x56>
 8005658:	2200      	movs	r2, #0
    wtemp = 0;
 800565a:	2000      	movs	r0, #0
      wtemp += pHandle->aBuffer[i];
 800565c:	0053      	lsls	r3, r2, #1
 800565e:	5a5b      	ldrh	r3, [r3, r1]
 8005660:	18c0      	adds	r0, r0, r3
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005662:	1c53      	adds	r3, r2, #1
 8005664:	b2da      	uxtb	r2, r3
 8005666:	42aa      	cmp	r2, r5
 8005668:	d3f8      	bcc.n	800565c <RVBS_CalcAvVbus+0x28>
    wtemp /= pHandle->LowPassFilterBW;
 800566a:	0029      	movs	r1, r5
 800566c:	f7fa fd4c 	bl	8000108 <__udivsi3>
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005670:	3d01      	subs	r5, #1
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005672:	80e0      	strh	r0, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8005674:	80a6      	strh	r6, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005676:	42af      	cmp	r7, r5
 8005678:	da09      	bge.n	800568e <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 800567a:	2325      	movs	r3, #37	; 0x25
 800567c:	3701      	adds	r7, #1
 800567e:	54e7      	strb	r7, [r4, r3]
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005680:	0020      	movs	r0, r4
 8005682:	f7ff ffcb 	bl	800561c <RVBS_CheckFaultState>
 8005686:	8120      	strh	r0, [r4, #8]
}
 8005688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800568a:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 800568c:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 800568e:	2325      	movs	r3, #37	; 0x25
 8005690:	2200      	movs	r2, #0
 8005692:	54e2      	strb	r2, [r4, r3]
 8005694:	e7f4      	b.n	8005680 <RVBS_CalcAvVbus+0x4c>
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	0000ffff 	.word	0x0000ffff

0800569c <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 800569c:	2300      	movs	r3, #0
{
 800569e:	b510      	push	{r4, lr}
  pHandle->Ext = 0;
 80056a0:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 80056a2:	6043      	str	r3, [r0, #4]
  pHandle->RampRemainingStep = 0u;
 80056a4:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80056a6:	6103      	str	r3, [r0, #16]
  pHandle->ScalingFactor = 1u;
 80056a8:	3301      	adds	r3, #1
 80056aa:	6143      	str	r3, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
 80056ac:	3018      	adds	r0, #24
 80056ae:	f000 fb17 	bl	8005ce0 <FD_Init>
#endif

}
 80056b2:	bd10      	pop	{r4, pc}

080056b4 <SPD_GetElAngle>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
 80056b4:	2304      	movs	r3, #4
 80056b6:	5ec0      	ldrsh	r0, [r0, r3]
}
 80056b8:	4770      	bx	lr
 80056ba:	46c0      	nop			; (mov r8, r8)

080056bc <SPD_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
 80056bc:	230c      	movs	r3, #12
 80056be:	5ec0      	ldrsh	r0, [r0, r3]
}
 80056c0:	4770      	bx	lr
 80056c2:	46c0      	nop			; (mov r8, r8)

080056c4 <SPD_GetInstElSpeedDpp>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
 80056c4:	2310      	movs	r3, #16
 80056c6:	5ec0      	ldrsh	r0, [r0, r3]
}
 80056c8:	4770      	bx	lr
 80056ca:	46c0      	nop			; (mov r8, r8)

080056cc <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 80056cc:	b570      	push	{r4, r5, r6, lr}
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 80056ce:	2200      	movs	r2, #0
 80056d0:	5e8a      	ldrsh	r2, [r1, r2]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80056d2:	78c5      	ldrb	r5, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80056d4:	7803      	ldrb	r3, [r0, #0]
  if ( *pMecSpeedUnit < 0 )
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	db24      	blt.n	8005724 <SPD_IsMecSpeedReliable+0x58>
    hAux = -( *pMecSpeedUnit );
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 80056da:	b292      	uxth	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80056dc:	8ac6      	ldrh	r6, [r0, #22]
  {
    SpeedError = true;
 80056de:	2401      	movs	r4, #1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80056e0:	8a81      	ldrh	r1, [r0, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80056e2:	4296      	cmp	r6, r2
 80056e4:	d802      	bhi.n	80056ec <SPD_IsMecSpeedReliable+0x20>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80056e6:	4291      	cmp	r1, r2
 80056e8:	4192      	sbcs	r2, r2
 80056ea:	4254      	negs	r4, r2
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80056ec:	2212      	movs	r2, #18
 80056ee:	5e81      	ldrsh	r1, [r0, r2]
 80056f0:	2900      	cmp	r1, #0
 80056f2:	db14      	blt.n	800571e <SPD_IsMecSpeedReliable+0x52>
    hAux = -( pHandle->hMecAccelUnitP );
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 80056f4:	b289      	uxth	r1, r1
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80056f6:	8b02      	ldrh	r2, [r0, #24]
 80056f8:	428a      	cmp	r2, r1
 80056fa:	d301      	bcc.n	8005700 <SPD_IsMecSpeedReliable+0x34>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80056fc:	2c00      	cmp	r4, #0
 80056fe:	d009      	beq.n	8005714 <SPD_IsMecSpeedReliable+0x48>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8005700:	429d      	cmp	r5, r3
 8005702:	d901      	bls.n	8005708 <SPD_IsMecSpeedReliable+0x3c>
    {
      bSpeedErrorNumber++;
 8005704:	3301      	adds	r3, #1
 8005706:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005708:	7003      	strb	r3, [r0, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800570a:	1b58      	subs	r0, r3, r5
 800570c:	1e42      	subs	r2, r0, #1
 800570e:	4190      	sbcs	r0, r2

  return ( SpeedSensorReliability );
 8005710:	b2c0      	uxtb	r0, r0
}
 8005712:	bd70      	pop	{r4, r5, r6, pc}
      bSpeedErrorNumber = 0u;
 8005714:	42ab      	cmp	r3, r5
 8005716:	4164      	adcs	r4, r4
 8005718:	4264      	negs	r4, r4
 800571a:	4023      	ands	r3, r4
 800571c:	e7f4      	b.n	8005708 <SPD_IsMecSpeedReliable+0x3c>
    hAux = -( pHandle->hMecAccelUnitP );
 800571e:	4249      	negs	r1, r1
 8005720:	b289      	uxth	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 8005722:	e7e8      	b.n	80056f6 <SPD_IsMecSpeedReliable+0x2a>
    hAux = -( *pMecSpeedUnit );
 8005724:	4252      	negs	r2, r2
 8005726:	b292      	uxth	r2, r2
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 8005728:	e7d8      	b.n	80056dc <SPD_IsMecSpeedReliable+0x10>
 800572a:	46c0      	nop			; (mov r8, r8)

0800572c <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 800572c:	0003      	movs	r3, r0
 800572e:	b510      	push	{r4, lr}
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 8005730:	210c      	movs	r1, #12
 8005732:	5e42      	ldrsh	r2, [r0, r1]
  wAux *= INT16_MAX;
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005734:	2114      	movs	r1, #20
 8005736:	5e59      	ldrsh	r1, [r3, r1]
  wAux *= INT16_MAX;
 8005738:	03d0      	lsls	r0, r2, #15
 800573a:	1a80      	subs	r0, r0, r2
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800573c:	f7fa fd6e 	bl	800021c <__divsi3>
  return ( int16_t )wAux;
 8005740:	b200      	sxth	r0, r0
}
 8005742:	bd10      	pop	{r4, pc}

08005744 <STC_Init>:
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
 8005744:	232a      	movs	r3, #42	; 0x2a
  pHandle->SPD = SPD_Handle;
 8005746:	6142      	str	r2, [r0, #20]
  pHandle->PISpeed = pPI;
 8005748:	6101      	str	r1, [r0, #16]
  pHandle->Mode = pHandle->ModeDefault;
 800574a:	5cc3      	ldrb	r3, [r0, r3]
 800574c:	7003      	strb	r3, [r0, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800574e:	222c      	movs	r2, #44	; 0x2c
 8005750:	5e83      	ldrsh	r3, [r0, r2]
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	6043      	str	r3, [r0, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005756:	222e      	movs	r2, #46	; 0x2e
 8005758:	5e83      	ldrsh	r3, [r0, r2]
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8005762:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005764:	6183      	str	r3, [r0, #24]
}
 8005766:	4770      	bx	lr

08005768 <STC_GetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
 8005768:	6940      	ldr	r0, [r0, #20]
}
 800576a:	4770      	bx	lr

0800576c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800576c:	7803      	ldrb	r3, [r0, #0]
{
 800576e:	b510      	push	{r4, lr}
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005770:	2b01      	cmp	r3, #1
 8005772:	d000      	beq.n	8005776 <STC_Clear+0xa>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8005774:	bd10      	pop	{r4, pc}
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005776:	2100      	movs	r1, #0
 8005778:	6900      	ldr	r0, [r0, #16]
 800577a:	f7ff f993 	bl	8004aa4 <PID_SetIntegralTerm>
}
 800577e:	e7f9      	b.n	8005774 <STC_Clear+0x8>

08005780 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8005780:	6842      	ldr	r2, [r0, #4]
 8005782:	17d3      	asrs	r3, r2, #31
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	0c18      	lsrs	r0, r3, #16
 8005788:	1880      	adds	r0, r0, r2
 800578a:	1400      	asrs	r0, r0, #16
}
 800578c:	4770      	bx	lr
 800578e:	46c0      	nop			; (mov r8, r8)

08005790 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8005790:	6882      	ldr	r2, [r0, #8]
 8005792:	17d3      	asrs	r3, r2, #31
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	0c18      	lsrs	r0, r3, #16
 8005798:	1880      	adds	r0, r0, r2
 800579a:	1400      	asrs	r0, r0, #16
}
 800579c:	4770      	bx	lr
 800579e:	46c0      	nop			; (mov r8, r8)

080057a0 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80057a0:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 80057a2:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80057a4:	60c3      	str	r3, [r0, #12]
}
 80057a6:	4770      	bx	lr

080057a8 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80057aa:	7803      	ldrb	r3, [r0, #0]
{
 80057ac:	0004      	movs	r4, r0
 80057ae:	000e      	movs	r6, r1
 80057b0:	0017      	movs	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d016      	beq.n	80057e4 <STC_ExecRamp+0x3c>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80057b6:	6840      	ldr	r0, [r0, #4]
 80057b8:	17c3      	asrs	r3, r0, #31
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	181b      	adds	r3, r3, r0
 80057c0:	141d      	asrs	r5, r3, #16

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80057c2:	8be3      	ldrh	r3, [r4, #30]
 80057c4:	4299      	cmp	r1, r3
 80057c6:	dd01      	ble.n	80057cc <STC_ExecRamp+0x24>
      AllowedRange = false;
 80057c8:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 80057ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 80057cc:	2224      	movs	r2, #36	; 0x24
 80057ce:	5ea3      	ldrsh	r3, [r4, r2]
 80057d0:	428b      	cmp	r3, r1
 80057d2:	dcf9      	bgt.n	80057c8 <STC_ExecRamp+0x20>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 80057d4:	8c23      	ldrh	r3, [r4, #32]
 80057d6:	4299      	cmp	r1, r3
 80057d8:	da0e      	bge.n	80057f8 <STC_ExecRamp+0x50>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 80057da:	2222      	movs	r2, #34	; 0x22
 80057dc:	5ea3      	ldrsh	r3, [r4, r2]
 80057de:	428b      	cmp	r3, r1
 80057e0:	dbf2      	blt.n	80057c8 <STC_ExecRamp+0x20>
 80057e2:	e009      	b.n	80057f8 <STC_ExecRamp+0x50>
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80057e4:	f7ff ffd4 	bl	8005790 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80057e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80057ea:	0005      	movs	r5, r0
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80057ec:	429e      	cmp	r6, r3
 80057ee:	dceb      	bgt.n	80057c8 <STC_ExecRamp+0x20>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80057f0:	2228      	movs	r2, #40	; 0x28
 80057f2:	5ea3      	ldrsh	r3, [r4, r2]
 80057f4:	42b3      	cmp	r3, r6
 80057f6:	dce7      	bgt.n	80057c8 <STC_ExecRamp+0x20>
    if ( hDurationms == 0u )
 80057f8:	2f00      	cmp	r7, #0
 80057fa:	d109      	bne.n	8005810 <STC_ExecRamp+0x68>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80057fc:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80057fe:	0436      	lsls	r6, r6, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005800:	2b01      	cmp	r3, #1
 8005802:	d015      	beq.n	8005830 <STC_ExecRamp+0x88>
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8005804:	60a6      	str	r6, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8005806:	2300      	movs	r3, #0
 8005808:	2001      	movs	r0, #1
 800580a:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 800580c:	61a3      	str	r3, [r4, #24]
 800580e:	e7dc      	b.n	80057ca <STC_ExecRamp+0x22>
      wAux /= 1000u;
 8005810:	21fa      	movs	r1, #250	; 0xfa
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005812:	8ba0      	ldrh	r0, [r4, #28]
      wAux /= 1000u;
 8005814:	0089      	lsls	r1, r1, #2
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005816:	4378      	muls	r0, r7
      pHandle->TargetFinal = hTargetFinal;
 8005818:	8066      	strh	r6, [r4, #2]
      wAux /= 1000u;
 800581a:	f7fa fc75 	bl	8000108 <__udivsi3>
      pHandle->RampRemainingStep++;
 800581e:	1c41      	adds	r1, r0, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005820:	1b70      	subs	r0, r6, r5
      pHandle->RampRemainingStep++;
 8005822:	60e1      	str	r1, [r4, #12]
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005824:	0400      	lsls	r0, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8005826:	f7fa fcf9 	bl	800021c <__divsi3>
      pHandle->IncDecAmount = wAux1;
 800582a:	61a0      	str	r0, [r4, #24]
 800582c:	2001      	movs	r0, #1
 800582e:	e7cc      	b.n	80057ca <STC_ExecRamp+0x22>
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005830:	6066      	str	r6, [r4, #4]
 8005832:	e7e8      	b.n	8005806 <STC_ExecRamp+0x5e>

08005834 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8005834:	2300      	movs	r3, #0
 8005836:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005838:	6183      	str	r3, [r0, #24]
}
 800583a:	4770      	bx	lr

0800583c <STC_CalcTorqueReference>:
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800583c:	7802      	ldrb	r2, [r0, #0]
{
 800583e:	b570      	push	{r4, r5, r6, lr}
 8005840:	0005      	movs	r5, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005842:	2a00      	cmp	r2, #0
 8005844:	d112      	bne.n	800586c <STC_CalcTorqueReference+0x30>
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005846:	68eb      	ldr	r3, [r5, #12]
    wCurrentReference = pHandle->TorqueRef;
 8005848:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 800584a:	2b01      	cmp	r3, #1
 800584c:	d912      	bls.n	8005874 <STC_CalcTorqueReference+0x38>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800584e:	69a9      	ldr	r1, [r5, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8005850:	3b01      	subs	r3, #1
    wCurrentReference += pHandle->IncDecAmount;
 8005852:	468c      	mov	ip, r1
 8005854:	4466      	add	r6, ip
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005856:	17f4      	asrs	r4, r6, #31
 8005858:	0424      	lsls	r4, r4, #16
 800585a:	0c24      	lsrs	r4, r4, #16
 800585c:	19a4      	adds	r4, r4, r6
    pHandle->RampRemainingStep--;
 800585e:	60eb      	str	r3, [r5, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005860:	1424      	asrs	r4, r4, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005862:	2a01      	cmp	r2, #1
 8005864:	d00f      	beq.n	8005886 <STC_CalcTorqueReference+0x4a>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8005866:	60ae      	str	r6, [r5, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005868:	b220      	sxth	r0, r4
  }

  return hTorqueReference;
}
 800586a:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 800586c:	68eb      	ldr	r3, [r5, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800586e:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 8005870:	2b01      	cmp	r3, #1
 8005872:	d8ec      	bhi.n	800584e <STC_CalcTorqueReference+0x12>
  else if ( pHandle->RampRemainingStep == 1u )
 8005874:	2b01      	cmp	r3, #1
 8005876:	d012      	beq.n	800589e <STC_CalcTorqueReference+0x62>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005878:	17f0      	asrs	r0, r6, #31
 800587a:	0400      	lsls	r0, r0, #16
 800587c:	0c00      	lsrs	r0, r0, #16
 800587e:	1980      	adds	r0, r0, r6
 8005880:	1404      	asrs	r4, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005882:	2a01      	cmp	r2, #1
 8005884:	d1ef      	bne.n	8005866 <STC_CalcTorqueReference+0x2a>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8005886:	6968      	ldr	r0, [r5, #20]
 8005888:	f7ff ff18 	bl	80056bc <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800588c:	1a20      	subs	r0, r4, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800588e:	b201      	sxth	r1, r0
 8005890:	6928      	ldr	r0, [r5, #16]
 8005892:	f7ff f913 	bl	8004abc <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005896:	0403      	lsls	r3, r0, #16
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8005898:	606e      	str	r6, [r5, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800589a:	60ab      	str	r3, [r5, #8]
 800589c:	e7e5      	b.n	800586a <STC_CalcTorqueReference+0x2e>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800589e:	2302      	movs	r3, #2
 80058a0:	5eec      	ldrsh	r4, [r5, r3]
    pHandle->RampRemainingStep = 0u;
 80058a2:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80058a4:	0426      	lsls	r6, r4, #16
    pHandle->RampRemainingStep = 0u;
 80058a6:	60eb      	str	r3, [r5, #12]
 80058a8:	e7db      	b.n	8005862 <STC_CalcTorqueReference+0x26>
 80058aa:	46c0      	nop			; (mov r8, r8)

080058ac <STC_GetMecSpeedRefUnitDefault>:
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
 80058ac:	232c      	movs	r3, #44	; 0x2c
 80058ae:	5ec0      	ldrsh	r0, [r0, r3]
}
 80058b0:	4770      	bx	lr
 80058b2:	46c0      	nop			; (mov r8, r8)

080058b4 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
 80058b4:	8bc0      	ldrh	r0, [r0, #30]
}
 80058b6:	4770      	bx	lr

080058b8 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
 80058b8:	2324      	movs	r3, #36	; 0x24
 80058ba:	5ec0      	ldrsh	r0, [r0, r3]
}
 80058bc:	4770      	bx	lr
 80058be:	46c0      	nop			; (mov r8, r8)

080058c0 <STC_GetDefaultIqdref>:
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 80058c0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80058c2:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 80058c4:	041b      	lsls	r3, r3, #16
{
 80058c6:	b082      	sub	sp, #8
  return IqdRefDefault;
 80058c8:	4318      	orrs	r0, r3
}
 80058ca:	b002      	add	sp, #8
 80058cc:	4770      	bx	lr
 80058ce:	46c0      	nop			; (mov r8, r8)

080058d0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 80058d0:	b510      	push	{r4, lr}
 80058d2:	0004      	movs	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 80058d4:	6940      	ldr	r0, [r0, #20]
 80058d6:	f7ff fef1 	bl	80056bc <SPD_GetAvrgMecSpeedUnit>
 80058da:	0400      	lsls	r0, r0, #16
 80058dc:	6060      	str	r0, [r4, #4]
}
 80058de:	bd10      	pop	{r4, pc}

080058e0 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80058e0:	2300      	movs	r3, #0
 80058e2:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80058e4:	8043      	strh	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 80058e6:	8083      	strh	r3, [r0, #4]
}
 80058e8:	4770      	bx	lr
 80058ea:	46c0      	nop			; (mov r8, r8)

080058ec <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 80058ec:	0003      	movs	r3, r0
 80058ee:	b510      	push	{r4, lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80058f0:	885c      	ldrh	r4, [r3, #2]
  State_t LocalState =  pHandle->bState;
 80058f2:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80058f4:	430c      	orrs	r4, r1
 80058f6:	4394      	bics	r4, r2
 80058f8:	0022      	movs	r2, r4
 80058fa:	805c      	strh	r4, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80058fc:	889c      	ldrh	r4, [r3, #4]
 80058fe:	4321      	orrs	r1, r4
 8005900:	8099      	strh	r1, [r3, #4]

  if ( LocalState == FAULT_NOW )
 8005902:	280a      	cmp	r0, #10
 8005904:	d006      	beq.n	8005914 <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8005906:	2a00      	cmp	r2, #0
 8005908:	d100      	bne.n	800590c <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800590a:	bd10      	pop	{r4, pc}
      pHandle->bState = FAULT_NOW;
 800590c:	220a      	movs	r2, #10
      LocalState = FAULT_NOW;
 800590e:	200a      	movs	r0, #10
      pHandle->bState = FAULT_NOW;
 8005910:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 8005912:	e7fa      	b.n	800590a <STM_FaultProcessing+0x1e>
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8005914:	2a00      	cmp	r2, #0
 8005916:	d1f8      	bne.n	800590a <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 8005918:	320b      	adds	r2, #11
 800591a:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 800591c:	3001      	adds	r0, #1
 800591e:	e7f4      	b.n	800590a <STM_FaultProcessing+0x1e>

08005920 <STM_NextState>:
  switch ( bCurrentState )
 8005920:	7803      	ldrb	r3, [r0, #0]
{
 8005922:	b510      	push	{r4, lr}
 8005924:	0004      	movs	r4, r0
  switch ( bCurrentState )
 8005926:	2b14      	cmp	r3, #20
 8005928:	d807      	bhi.n	800593a <STM_NextState+0x1a>
 800592a:	4a35      	ldr	r2, [pc, #212]	; (8005a00 <STM_NextState+0xe0>)
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	58d3      	ldr	r3, [r2, r3]
 8005930:	469f      	mov	pc, r3
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005932:	290e      	cmp	r1, #14
 8005934:	d013      	beq.n	800595e <STM_NextState+0x3e>
      if ( bState == ANY_STOP )
 8005936:	2907      	cmp	r1, #7
 8005938:	d011      	beq.n	800595e <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800593a:	2302      	movs	r3, #2
 800593c:	000a      	movs	r2, r1
 800593e:	439a      	bics	r2, r3
 8005940:	0013      	movs	r3, r2
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005942:	2b01      	cmp	r3, #1
 8005944:	d016      	beq.n	8005974 <STM_NextState+0x54>
 8005946:	2000      	movs	r0, #0
 8005948:	2907      	cmp	r1, #7
 800594a:	d00a      	beq.n	8005962 <STM_NextState+0x42>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800594c:	2200      	movs	r2, #0
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	0020      	movs	r0, r4
 8005952:	f7ff ffcb 	bl	80058ec <STM_FaultProcessing>
 8005956:	2000      	movs	r0, #0
 8005958:	e003      	b.n	8005962 <STM_NextState+0x42>
      if ( bState == IDLE )
 800595a:	2900      	cmp	r1, #0
 800595c:	d1ed      	bne.n	800593a <STM_NextState+0x1a>
    pHandle->bState = bNewState;
 800595e:	2001      	movs	r0, #1
 8005960:	7021      	strb	r1, [r4, #0]
}
 8005962:	bd10      	pop	{r4, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8005964:	2911      	cmp	r1, #17
 8005966:	d8f1      	bhi.n	800594c <STM_NextState+0x2c>
 8005968:	4b26      	ldr	r3, [pc, #152]	; (8005a04 <STM_NextState+0xe4>)
 800596a:	40cb      	lsrs	r3, r1
 800596c:	07db      	lsls	r3, r3, #31
 800596e:	d4f6      	bmi.n	800595e <STM_NextState+0x3e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005970:	2903      	cmp	r1, #3
 8005972:	d1eb      	bne.n	800594c <STM_NextState+0x2c>
 8005974:	2000      	movs	r0, #0
  return ( bChangeState );
 8005976:	e7f4      	b.n	8005962 <STM_NextState+0x42>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8005978:	2907      	cmp	r1, #7
 800597a:	d0f0      	beq.n	800595e <STM_NextState+0x3e>
 800597c:	000b      	movs	r3, r1
 800597e:	3b0d      	subs	r3, #13
 8005980:	2b01      	cmp	r3, #1
 8005982:	d8da      	bhi.n	800593a <STM_NextState+0x1a>
 8005984:	e7eb      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005986:	2913      	cmp	r1, #19
 8005988:	d0e9      	beq.n	800595e <STM_NextState+0x3e>
 800598a:	2302      	movs	r3, #2
 800598c:	000a      	movs	r2, r1
 800598e:	439a      	bics	r2, r3
 8005990:	0013      	movs	r3, r2
 8005992:	2a05      	cmp	r2, #5
 8005994:	d1d5      	bne.n	8005942 <STM_NextState+0x22>
 8005996:	e7e2      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005998:	000b      	movs	r3, r1
 800599a:	22fd      	movs	r2, #253	; 0xfd
 800599c:	3b12      	subs	r3, #18
 800599e:	4213      	tst	r3, r2
 80059a0:	d1c9      	bne.n	8005936 <STM_NextState+0x16>
 80059a2:	e7dc      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80059a4:	2911      	cmp	r1, #17
 80059a6:	d1c6      	bne.n	8005936 <STM_NextState+0x16>
 80059a8:	e7d9      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 80059aa:	2902      	cmp	r1, #2
 80059ac:	d1c3      	bne.n	8005936 <STM_NextState+0x16>
 80059ae:	e7d6      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80059b0:	1f0b      	subs	r3, r1, #4
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d8bf      	bhi.n	8005936 <STM_NextState+0x16>
 80059b6:	e7d2      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 80059b8:	2904      	cmp	r1, #4
 80059ba:	d1bc      	bne.n	8005936 <STM_NextState+0x16>
 80059bc:	e7cf      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80059be:	2912      	cmp	r1, #18
 80059c0:	d1b9      	bne.n	8005936 <STM_NextState+0x16>
 80059c2:	e7cc      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d0ca      	beq.n	800595e <STM_NextState+0x3e>
 80059c8:	290c      	cmp	r1, #12
 80059ca:	d1b6      	bne.n	800593a <STM_NextState+0x1a>
 80059cc:	e7c7      	b.n	800595e <STM_NextState+0x3e>
      if ( bState == STOP_IDLE )
 80059ce:	2909      	cmp	r1, #9
 80059d0:	d1b3      	bne.n	800593a <STM_NextState+0x1a>
 80059d2:	e7c4      	b.n	800595e <STM_NextState+0x3e>
      if ( bState == STOP )
 80059d4:	2908      	cmp	r1, #8
 80059d6:	d1b0      	bne.n	800593a <STM_NextState+0x1a>
 80059d8:	e7c1      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80059da:	1f8b      	subs	r3, r1, #6
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d8ac      	bhi.n	800593a <STM_NextState+0x1a>
 80059e0:	e7bd      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80059e2:	2308      	movs	r3, #8
 80059e4:	000a      	movs	r2, r1
 80059e6:	439a      	bics	r2, r3
 80059e8:	2a07      	cmp	r2, #7
 80059ea:	d1a6      	bne.n	800593a <STM_NextState+0x1a>
 80059ec:	e7b7      	b.n	800595e <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80059ee:	2302      	movs	r3, #2
 80059f0:	000a      	movs	r2, r1
 80059f2:	439a      	bics	r2, r3
 80059f4:	2a01      	cmp	r2, #1
 80059f6:	d0b2      	beq.n	800595e <STM_NextState+0x3e>
           || ( bState == ICLWAIT ) )
 80059f8:	290c      	cmp	r1, #12
 80059fa:	d1a4      	bne.n	8005946 <STM_NextState+0x26>
 80059fc:	e7af      	b.n	800595e <STM_NextState+0x3e>
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	08006b58 	.word	0x08006b58
 8005a04:	00030092 	.word	0x00030092

08005a08 <STM_GetState>:
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
 8005a08:	7800      	ldrb	r0, [r0, #0]
}
 8005a0a:	4770      	bx	lr

08005a0c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8005a0c:	7802      	ldrb	r2, [r0, #0]
{
 8005a0e:	0003      	movs	r3, r0
  bool bToBeReturned = false;
 8005a10:	2000      	movs	r0, #0
  if ( pHandle->bState == FAULT_OVER )
 8005a12:	2a0b      	cmp	r2, #11
 8005a14:	d103      	bne.n	8005a1e <STM_FaultAcknowledged+0x12>
  {
    pHandle->bState = STOP_IDLE;
 8005a16:	3a02      	subs	r2, #2
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005a18:	8098      	strh	r0, [r3, #4]
    pHandle->bState = STOP_IDLE;
 8005a1a:	701a      	strb	r2, [r3, #0]
    bToBeReturned = true;
 8005a1c:	3001      	adds	r0, #1
  }

  return ( bToBeReturned );
}
 8005a1e:	4770      	bx	lr

08005a20 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8005a20:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8005a22:	8840      	ldrh	r0, [r0, #2]
 8005a24:	0400      	lsls	r0, r0, #16
 8005a26:	4318      	orrs	r0, r3

  return LocalFaultState;
}
 8005a28:	4770      	bx	lr
 8005a2a:	46c0      	nop			; (mov r8, r8)

08005a2c <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 8005a2c:	b510      	push	{r4, lr}

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8005a2e:	f7fe fb71 	bl	8004114 <FCP_Init>
}
 8005a32:	bd10      	pop	{r4, pc}

08005a34 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005a34:	2197      	movs	r1, #151	; 0x97
{
 8005a36:	b510      	push	{r4, lr}
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005a38:	5c42      	ldrb	r2, [r0, r1]
{
 8005a3a:	0003      	movs	r3, r0
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005a3c:	2a00      	cmp	r2, #0
 8005a3e:	d018      	beq.n	8005a72 <UFCP_TX_IRQ_Handler+0x3e>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8005a40:	2298      	movs	r2, #152	; 0x98
 8005a42:	5c82      	ldrb	r2, [r0, r2]
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	d00c      	beq.n	8005a62 <UFCP_TX_IRQ_Handler+0x2e>
 8005a48:	2a01      	cmp	r2, #1
 8005a4a:	d028      	beq.n	8005a9e <UFCP_TX_IRQ_Handler+0x6a>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005a4c:	7d40      	ldrb	r0, [r0, #21]
 8005a4e:	3001      	adds	r0, #1
 8005a50:	4282      	cmp	r2, r0
 8005a52:	dc0f      	bgt.n	8005a74 <UFCP_TX_IRQ_Handler+0x40>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8005a54:	1899      	adds	r1, r3, r2
 8005a56:	7d08      	ldrb	r0, [r1, #20]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005a58:	2190      	movs	r1, #144	; 0x90
 8005a5a:	0049      	lsls	r1, r1, #1
 8005a5c:	5859      	ldr	r1, [r3, r1]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8005a5e:	8508      	strh	r0, [r1, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005a60:	e004      	b.n	8005a6c <UFCP_TX_IRQ_Handler+0x38>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8005a62:	7d01      	ldrb	r1, [r0, #20]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005a64:	2090      	movs	r0, #144	; 0x90
 8005a66:	0040      	lsls	r0, r0, #1
 8005a68:	5818      	ldr	r0, [r3, r0]
 8005a6a:	8501      	strh	r1, [r0, #40]	; 0x28
    {
      pBaseHandle->TxFrameLevel++;
 8005a6c:	2198      	movs	r1, #152	; 0x98
 8005a6e:	3201      	adds	r2, #1
 8005a70:	545a      	strb	r2, [r3, r1]

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8005a72:	bd10      	pop	{r4, pc}
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 8005a74:	2296      	movs	r2, #150	; 0x96
 8005a76:	5c98      	ldrb	r0, [r3, r2]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005a78:	328a      	adds	r2, #138	; 0x8a
 8005a7a:	589a      	ldr	r2, [r3, r2]
 8005a7c:	8510      	strh	r0, [r2, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	2001      	movs	r0, #1
 8005a84:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005a88:	2480      	movs	r4, #128	; 0x80
 8005a8a:	6810      	ldr	r0, [r2, #0]
 8005a8c:	43a0      	bics	r0, r4
 8005a8e:	6010      	str	r0, [r2, #0]
 8005a90:	f38c 8810 	msr	PRIMASK, ip
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8005a94:	2200      	movs	r2, #0
 8005a96:	545a      	strb	r2, [r3, r1]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005a98:	cb09      	ldmia	r3, {r0, r3}
 8005a9a:	4798      	blx	r3
 8005a9c:	e7e9      	b.n	8005a72 <UFCP_TX_IRQ_Handler+0x3e>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8005a9e:	7d41      	ldrb	r1, [r0, #21]
        break;
 8005aa0:	e7e0      	b.n	8005a64 <UFCP_TX_IRQ_Handler+0x30>
 8005aa2:	46c0      	nop			; (mov r8, r8)

08005aa4 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005aa4:	228e      	movs	r2, #142	; 0x8e
 8005aa6:	0052      	lsls	r2, r2, #1
 8005aa8:	5c81      	ldrb	r1, [r0, r2]
{
 8005aaa:	0003      	movs	r3, r0
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005aac:	2001      	movs	r0, #1
  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	d10d      	bne.n	8005ace <UFCP_Receive+0x2a>
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005ab2:	5298      	strh	r0, [r3, r2]
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8005ab4:	3204      	adds	r2, #4
 8005ab6:	589a      	ldr	r2, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abc:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005ac0:	6813      	ldr	r3, [r2, #0]
 8005ac2:	301f      	adds	r0, #31
 8005ac4:	4303      	orrs	r3, r0
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	f381 8810 	msr	PRIMASK, r1
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8005acc:	381e      	subs	r0, #30
  }

  return ret_val;
}
 8005ace:	4770      	bx	lr

08005ad0 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	0005      	movs	r5, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005ad4:	2097      	movs	r0, #151	; 0x97
 8005ad6:	5c2c      	ldrb	r4, [r5, r0]
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005ad8:	3896      	subs	r0, #150	; 0x96
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005ada:	2c00      	cmp	r4, #0
 8005adc:	d000      	beq.n	8005ae0 <UFCP_Send+0x10>
  }

  return ret_val;
}
 8005ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005ae0:	0028      	movs	r0, r5
    while ( size-- ) *dest++ = *buffer++;
 8005ae2:	1e5e      	subs	r6, r3, #1
    pHandle->TxFrame.Code = code;
 8005ae4:	7529      	strb	r1, [r5, #20]
    while ( size-- ) *dest++ = *buffer++;
 8005ae6:	b2f1      	uxtb	r1, r6
 8005ae8:	468c      	mov	ip, r1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005aea:	3016      	adds	r0, #22
    pHandle->TxFrame.Size = size;
 8005aec:	756b      	strb	r3, [r5, #21]
    while ( size-- ) *dest++ = *buffer++;
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02d      	beq.n	8005b4e <UFCP_Send+0x7e>
 8005af2:	2102      	movs	r1, #2
 8005af4:	1c57      	adds	r7, r2, #1
 8005af6:	1bc7      	subs	r7, r0, r7
 8005af8:	42b9      	cmp	r1, r7
 8005afa:	4189      	sbcs	r1, r1
 8005afc:	2708      	movs	r7, #8
 8005afe:	4567      	cmp	r7, ip
 8005b00:	41bf      	sbcs	r7, r7
 8005b02:	4249      	negs	r1, r1
 8005b04:	427f      	negs	r7, r7
 8005b06:	420f      	tst	r7, r1
 8005b08:	d03b      	beq.n	8005b82 <UFCP_Send+0xb2>
 8005b0a:	0001      	movs	r1, r0
 8005b0c:	4311      	orrs	r1, r2
 8005b0e:	0789      	lsls	r1, r1, #30
 8005b10:	d137      	bne.n	8005b82 <UFCP_Send+0xb2>
 8005b12:	2100      	movs	r1, #0
 8005b14:	089f      	lsrs	r7, r3, #2
 8005b16:	5856      	ldr	r6, [r2, r1]
 8005b18:	3401      	adds	r4, #1
 8005b1a:	b2e4      	uxtb	r4, r4
 8005b1c:	5046      	str	r6, [r0, r1]
 8005b1e:	3104      	adds	r1, #4
 8005b20:	42a7      	cmp	r7, r4
 8005b22:	d1f8      	bne.n	8005b16 <UFCP_Send+0x46>
 8005b24:	2103      	movs	r1, #3
 8005b26:	001c      	movs	r4, r3
 8005b28:	438c      	bics	r4, r1
 8005b2a:	0021      	movs	r1, r4
 8005b2c:	1912      	adds	r2, r2, r4
 8005b2e:	1900      	adds	r0, r0, r4
 8005b30:	4664      	mov	r4, ip
 8005b32:	1a66      	subs	r6, r4, r1
 8005b34:	b2f6      	uxtb	r6, r6
 8005b36:	428b      	cmp	r3, r1
 8005b38:	d009      	beq.n	8005b4e <UFCP_Send+0x7e>
 8005b3a:	7813      	ldrb	r3, [r2, #0]
 8005b3c:	7003      	strb	r3, [r0, #0]
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	d005      	beq.n	8005b4e <UFCP_Send+0x7e>
 8005b42:	7853      	ldrb	r3, [r2, #1]
 8005b44:	7043      	strb	r3, [r0, #1]
 8005b46:	2e01      	cmp	r6, #1
 8005b48:	d001      	beq.n	8005b4e <UFCP_Send+0x7e>
 8005b4a:	7893      	ldrb	r3, [r2, #2]
 8005b4c:	7083      	strb	r3, [r0, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005b4e:	0028      	movs	r0, r5
 8005b50:	3014      	adds	r0, #20
 8005b52:	f7fe faf9 	bl	8004148 <FCP_CalcCRC>
 8005b56:	2396      	movs	r3, #150	; 0x96
    pHandle->TxFrameLevel = 0;
 8005b58:	2200      	movs	r2, #0
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005b5a:	54e8      	strb	r0, [r5, r3]
    pHandle->TxFrameLevel = 0;
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	54ea      	strb	r2, [r5, r3]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005b60:	3b97      	subs	r3, #151	; 0x97
 8005b62:	3297      	adds	r2, #151	; 0x97
 8005b64:	54ab      	strb	r3, [r5, r2]
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8005b66:	3289      	adds	r2, #137	; 0x89
 8005b68:	58aa      	ldr	r2, [r5, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005b72:	2080      	movs	r0, #128	; 0x80
 8005b74:	6813      	ldr	r3, [r2, #0]
 8005b76:	4303      	orrs	r3, r0
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	f381 8810 	msr	PRIMASK, r1
 8005b7e:	387e      	subs	r0, #126	; 0x7e
 8005b80:	e7ad      	b.n	8005ade <UFCP_Send+0xe>
    while ( size-- ) *dest++ = *buffer++;
 8005b82:	2100      	movs	r1, #0
 8005b84:	5c54      	ldrb	r4, [r2, r1]
 8005b86:	5444      	strb	r4, [r0, r1]
 8005b88:	3101      	adds	r1, #1
 8005b8a:	b2cc      	uxtb	r4, r1
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	d1f9      	bne.n	8005b84 <UFCP_Send+0xb4>
 8005b90:	e7dd      	b.n	8005b4e <UFCP_Send+0x7e>
 8005b92:	46c0      	nop			; (mov r8, r8)

08005b94 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005b94:	228e      	movs	r2, #142	; 0x8e
{
 8005b96:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005b98:	0052      	lsls	r2, r2, #1
 8005b9a:	5c83      	ldrb	r3, [r0, r2]
{
 8005b9c:	0004      	movs	r4, r0
 8005b9e:	b083      	sub	sp, #12
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d011      	beq.n	8005bc8 <UFCP_RX_IRQ_Handler+0x34>
    switch ( pBaseHandle->RxFrameLevel )
 8005ba4:	201e      	movs	r0, #30
 8005ba6:	30ff      	adds	r0, #255	; 0xff
 8005ba8:	5c23      	ldrb	r3, [r4, r0]
    uint8_t rx_byte = (uint8_t) rx_data;
 8005baa:	b2cd      	uxtb	r5, r1
    switch ( pBaseHandle->RxFrameLevel )
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <UFCP_RX_IRQ_Handler+0x3a>
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d03b      	beq.n	8005c2c <UFCP_RX_IRQ_Handler+0x98>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8005bb4:	269a      	movs	r6, #154	; 0x9a
 8005bb6:	5da1      	ldrb	r1, [r4, r6]
 8005bb8:	3101      	adds	r1, #1
 8005bba:	428b      	cmp	r3, r1
 8005bbc:	dc0f      	bgt.n	8005bde <UFCP_RX_IRQ_Handler+0x4a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005bbe:	18e2      	adds	r2, r4, r3
 8005bc0:	3299      	adds	r2, #153	; 0x99
          pBaseHandle->RxFrameLevel++;
 8005bc2:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005bc4:	7015      	strb	r5, [r2, #0]
          pBaseHandle->RxFrameLevel++;
 8005bc6:	5423      	strb	r3, [r4, r0]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005bc8:	4823      	ldr	r0, [pc, #140]	; (8005c58 <UFCP_RX_IRQ_Handler+0xc4>)
}
 8005bca:	b003      	add	sp, #12
 8005bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pBaseHandle->RxFrame.Code = rx_byte;
 8005bce:	2399      	movs	r3, #153	; 0x99
 8005bd0:	54e5      	strb	r5, [r4, r3]
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8005bd2:	8a23      	ldrh	r3, [r4, #16]
 8005bd4:	8263      	strh	r3, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	5423      	strb	r3, [r4, r0]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8005bda:	4820      	ldr	r0, [pc, #128]	; (8005c5c <UFCP_RX_IRQ_Handler+0xc8>)
        break;
 8005bdc:	e7f5      	b.n	8005bca <UFCP_RX_IRQ_Handler+0x36>
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8005bde:	271c      	movs	r7, #28
          pBaseHandle->RxTimeoutCountdown = 0;
 8005be0:	2300      	movs	r3, #0
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8005be2:	37ff      	adds	r7, #255	; 0xff
 8005be4:	55e5      	strb	r5, [r4, r7]
          pBaseHandle->RxTimeoutCountdown = 0;
 8005be6:	8263      	strh	r3, [r4, #18]
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8005be8:	3321      	adds	r3, #33	; 0x21
 8005bea:	33ff      	adds	r3, #255	; 0xff
 8005bec:	58e1      	ldr	r1, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bee:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf2:	3b20      	subs	r3, #32
 8005bf4:	3bff      	subs	r3, #255	; 0xff
 8005bf6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005bfa:	2520      	movs	r5, #32
 8005bfc:	680b      	ldr	r3, [r1, #0]
 8005bfe:	43ab      	bics	r3, r5
 8005c00:	600b      	str	r3, [r1, #0]
 8005c02:	f380 8810 	msr	PRIMASK, r0
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005c06:	2300      	movs	r3, #0
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005c08:	0020      	movs	r0, r4
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005c0a:	54a3      	strb	r3, [r4, r2]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005c0c:	3099      	adds	r0, #153	; 0x99
 8005c0e:	f7fe fa9b 	bl	8004148 <FCP_CalcCRC>
 8005c12:	5de3      	ldrb	r3, [r4, r7]
 8005c14:	4283      	cmp	r3, r0
 8005c16:	d114      	bne.n	8005c42 <UFCP_RX_IRQ_Handler+0xae>
                                                      pBaseHandle->RxFrame.Buffer,
 8005c18:	0022      	movs	r2, r4
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005c1a:	2199      	movs	r1, #153	; 0x99
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	5da3      	ldrb	r3, [r4, r6]
 8005c20:	5c61      	ldrb	r1, [r4, r1]
                                                      pBaseHandle->RxFrame.Buffer,
 8005c22:	329b      	adds	r2, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005c24:	68a4      	ldr	r4, [r4, #8]
 8005c26:	47a0      	blx	r4
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005c28:	480d      	ldr	r0, [pc, #52]	; (8005c60 <UFCP_RX_IRQ_Handler+0xcc>)
 8005c2a:	e7ce      	b.n	8005bca <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxFrame.Size = rx_byte;
 8005c2c:	239a      	movs	r3, #154	; 0x9a
 8005c2e:	54e5      	strb	r5, [r4, r3]
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8005c30:	060b      	lsls	r3, r1, #24
 8005c32:	d402      	bmi.n	8005c3a <UFCP_RX_IRQ_Handler+0xa6>
        pBaseHandle->RxFrameLevel++;
 8005c34:	2302      	movs	r3, #2
 8005c36:	5423      	strb	r3, [r4, r0]
 8005c38:	e7c6      	b.n	8005bc8 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	5423      	strb	r3, [r4, r0]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005c3e:	4806      	ldr	r0, [pc, #24]	; (8005c58 <UFCP_RX_IRQ_Handler+0xc4>)
 8005c40:	e7c3      	b.n	8005bca <UFCP_RX_IRQ_Handler+0x36>
            error_code = FCP_MSG_RX_BAD_CRC;
 8005c42:	466b      	mov	r3, sp
 8005c44:	1dda      	adds	r2, r3, #7
 8005c46:	230a      	movs	r3, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005c48:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8005c4a:	7013      	strb	r3, [r2, #0]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005c4c:	0020      	movs	r0, r4
 8005c4e:	3b09      	subs	r3, #9
 8005c50:	f7ff ff3e 	bl	8005ad0 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005c54:	4802      	ldr	r0, [pc, #8]	; (8005c60 <UFCP_RX_IRQ_Handler+0xcc>)
  return ret_val;
 8005c56:	e7b8      	b.n	8005bca <UFCP_RX_IRQ_Handler+0x36>
 8005c58:	08006bac 	.word	0x08006bac
 8005c5c:	08006bae 	.word	0x08006bae
 8005c60:	08006bb0 	.word	0x08006bb0

08005c64 <UFCP_OVR_IRQ_Handler>:
{
 8005c64:	b500      	push	{lr}
 8005c66:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8005c68:	466b      	mov	r3, sp
 8005c6a:	1dda      	adds	r2, r3, #7
 8005c6c:	2308      	movs	r3, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005c6e:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8005c70:	7013      	strb	r3, [r2, #0]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005c72:	3b07      	subs	r3, #7
 8005c74:	f7ff ff2c 	bl	8005ad0 <UFCP_Send>
}
 8005c78:	b003      	add	sp, #12
 8005c7a:	bd00      	pop	{pc}

08005c7c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005c7c:	238e      	movs	r3, #142	; 0x8e
 8005c7e:	2200      	movs	r2, #0
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	54c2      	strb	r2, [r0, r3]
}
 8005c84:	4770      	bx	lr
 8005c86:	46c0      	nop			; (mov r8, r8)

08005c88 <RUC_SetPhaseDurationms>:
 8005c88:	004b      	lsls	r3, r1, #1
 8005c8a:	1859      	adds	r1, r3, r1
 8005c8c:	0089      	lsls	r1, r1, #2
 8005c8e:	1841      	adds	r1, r0, r1
 8005c90:	818a      	strh	r2, [r1, #12]
 8005c92:	4770      	bx	lr

08005c94 <RUC_SetPhaseFinalMecSpeedUnit>:
 8005c94:	004b      	lsls	r3, r1, #1
 8005c96:	1859      	adds	r1, r3, r1
 8005c98:	0089      	lsls	r1, r1, #2
 8005c9a:	1841      	adds	r1, r0, r1
 8005c9c:	81ca      	strh	r2, [r1, #14]
 8005c9e:	4770      	bx	lr

08005ca0 <RUC_SetPhaseFinalTorque>:
 8005ca0:	004b      	lsls	r3, r1, #1
 8005ca2:	1859      	adds	r1, r3, r1
 8005ca4:	0089      	lsls	r1, r1, #2
 8005ca6:	1841      	adds	r1, r0, r1
 8005ca8:	820a      	strh	r2, [r1, #16]
 8005caa:	4770      	bx	lr

08005cac <RUC_GetPhaseDurationms>:
 8005cac:	004b      	lsls	r3, r1, #1
 8005cae:	1859      	adds	r1, r3, r1
 8005cb0:	0089      	lsls	r1, r1, #2
 8005cb2:	1841      	adds	r1, r0, r1
 8005cb4:	8988      	ldrh	r0, [r1, #12]
 8005cb6:	4770      	bx	lr

08005cb8 <RUC_GetPhaseFinalMecSpeedUnit>:
 8005cb8:	004b      	lsls	r3, r1, #1
 8005cba:	1859      	adds	r1, r3, r1
 8005cbc:	0089      	lsls	r1, r1, #2
 8005cbe:	1841      	adds	r1, r0, r1
 8005cc0:	230e      	movs	r3, #14
 8005cc2:	5ec8      	ldrsh	r0, [r1, r3]
 8005cc4:	4770      	bx	lr
 8005cc6:	46c0      	nop			; (mov r8, r8)

08005cc8 <RUC_GetPhaseFinalTorque>:
 8005cc8:	004b      	lsls	r3, r1, #1
 8005cca:	1859      	adds	r1, r3, r1
 8005ccc:	0089      	lsls	r1, r1, #2
 8005cce:	1841      	adds	r1, r0, r1
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	5ec8      	ldrsh	r0, [r1, r3]
 8005cd4:	4770      	bx	lr
 8005cd6:	46c0      	nop			; (mov r8, r8)

08005cd8 <RUC_GetNumberOfPhases>:
 8005cd8:	2348      	movs	r3, #72	; 0x48
 8005cda:	5cc0      	ldrb	r0, [r0, r3]
 8005cdc:	4770      	bx	lr
 8005cde:	46c0      	nop			; (mov r8, r8)

08005ce0 <FD_Init>:
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	7003      	strb	r3, [r0, #0]
 8005ce4:	6043      	str	r3, [r0, #4]
 8005ce6:	6083      	str	r3, [r0, #8]
 8005ce8:	60c3      	str	r3, [r0, #12]
 8005cea:	6103      	str	r3, [r0, #16]
 8005cec:	6143      	str	r3, [r0, #20]
 8005cee:	6183      	str	r3, [r0, #24]
 8005cf0:	61c3      	str	r3, [r0, #28]
 8005cf2:	6203      	str	r3, [r0, #32]
 8005cf4:	6243      	str	r3, [r0, #36]	; 0x24
 8005cf6:	6283      	str	r3, [r0, #40]	; 0x28
 8005cf8:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005cfa:	6303      	str	r3, [r0, #48]	; 0x30
 8005cfc:	6343      	str	r3, [r0, #52]	; 0x34
 8005cfe:	6383      	str	r3, [r0, #56]	; 0x38
 8005d00:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005d02:	4770      	bx	lr

08005d04 <__libc_init_array>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	2600      	movs	r6, #0
 8005d08:	4d0c      	ldr	r5, [pc, #48]	; (8005d3c <__libc_init_array+0x38>)
 8005d0a:	4c0d      	ldr	r4, [pc, #52]	; (8005d40 <__libc_init_array+0x3c>)
 8005d0c:	1b64      	subs	r4, r4, r5
 8005d0e:	10a4      	asrs	r4, r4, #2
 8005d10:	42a6      	cmp	r6, r4
 8005d12:	d109      	bne.n	8005d28 <__libc_init_array+0x24>
 8005d14:	2600      	movs	r6, #0
 8005d16:	f000 f82b 	bl	8005d70 <_init>
 8005d1a:	4d0a      	ldr	r5, [pc, #40]	; (8005d44 <__libc_init_array+0x40>)
 8005d1c:	4c0a      	ldr	r4, [pc, #40]	; (8005d48 <__libc_init_array+0x44>)
 8005d1e:	1b64      	subs	r4, r4, r5
 8005d20:	10a4      	asrs	r4, r4, #2
 8005d22:	42a6      	cmp	r6, r4
 8005d24:	d105      	bne.n	8005d32 <__libc_init_array+0x2e>
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	00b3      	lsls	r3, r6, #2
 8005d2a:	58eb      	ldr	r3, [r5, r3]
 8005d2c:	4798      	blx	r3
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7ee      	b.n	8005d10 <__libc_init_array+0xc>
 8005d32:	00b3      	lsls	r3, r6, #2
 8005d34:	58eb      	ldr	r3, [r5, r3]
 8005d36:	4798      	blx	r3
 8005d38:	3601      	adds	r6, #1
 8005d3a:	e7f2      	b.n	8005d22 <__libc_init_array+0x1e>
 8005d3c:	08006bb4 	.word	0x08006bb4
 8005d40:	08006bb4 	.word	0x08006bb4
 8005d44:	08006bb4 	.word	0x08006bb4
 8005d48:	08006bb8 	.word	0x08006bb8

08005d4c <memcpy>:
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d100      	bne.n	8005d56 <memcpy+0xa>
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	5ccc      	ldrb	r4, [r1, r3]
 8005d58:	54c4      	strb	r4, [r0, r3]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	e7f8      	b.n	8005d50 <memcpy+0x4>

08005d5e <memset>:
 8005d5e:	0003      	movs	r3, r0
 8005d60:	1882      	adds	r2, r0, r2
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d100      	bne.n	8005d68 <memset+0xa>
 8005d66:	4770      	bx	lr
 8005d68:	7019      	strb	r1, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	e7f9      	b.n	8005d62 <memset+0x4>
	...

08005d70 <_init>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr

08005d7c <_fini>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr
