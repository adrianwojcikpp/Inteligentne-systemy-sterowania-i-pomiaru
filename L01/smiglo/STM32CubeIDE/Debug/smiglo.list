
smiglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006614  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007500  08007500  000206e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007500  08007500  000206e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007500  08007500  000206e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e4  20000000  08007508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200006e4  08007bec  000206e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  20000ab4  08007bec  00020ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206e4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003258e  00000000  00000000  0002070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003deff  00000000  00000000  00052c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006680  00000000  00000000  00090b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  00097220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007d7db  00000000  00000000  000987b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003990  00000000  00000000  00115f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018d6e  00000000  00000000  00119920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0013268e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aec  00000000  00000000  00132760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001c8ea  00000000  00000000  0013624c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006e4 	.word	0x200006e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080066bc 	.word	0x080066bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006e8 	.word	0x200006e8
 8000104:	080066bc 	.word	0x080066bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490e      	ldr	r1, [pc, #56]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0b      	ldr	r4, [pc, #44]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800041e:	f002 fae5 	bl	80029ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000422:	f006 f915 	bl	8006650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f000 f851 	bl	80004cc <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	200006e4 	.word	0x200006e4
  ldr r2, =_sidata
 8000438:	08007508 	.word	0x08007508
  ldr r2, =_sbss
 800043c:	200006e4 	.word	0x200006e4
  ldr r4, =_ebss
 8000440:	20000ab4 	.word	0x20000ab4

08000444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_IRQHandler>
	...

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044c:	222c      	movs	r2, #44	; 0x2c
 800044e:	2100      	movs	r1, #0
 8000450:	a809      	add	r0, sp, #36	; 0x24
 8000452:	f006 f92a 	bl	80066aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	2210      	movs	r2, #16
 8000458:	2100      	movs	r1, #0
 800045a:	4668      	mov	r0, sp
 800045c:	f006 f925 	bl	80066aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	2210      	movs	r2, #16
 8000462:	2100      	movs	r1, #0
 8000464:	a804      	add	r0, sp, #16
 8000466:	f006 f920 	bl	80066aa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800046a:	2312      	movs	r3, #18
 800046c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	3b10      	subs	r3, #16
 8000470:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000472:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000478:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800047e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000482:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000484:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f002 fddb 	bl	8003040 <HAL_RCC_OscConfig>
 800048a:	2800      	cmp	r0, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	2207      	movs	r2, #7
 8000494:	2302      	movs	r3, #2
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800049e:	2101      	movs	r1, #1
 80004a0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	9202      	str	r2, [sp, #8]
 80004a4:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a6:	f003 f825 	bl	80034f4 <HAL_RCC_ClockConfig>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x6a>
 80004ae:	b672      	cpsid	i
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <SystemClock_Config+0x68>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004b2:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004b6:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b8:	f003 f932 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	2800      	cmp	r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x7c>
 80004c0:	b672      	cpsid	i
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <SystemClock_Config+0x7a>
  HAL_RCC_EnableCSS();
 80004c4:	f003 f8d4 	bl	8003670 <HAL_RCC_EnableCSS>
}
 80004c8:	b015      	add	sp, #84	; 0x54
 80004ca:	bd30      	pop	{r4, r5, pc}

080004cc <main>:
{
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80004d0:	f002 fab4 	bl	8002a3c <HAL_Init>
  SystemClock_Config();
 80004d4:	f7ff ffb8 	bl	8000448 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	2214      	movs	r2, #20
 80004da:	2100      	movs	r1, #0
 80004dc:	a80e      	add	r0, sp, #56	; 0x38
 80004de:	f006 f8e4 	bl	80066aa <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	4cd5      	ldr	r4, [pc, #852]	; (800083c <main+0x370>)
 80004e6:	03c9      	lsls	r1, r1, #15
 80004e8:	6962      	ldr	r2, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80004ea:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ec:	430a      	orrs	r2, r1
 80004ee:	6162      	str	r2, [r4, #20]
 80004f0:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80004f2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f4:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	6962      	ldr	r2, [r4, #20]
 80004fe:	0289      	lsls	r1, r1, #10
 8000500:	430a      	orrs	r2, r1
 8000502:	6162      	str	r2, [r4, #20]
 8000504:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000506:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	9302      	str	r3, [sp, #8]
 800050e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000510:	6962      	ldr	r2, [r4, #20]
 8000512:	02c9      	lsls	r1, r1, #11
 8000514:	430a      	orrs	r2, r1
 8000516:	6162      	str	r2, [r4, #20]
 8000518:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800051e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000522:	0109      	lsls	r1, r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000526:	f002 fd85 	bl	8003034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	2090      	movs	r0, #144	; 0x90
 800052e:	2200      	movs	r2, #0
 8000530:	0149      	lsls	r1, r1, #5
 8000532:	05c0      	lsls	r0, r0, #23
 8000534:	f002 fd7e 	bl	8003034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY2_GPIO_Port, OCTH_STBY2_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	48c0      	ldr	r0, [pc, #768]	; (8000840 <main+0x374>)
 800053e:	f002 fd79 	bl	8003034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY1_GPIO_Port, OCTH_STBY1_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	48be      	ldr	r0, [pc, #760]	; (8000840 <main+0x374>)
 8000548:	f002 fd74 	bl	8003034 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800054c:	2384      	movs	r3, #132	; 0x84
 800054e:	2201      	movs	r2, #1
 8000550:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000552:	48bb      	ldr	r0, [pc, #748]	; (8000840 <main+0x374>)
 8000554:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000556:	920e      	str	r2, [sp, #56]	; 0x38
 8000558:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055a:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800055c:	f002 fc5e 	bl	8002e1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8000560:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8000564:	2301      	movs	r3, #1
 8000566:	2602      	movs	r6, #2
 8000568:	2700      	movs	r7, #0
 800056a:	0152      	lsls	r2, r2, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	a90e      	add	r1, sp, #56	; 0x38
 800056e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8000570:	920e      	str	r2, [sp, #56]	; 0x38
 8000572:	930f      	str	r3, [sp, #60]	; 0x3c
 8000574:	9610      	str	r6, [sp, #64]	; 0x40
 8000576:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f002 fc50 	bl	8002e1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 800057c:	22c0      	movs	r2, #192	; 0xc0
 800057e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000580:	48af      	ldr	r0, [pc, #700]	; (8000840 <main+0x374>)
 8000582:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 8000584:	920e      	str	r2, [sp, #56]	; 0x38
 8000586:	930f      	str	r3, [sp, #60]	; 0x3c
 8000588:	9610      	str	r6, [sp, #64]	; 0x40
 800058a:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800058c:	f002 fc46 	bl	8002e1c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000590:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000594:	432b      	orrs	r3, r5
 8000596:	6163      	str	r3, [r4, #20]
 8000598:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059c:	402b      	ands	r3, r5
 800059e:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a0:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	9b00      	ldr	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a4:	f006 f881 	bl	80066aa <memset>
  hadc.Instance = ADC1;
 80005a8:	4ca6      	ldr	r4, [pc, #664]	; (8000844 <main+0x378>)
 80005aa:	4ba7      	ldr	r3, [pc, #668]	; (8000848 <main+0x37c>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ac:	2704      	movs	r7, #4
  hadc.Instance = ADC1;
 80005ae:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	60a3      	str	r3, [r4, #8]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005b6:	61a3      	str	r3, [r4, #24]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80005b8:	61e3      	str	r3, [r4, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80005c0:	2324      	movs	r3, #36	; 0x24
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80005c2:	361e      	adds	r6, #30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005c4:	0020      	movs	r0, r4
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80005c6:	60e6      	str	r6, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005c8:	6125      	str	r5, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	6167      	str	r7, [r4, #20]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80005cc:	54e5      	strb	r5, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ce:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005d0:	f002 fa56 	bl	8002a80 <HAL_ADC_Init>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d001      	beq.n	80005dc <main+0x110>
 80005d8:	b672      	cpsid	i
  while (1)
 80005da:	e7fe      	b.n	80005da <main+0x10e>
  sConfig.Channel = ADC_CHANNEL_3;
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	2203      	movs	r2, #3
 80005e0:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005e2:	0020      	movs	r0, r4
 80005e4:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_3;
 80005e6:	920e      	str	r2, [sp, #56]	; 0x38
 80005e8:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80005ea:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005ec:	f002 faf2 	bl	8002bd4 <HAL_ADC_ConfigChannel>
 80005f0:	2800      	cmp	r0, #0
 80005f2:	d001      	beq.n	80005f8 <main+0x12c>
 80005f4:	b672      	cpsid	i
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x12a>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005f8:	0020      	movs	r0, r4
 80005fa:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 80005fc:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005fe:	f002 fae9 	bl	8002bd4 <HAL_ADC_ConfigChannel>
 8000602:	2800      	cmp	r0, #0
 8000604:	d001      	beq.n	800060a <main+0x13e>
 8000606:	b672      	cpsid	i
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x13c>
  sConfig.Channel = ADC_CHANNEL_5;
 800060a:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800060c:	0020      	movs	r0, r4
 800060e:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 8000610:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000612:	f002 fadf 	bl	8002bd4 <HAL_ADC_ConfigChannel>
 8000616:	2800      	cmp	r0, #0
 8000618:	d001      	beq.n	800061e <main+0x152>
 800061a:	b672      	cpsid	i
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x150>
  sConfig.Channel = ADC_CHANNEL_9;
 800061e:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000620:	0020      	movs	r0, r4
 8000622:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 8000624:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000626:	f002 fad5 	bl	8002bd4 <HAL_ADC_ConfigChannel>
 800062a:	1e07      	subs	r7, r0, #0
 800062c:	d001      	beq.n	8000632 <main+0x166>
 800062e:	b672      	cpsid	i
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x164>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	0001      	movs	r1, r0
 8000634:	2208      	movs	r2, #8
 8000636:	a804      	add	r0, sp, #16
 8000638:	f006 f837 	bl	80066aa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063c:	221c      	movs	r2, #28
 800063e:	0039      	movs	r1, r7
 8000640:	a806      	add	r0, sp, #24
 8000642:	f006 f832 	bl	80066aa <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000646:	2220      	movs	r2, #32
 8000648:	0039      	movs	r1, r7
 800064a:	a80e      	add	r0, sp, #56	; 0x38
 800064c:	f006 f82d 	bl	80066aa <memset>
  htim1.Instance = TIM1;
 8000650:	4c7e      	ldr	r4, [pc, #504]	; (800084c <main+0x380>)
 8000652:	4b7f      	ldr	r3, [pc, #508]	; (8000850 <main+0x384>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000654:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8000656:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000658:	4b7e      	ldr	r3, [pc, #504]	; (8000854 <main+0x388>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800065a:	6067      	str	r7, [r4, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800065c:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	005b      	lsls	r3, r3, #1
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000662:	60a6      	str	r6, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000664:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000666:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800066a:	f003 f96f 	bl	800394c <HAL_TIM_PWM_Init>
 800066e:	2800      	cmp	r0, #0
 8000670:	d001      	beq.n	8000676 <main+0x1aa>
 8000672:	b672      	cpsid	i
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x1a8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000676:	2270      	movs	r2, #112	; 0x70
 8000678:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800067a:	0020      	movs	r0, r4
 800067c:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800067e:	9204      	str	r2, [sp, #16]
 8000680:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000682:	f003 fccb 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000686:	1e02      	subs	r2, r0, #0
 8000688:	d001      	beq.n	800068e <main+0x1c2>
 800068a:	b672      	cpsid	i
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x1c0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068e:	2060      	movs	r0, #96	; 0x60
 8000690:	2100      	movs	r1, #0
 8000692:	9006      	str	r0, [sp, #24]
 8000694:	9107      	str	r1, [sp, #28]
 8000696:	2000      	movs	r0, #0
 8000698:	2100      	movs	r1, #0
 800069a:	9008      	str	r0, [sp, #32]
 800069c:	9109      	str	r1, [sp, #36]	; 0x24
 800069e:	900a      	str	r0, [sp, #40]	; 0x28
 80006a0:	910b      	str	r1, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a2:	0020      	movs	r0, r4
 80006a4:	a906      	add	r1, sp, #24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006a6:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a8:	f003 f9c8 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d001      	beq.n	80006b4 <main+0x1e8>
 80006b0:	b672      	cpsid	i
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x1e6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b4:	2204      	movs	r2, #4
 80006b6:	0020      	movs	r0, r4
 80006b8:	a906      	add	r1, sp, #24
 80006ba:	f003 f9bf 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 80006be:	2800      	cmp	r0, #0
 80006c0:	d001      	beq.n	80006c6 <main+0x1fa>
 80006c2:	b672      	cpsid	i
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x1f8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c6:	2208      	movs	r2, #8
 80006c8:	0020      	movs	r0, r4
 80006ca:	a906      	add	r1, sp, #24
 80006cc:	f003 f9b6 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d001      	beq.n	80006d8 <main+0x20c>
 80006d4:	b672      	cpsid	i
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <main+0x20a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80006d8:	2270      	movs	r2, #112	; 0x70
 80006da:	4b5f      	ldr	r3, [pc, #380]	; (8000858 <main+0x38c>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006dc:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80006de:	9206      	str	r2, [sp, #24]
 80006e0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006e2:	a906      	add	r1, sp, #24
 80006e4:	3a64      	subs	r2, #100	; 0x64
 80006e6:	f003 f9a9 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d001      	beq.n	80006f2 <main+0x226>
 80006ee:	b672      	cpsid	i
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x224>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	920e      	str	r2, [sp, #56]	; 0x38
 80006fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	2313      	movs	r3, #19
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	9210      	str	r2, [sp, #64]	; 0x40
 8000706:	9311      	str	r3, [sp, #68]	; 0x44
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	0152      	lsls	r2, r2, #5
 800070e:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000710:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000712:	a90e      	add	r1, sp, #56	; 0x38
 8000714:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000716:	9212      	str	r2, [sp, #72]	; 0x48
 8000718:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800071a:	f003 fcad 	bl	8004078 <HAL_TIMEx_ConfigBreakDeadTime>
 800071e:	1e05      	subs	r5, r0, #0
 8000720:	d001      	beq.n	8000726 <main+0x25a>
 8000722:	b672      	cpsid	i
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x258>
  HAL_TIM_MspPostInit(&htim1);
 8000726:	0020      	movs	r0, r4
 8000728:	f001 fb7e 	bl	8001e28 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072c:	2210      	movs	r2, #16
 800072e:	0029      	movs	r1, r5
 8000730:	a80e      	add	r0, sp, #56	; 0x38
 8000732:	f005 ffba 	bl	80066aa <memset>
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000736:	2210      	movs	r2, #16
 8000738:	0029      	movs	r1, r5
 800073a:	a806      	add	r0, sp, #24
 800073c:	f005 ffb5 	bl	80066aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	2208      	movs	r2, #8
 8000742:	0029      	movs	r1, r5
 8000744:	a804      	add	r0, sp, #16
 8000746:	f005 ffb0 	bl	80066aa <memset>
  htim2.Instance = TIM2;
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	4c43      	ldr	r4, [pc, #268]	; (800085c <main+0x390>)
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000752:	4b43      	ldr	r3, [pc, #268]	; (8000860 <main+0x394>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000754:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 8000756:	6065      	str	r5, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 800075a:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000760:	f003 f87c 	bl	800385c <HAL_TIM_Base_Init>
 8000764:	2800      	cmp	r0, #0
 8000766:	d001      	beq.n	800076c <main+0x2a0>
 8000768:	b672      	cpsid	i
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x29e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076e:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000772:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000776:	f003 fa83 	bl	8003c80 <HAL_TIM_ConfigClockSource>
 800077a:	2800      	cmp	r0, #0
 800077c:	d001      	beq.n	8000782 <main+0x2b6>
 800077e:	b672      	cpsid	i
  while (1)
 8000780:	e7fe      	b.n	8000780 <main+0x2b4>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000782:	2200      	movs	r2, #0
 8000784:	2300      	movs	r3, #0
 8000786:	9206      	str	r2, [sp, #24]
 8000788:	9307      	str	r3, [sp, #28]
 800078a:	220f      	movs	r2, #15
 800078c:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800078e:	0020      	movs	r0, r4
 8000790:	a906      	add	r1, sp, #24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000792:	9208      	str	r2, [sp, #32]
 8000794:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000796:	f003 fbe1 	bl	8003f5c <HAL_TIMEx_HallSensor_Init>
 800079a:	2800      	cmp	r0, #0
 800079c:	d001      	beq.n	80007a2 <main+0x2d6>
 800079e:	b672      	cpsid	i
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x2d4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80007a2:	2300      	movs	r3, #0
 80007a4:	2250      	movs	r2, #80	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a6:	0020      	movs	r0, r4
 80007a8:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80007aa:	9204      	str	r2, [sp, #16]
 80007ac:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ae:	f003 fc35 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <main+0x2ee>
 80007b6:	b672      	cpsid	i
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x2ec>
  huart1.Instance = USART1;
 80007ba:	482a      	ldr	r0, [pc, #168]	; (8000864 <main+0x398>)
 80007bc:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <main+0x39c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 80007c0:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80007c2:	2296      	movs	r2, #150	; 0x96
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007cc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ce:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d2:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d4:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d6:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d8:	f003 fd60 	bl	800429c <HAL_UART_Init>
 80007dc:	1e04      	subs	r4, r0, #0
 80007de:	d001      	beq.n	80007e4 <main+0x318>
 80007e0:	b672      	cpsid	i
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <main+0x316>
  MX_MotorControl_Init();
 80007e4:	f001 f82c 	bl	8001840 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80007e8:	0022      	movs	r2, r4
 80007ea:	0021      	movs	r1, r4
 80007ec:	200d      	movs	r0, #13
 80007ee:	f002 fa83 	bl	8002cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007f2:	200d      	movs	r0, #13
 80007f4:	f002 fab2 	bl	8002d5c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80007f8:	0022      	movs	r2, r4
 80007fa:	2101      	movs	r1, #1
 80007fc:	2009      	movs	r0, #9
 80007fe:	f002 fa7b 	bl	8002cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000802:	2009      	movs	r0, #9
 8000804:	f002 faaa 	bl	8002d5c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000808:	0022      	movs	r2, r4
 800080a:	2103      	movs	r1, #3
 800080c:	200f      	movs	r0, #15
 800080e:	f002 fa73 	bl	8002cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000812:	200f      	movs	r0, #15
 8000814:	f002 faa2 	bl	8002d5c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000818:	0022      	movs	r2, r4
 800081a:	2103      	movs	r1, #3
 800081c:	201b      	movs	r0, #27
 800081e:	f002 fa6b 	bl	8002cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000822:	201b      	movs	r0, #27
 8000824:	f002 fa9a 	bl	8002d5c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000828:	2005      	movs	r0, #5
 800082a:	0022      	movs	r2, r4
 800082c:	2103      	movs	r1, #3
 800082e:	f002 fa63 	bl	8002cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000832:	2005      	movs	r0, #5
 8000834:	f002 fa92 	bl	8002d5c <HAL_NVIC_EnableIRQ>
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0x36c>
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40021000 	.word	0x40021000
 8000840:	48001400 	.word	0x48001400
 8000844:	20000700 	.word	0x20000700
 8000848:	40012400 	.word	0x40012400
 800084c:	20000784 	.word	0x20000784
 8000850:	40012c00 	.word	0x40012c00
 8000854:	000006b2 	.word	0x000006b2
 8000858:	000006b1 	.word	0x000006b1
 800085c:	200007cc 	.word	0x200007cc
 8000860:	0000ffff 	.word	0x0000ffff
 8000864:	20000814 	.word	0x20000814
 8000868:	40013800 	.word	0x40013800

0800086c <Error_Handler>:
 800086c:	b672      	cpsid	i
  while (1)
 800086e:	e7fe      	b.n	800086e <Error_Handler+0x2>

08000870 <MC_StartMotor1>:
  * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8000870:	b510      	push	{r4, lr}
	return MCI_StartMotor( pMCI[M1] );
 8000872:	4b02      	ldr	r3, [pc, #8]	; (800087c <MC_StartMotor1+0xc>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	f000 f837 	bl	80008e8 <MCI_StartMotor>
}
 800087a:	bd10      	pop	{r4, pc}
 800087c:	200009a0 	.word	0x200009a0

08000880 <MC_StopMotor1>:
  * #IDLE state has been reached back.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8000880:	b510      	push	{r4, lr}
	return MCI_StopMotor( pMCI[M1] );
 8000882:	4b02      	ldr	r3, [pc, #8]	; (800088c <MC_StopMotor1+0xc>)
 8000884:	6818      	ldr	r0, [r3, #0]
 8000886:	f000 f83b 	bl	8000900 <MCI_StopMotor>
}
 800088a:	bd10      	pop	{r4, pc}
 800088c:	200009a0 	.word	0x200009a0

08000890 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
 8000890:	b510      	push	{r4, lr}
	return MCI_GetSTMState( pMCI[M1] );
 8000892:	4b02      	ldr	r3, [pc, #8]	; (800089c <MC_GetSTMStateMotor1+0xc>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	f000 f883 	bl	80009a0 <MCI_GetSTMState>
}
 800089a:	bd10      	pop	{r4, pc}
 800089c:	200009a0 	.word	0x200009a0

080008a0 <MCI_Init>:
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
 80008a0:	6083      	str	r3, [r0, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80008a2:	2300      	movs	r3, #0
  pHandle->pSTM = pSTM;
 80008a4:	6001      	str	r1, [r0, #0]
  pHandle->pSTC = pSTC;
 80008a6:	6042      	str	r2, [r0, #4]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80008a8:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80008aa:	81c3      	strh	r3, [r0, #14]
  pHandle->hFinalTorque = 0;
 80008ac:	8203      	strh	r3, [r0, #16]
  pHandle->hDurationms = 0;
 80008ae:	82c3      	strh	r3, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80008b0:	7603      	strb	r3, [r0, #24]
}
 80008b2:	4770      	bx	lr

080008b4 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008b8:	2302      	movs	r3, #2
 80008ba:	33ff      	adds	r3, #255	; 0xff
  pHandle->hFinalSpeed = hFinalSpeed;
 80008bc:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 80008be:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008c0:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 80008c2:	4770      	bx	lr

080008c4 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008c8:	3b01      	subs	r3, #1
  pHandle->hFinalTorque = hFinalTorque;
 80008ca:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 80008cc:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008ce:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80008d0:	4770      	bx	lr
 80008d2:	46c0      	nop			; (mov r8, r8)

080008d4 <MCI_SetCurrentReferences>:
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80008d4:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008d6:	2301      	movs	r3, #1
{
 80008d8:	b082      	sub	sp, #8
  pHandle->Iqdref.q = Iqdref.q;
 80008da:	8241      	strh	r1, [r0, #18]
  pHandle->Iqdref.d = Iqdref.d;
 80008dc:	0c09      	lsrs	r1, r1, #16
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80008de:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.d = Iqdref.d;
 80008e0:	8281      	strh	r1, [r0, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008e2:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80008e4:	b002      	add	sp, #8
 80008e6:	4770      	bx	lr

080008e8 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80008e8:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80008ea:	2103      	movs	r1, #3
{
 80008ec:	0004      	movs	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80008ee:	6800      	ldr	r0, [r0, #0]
 80008f0:	f005 fa0e 	bl	8005d10 <STM_NextState>

  if ( RetVal == true )
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d001      	beq.n	80008fc <MCI_StartMotor+0x14>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008f8:	2301      	movs	r3, #1
 80008fa:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)

08000900 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 8000900:	b510      	push	{r4, lr}
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000902:	2107      	movs	r1, #7
 8000904:	6800      	ldr	r0, [r0, #0]
 8000906:	f005 fa03 	bl	8005d10 <STM_NextState>
}
 800090a:	bd10      	pop	{r4, pc}

0800090c <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 800090c:	b510      	push	{r4, lr}
  return STM_FaultAcknowledged( pHandle->pSTM );
 800090e:	6800      	ldr	r0, [r0, #0]
 8000910:	f005 fa74 	bl	8005dfc <STM_FaultAcknowledged>
}
 8000914:	bd10      	pop	{r4, pc}
 8000916:	46c0      	nop			; (mov r8, r8)

08000918 <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8000918:	b510      	push	{r4, lr}
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 800091a:	2101      	movs	r1, #1
 800091c:	6800      	ldr	r0, [r0, #0]
 800091e:	f005 f9f7 	bl	8005d10 <STM_NextState>
}
 8000922:	bd10      	pop	{r4, pc}

08000924 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8000924:	b510      	push	{r4, lr}
 8000926:	1e04      	subs	r4, r0, #0
  if ( pHandle != MC_NULL )
 8000928:	d002      	beq.n	8000930 <MCI_ExecBufferedCommands+0xc>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800092a:	7e03      	ldrb	r3, [r0, #24]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d000      	beq.n	8000932 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000930:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000932:	7b02      	ldrb	r2, [r0, #12]
 8000934:	2a02      	cmp	r2, #2
 8000936:	d023      	beq.n	8000980 <MCI_ExecBufferedCommands+0x5c>
 8000938:	2a03      	cmp	r2, #3
 800093a:	d004      	beq.n	8000946 <MCI_ExecBufferedCommands+0x22>
 800093c:	2a01      	cmp	r2, #1
 800093e:	d00e      	beq.n	800095e <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000940:	2303      	movs	r3, #3
 8000942:	7623      	strb	r3, [r4, #24]
}
 8000944:	e7f4      	b.n	8000930 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000946:	2224      	movs	r2, #36	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000948:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800094a:	6880      	ldr	r0, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800094c:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800094e:	5483      	strb	r3, [r0, r2]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000950:	3010      	adds	r0, #16
 8000952:	3a20      	subs	r2, #32
 8000954:	f005 fea0 	bl	8006698 <memcpy>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000958:	2302      	movs	r3, #2
 800095a:	7623      	strb	r3, [r4, #24]
 800095c:	e7e8      	b.n	8000930 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800095e:	2200      	movs	r2, #0
 8000960:	6881      	ldr	r1, [r0, #8]
 8000962:	3323      	adds	r3, #35	; 0x23
 8000964:	54ca      	strb	r2, [r1, r3]
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000966:	6840      	ldr	r0, [r0, #4]
 8000968:	2101      	movs	r1, #1
 800096a:	f005 f911 	bl	8005b90 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 800096e:	8ae2      	ldrh	r2, [r4, #22]
 8000970:	230e      	movs	r3, #14
 8000972:	5ee1      	ldrsh	r1, [r4, r3]
 8000974:	6860      	ldr	r0, [r4, #4]
 8000976:	f005 f90f 	bl	8005b98 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800097a:	2800      	cmp	r0, #0
 800097c:	d0e0      	beq.n	8000940 <MCI_ExecBufferedCommands+0x1c>
 800097e:	e7eb      	b.n	8000958 <MCI_ExecBufferedCommands+0x34>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000980:	2324      	movs	r3, #36	; 0x24
 8000982:	2200      	movs	r2, #0
 8000984:	6881      	ldr	r1, [r0, #8]
 8000986:	54ca      	strb	r2, [r1, r3]
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000988:	6840      	ldr	r0, [r0, #4]
 800098a:	2100      	movs	r1, #0
 800098c:	f005 f900 	bl	8005b90 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000990:	8ae2      	ldrh	r2, [r4, #22]
 8000992:	2310      	movs	r3, #16
 8000994:	5ee1      	ldrsh	r1, [r4, r3]
 8000996:	6860      	ldr	r0, [r4, #4]
 8000998:	f005 f8fe 	bl	8005b98 <STC_ExecRamp>
        break;
 800099c:	e7ed      	b.n	800097a <MCI_ExecBufferedCommands+0x56>
 800099e:	46c0      	nop			; (mov r8, r8)

080009a0 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 80009a0:	b510      	push	{r4, lr}
  return STM_GetState( pHandle->pSTM );
 80009a2:	6800      	ldr	r0, [r0, #0]
 80009a4:	f005 fa28 	bl	8005df8 <STM_GetState>
}
 80009a8:	bd10      	pop	{r4, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)

080009ac <MCI_GetControlMode>:
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
 80009ac:	7e40      	ldrb	r0, [r0, #25]
}
 80009ae:	4770      	bx	lr

080009b0 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 80009b0:	7b02      	ldrb	r2, [r0, #12]
{
 80009b2:	0003      	movs	r3, r0
  int16_t hRetVal = 0;
 80009b4:	2000      	movs	r0, #0
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 80009b6:	2a01      	cmp	r2, #1
 80009b8:	d101      	bne.n	80009be <MCI_GetLastRampFinalSpeed+0xe>
  {
    hRetVal = pHandle->hFinalSpeed;
 80009ba:	200e      	movs	r0, #14
 80009bc:	5e18      	ldrsh	r0, [r3, r0]
  }
  return hRetVal;
}
 80009be:	4770      	bx	lr

080009c0 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 80009c0:	b510      	push	{r4, lr}
   STC_StopRamp( pHandle->pSTC );
 80009c2:	6840      	ldr	r0, [r0, #4]
 80009c4:	f005 f92e 	bl	8005c24 <STC_StopRamp>
}
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)

080009cc <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80009cc:	b510      	push	{r4, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80009ce:	6840      	ldr	r0, [r0, #4]
 80009d0:	f005 f8c2 	bl	8005b58 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80009d4:	f005 f86a 	bl	8005aac <SPD_GetAvrgMecSpeedUnit>
}
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	46c0      	nop			; (mov r8, r8)

080009dc <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 80009dc:	b510      	push	{r4, lr}
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80009de:	6840      	ldr	r0, [r0, #4]
 80009e0:	f005 f8c6 	bl	8005b70 <STC_GetMecSpeedRefUnit>
}
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)

080009e8 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 80009e8:	b500      	push	{lr}
 80009ea:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iab );
 80009ec:	6881      	ldr	r1, [r0, #8]
 80009ee:	2204      	movs	r2, #4
 80009f0:	a801      	add	r0, sp, #4
 80009f2:	f005 fe51 	bl	8006698 <memcpy>
 80009f6:	466b      	mov	r3, sp
 80009f8:	466a      	mov	r2, sp
 80009fa:	88db      	ldrh	r3, [r3, #6]
 80009fc:	8890      	ldrh	r0, [r2, #4]
 80009fe:	041b      	lsls	r3, r3, #16
 8000a00:	4318      	orrs	r0, r3
}
 8000a02:	b003      	add	sp, #12
 8000a04:	bd00      	pop	{pc}
 8000a06:	46c0      	nop			; (mov r8, r8)

08000a08 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8000a08:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Ialphabeta );
 8000a0a:	6881      	ldr	r1, [r0, #8]
{
 8000a0c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Ialphabeta );
 8000a0e:	2204      	movs	r2, #4
 8000a10:	3104      	adds	r1, #4
 8000a12:	a801      	add	r0, sp, #4
 8000a14:	f005 fe40 	bl	8006698 <memcpy>
 8000a18:	466b      	mov	r3, sp
 8000a1a:	466a      	mov	r2, sp
 8000a1c:	88db      	ldrh	r3, [r3, #6]
 8000a1e:	8890      	ldrh	r0, [r2, #4]
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	4318      	orrs	r0, r3
}
 8000a24:	b003      	add	sp, #12
 8000a26:	bd00      	pop	{pc}

08000a28 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 8000a28:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Iqd );
 8000a2a:	6881      	ldr	r1, [r0, #8]
{
 8000a2c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iqd );
 8000a2e:	2204      	movs	r2, #4
 8000a30:	310c      	adds	r1, #12
 8000a32:	a801      	add	r0, sp, #4
 8000a34:	f005 fe30 	bl	8006698 <memcpy>
 8000a38:	466b      	mov	r3, sp
 8000a3a:	466a      	mov	r2, sp
 8000a3c:	88db      	ldrh	r3, [r3, #6]
 8000a3e:	8890      	ldrh	r0, [r2, #4]
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	4318      	orrs	r0, r3
}
 8000a44:	b003      	add	sp, #12
 8000a46:	bd00      	pop	{pc}

08000a48 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 8000a48:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Iqdref );
 8000a4a:	6881      	ldr	r1, [r0, #8]
{
 8000a4c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iqdref );
 8000a4e:	2204      	movs	r2, #4
 8000a50:	3110      	adds	r1, #16
 8000a52:	a801      	add	r0, sp, #4
 8000a54:	f005 fe20 	bl	8006698 <memcpy>
 8000a58:	466b      	mov	r3, sp
 8000a5a:	466a      	mov	r2, sp
 8000a5c:	88db      	ldrh	r3, [r3, #6]
 8000a5e:	8890      	ldrh	r0, [r2, #4]
 8000a60:	041b      	lsls	r3, r3, #16
 8000a62:	4318      	orrs	r0, r3
}
 8000a64:	b003      	add	sp, #12
 8000a66:	bd00      	pop	{pc}

08000a68 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 8000a68:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Vqd );
 8000a6a:	6881      	ldr	r1, [r0, #8]
{
 8000a6c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Vqd );
 8000a6e:	2204      	movs	r2, #4
 8000a70:	3116      	adds	r1, #22
 8000a72:	a801      	add	r0, sp, #4
 8000a74:	f005 fe10 	bl	8006698 <memcpy>
 8000a78:	466b      	mov	r3, sp
 8000a7a:	466a      	mov	r2, sp
 8000a7c:	88db      	ldrh	r3, [r3, #6]
 8000a7e:	8890      	ldrh	r0, [r2, #4]
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	4318      	orrs	r0, r3
}
 8000a84:	b003      	add	sp, #12
 8000a86:	bd00      	pop	{pc}

08000a88 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8000a88:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Valphabeta );
 8000a8a:	6881      	ldr	r1, [r0, #8]
{
 8000a8c:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Valphabeta );
 8000a8e:	2204      	movs	r2, #4
 8000a90:	311a      	adds	r1, #26
 8000a92:	a801      	add	r0, sp, #4
 8000a94:	f005 fe00 	bl	8006698 <memcpy>
 8000a98:	466b      	mov	r3, sp
 8000a9a:	466a      	mov	r2, sp
 8000a9c:	88db      	ldrh	r3, [r3, #6]
 8000a9e:	8890      	ldrh	r0, [r2, #4]
 8000aa0:	041b      	lsls	r3, r3, #16
 8000aa2:	4318      	orrs	r0, r3
}
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd00      	pop	{pc}

08000aa8 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000aa8:	6883      	ldr	r3, [r0, #8]
 8000aaa:	201e      	movs	r0, #30
 8000aac:	5e18      	ldrsh	r0, [r3, r0]
}
 8000aae:	4770      	bx	lr

08000ab0 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000ab0:	6883      	ldr	r3, [r0, #8]
 8000ab2:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000ab4:	8299      	strh	r1, [r3, #20]
}
 8000ab6:	4770      	bx	lr

08000ab8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000ab8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000aba:	6884      	ldr	r4, [r0, #8]
 8000abc:	6840      	ldr	r0, [r0, #4]
 8000abe:	f005 f8f7 	bl	8005cb0 <STC_GetDefaultIqdref>
 8000ac2:	8220      	strh	r0, [r4, #16]
 8000ac4:	0c00      	lsrs	r0, r0, #16
 8000ac6:	8260      	strh	r0, [r4, #18]
}
 8000ac8:	bd10      	pop	{r4, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)

08000acc <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000acc:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <MCM_Clarke+0x48>)
 8000ace:	b201      	sxth	r1, r0
 8000ad0:	1400      	asrs	r0, r0, #16
 8000ad2:	4350      	muls	r0, r2
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000ad4:	434a      	muls	r2, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000ad6:	4253      	negs	r3, r2
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000ad8:	2280      	movs	r2, #128	; 0x80
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	1a1b      	subs	r3, r3, r0
{
 8000ade:	b084      	sub	sp, #16
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000ae0:	13db      	asrs	r3, r3, #15
  if ( wbeta_tmp > INT16_MAX )
 8000ae2:	0212      	lsls	r2, r2, #8
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	da04      	bge.n	8000af2 <MCM_Clarke+0x26>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <MCM_Clarke+0x4c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	da08      	bge.n	8000b00 <MCM_Clarke+0x34>
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MCM_Clarke+0x50>)
 8000af0:	e000      	b.n	8000af4 <MCM_Clarke+0x28>
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MCM_Clarke+0x54>)
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000af4:	0409      	lsls	r1, r1, #16
 8000af6:	041b      	lsls	r3, r3, #16
 8000af8:	0c08      	lsrs	r0, r1, #16
 8000afa:	4318      	orrs	r0, r3
}
 8000afc:	b004      	add	sp, #16
 8000afe:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <MCM_Clarke+0x50>)
 8000b02:	1c18      	adds	r0, r3, #0
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4293      	cmp	r3, r2
 8000b08:	db01      	blt.n	8000b0e <MCM_Clarke+0x42>
 8000b0a:	b203      	sxth	r3, r0
 8000b0c:	e7f2      	b.n	8000af4 <MCM_Clarke+0x28>
 8000b0e:	1c10      	adds	r0, r2, #0
 8000b10:	b203      	sxth	r3, r0
 8000b12:	e7ef      	b.n	8000af4 <MCM_Clarke+0x28>
 8000b14:	000049e6 	.word	0x000049e6
 8000b18:	ffff8000 	.word	0xffff8000
 8000b1c:	ffff8001 	.word	0xffff8001
 8000b20:	00007fff 	.word	0x00007fff

08000b24 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0209      	lsls	r1, r1, #8
 8000b28:	468c      	mov	ip, r1
 8000b2a:	4460      	add	r0, ip
  uhindex = ( uint16_t )shindex;
 8000b2c:	b280      	uxth	r0, r0
{
 8000b2e:	b530      	push	{r4, r5, lr}
  uhindex /= ( uint16_t )64;
 8000b30:	0980      	lsrs	r0, r0, #6

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000b32:	24c0      	movs	r4, #192	; 0xc0
 8000b34:	0001      	movs	r1, r0
 8000b36:	2580      	movs	r5, #128	; 0x80
 8000b38:	00a4      	lsls	r4, r4, #2
{
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	b083      	sub	sp, #12
 8000b40:	4021      	ands	r1, r4
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000b42:	00ad      	lsls	r5, r5, #2
 8000b44:	42a9      	cmp	r1, r5
 8000b46:	d023      	beq.n	8000b90 <MCM_Trig_Functions+0x6c>
 8000b48:	d815      	bhi.n	8000b76 <MCM_Trig_Functions+0x52>
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d029      	beq.n	8000ba2 <MCM_Trig_Functions+0x7e>
 8000b4e:	2480      	movs	r4, #128	; 0x80
 8000b50:	0064      	lsls	r4, r4, #1
 8000b52:	42a1      	cmp	r1, r4
 8000b54:	d109      	bne.n	8000b6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b56:	b2c0      	uxtb	r0, r0
 8000b58:	43c3      	mvns	r3, r0
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <MCM_Trig_Functions+0x98>)
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	5a9b      	ldrh	r3, [r3, r2]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b62:	0040      	lsls	r0, r0, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b64:	425b      	negs	r3, r3
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b66:	5e82      	ldrsh	r2, [r0, r2]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b68:	b21b      	sxth	r3, r3
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000b6a:	0412      	lsls	r2, r2, #16
 8000b6c:	041b      	lsls	r3, r3, #16
 8000b6e:	0c10      	lsrs	r0, r2, #16
 8000b70:	4318      	orrs	r0, r3
}
 8000b72:	b003      	add	sp, #12
 8000b74:	bd30      	pop	{r4, r5, pc}
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000b76:	42a1      	cmp	r1, r4
 8000b78:	d1f7      	bne.n	8000b6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b7a:	b2c0      	uxtb	r0, r0
 8000b7c:	43c3      	mvns	r3, r0
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <MCM_Trig_Functions+0x98>)
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	005b      	lsls	r3, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b84:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b86:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b88:	5a82      	ldrh	r2, [r0, r2]
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	b212      	sxth	r2, r2
      break;
 8000b8e:	e7ec      	b.n	8000b6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b90:	b2c0      	uxtb	r0, r0
 8000b92:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b94:	43c0      	mvns	r0, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b98:	b2c0      	uxtb	r0, r0
 8000b9a:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b9c:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b9e:	5e82      	ldrsh	r2, [r0, r2]
      break;
 8000ba0:	e7e3      	b.n	8000b6a <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ba2:	b2c0      	uxtb	r0, r0
 8000ba4:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ba6:	43c0      	mvns	r0, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000baa:	b2c0      	uxtb	r0, r0
 8000bac:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bae:	5a9b      	ldrh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bb0:	5a82      	ldrh	r2, [r0, r2]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bb2:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bb4:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bb6:	b21b      	sxth	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bb8:	b212      	sxth	r2, r2
      break;
 8000bba:	e7d6      	b.n	8000b6a <MCM_Trig_Functions+0x46>
 8000bbc:	080066d4 	.word	0x080066d4

08000bc0 <MCM_Park>:
{
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	9001      	str	r0, [sp, #4]
 8000bc6:	b205      	sxth	r5, r0
 8000bc8:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000bca:	0008      	movs	r0, r1
 8000bcc:	f7ff ffaa 	bl	8000b24 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000bd0:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000bd2:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000bd4:	000b      	movs	r3, r1
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000bd6:	0002      	movs	r2, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000bd8:	436b      	muls	r3, r5
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000bda:	4362      	muls	r2, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000bdc:	1a9b      	subs	r3, r3, r2
  if ( wqd_tmp > INT16_MAX )
 8000bde:	2280      	movs	r2, #128	; 0x80
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000be0:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000be2:	0212      	lsls	r2, r2, #8
 8000be4:	4293      	cmp	r3, r2
 8000be6:	da12      	bge.n	8000c0e <MCM_Park+0x4e>
  else if ( wqd_tmp < ( -32768 ) )
 8000be8:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <MCM_Park+0x94>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	da24      	bge.n	8000c38 <MCM_Park+0x78>
  if ( wqd_tmp > INT16_MAX )
 8000bee:	2380      	movs	r3, #128	; 0x80
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8000bf0:	4368      	muls	r0, r5
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000bf2:	4361      	muls	r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000bf4:	1840      	adds	r0, r0, r1
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <MCM_Park+0x98>)
 8000bf8:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	4298      	cmp	r0, r3
 8000bfe:	db0f      	blt.n	8000c20 <MCM_Park+0x60>
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MCM_Park+0x9c>)
  return ( Output );
 8000c02:	0410      	lsls	r0, r2, #16
 8000c04:	041b      	lsls	r3, r3, #16
 8000c06:	0c00      	lsrs	r0, r0, #16
 8000c08:	4318      	orrs	r0, r3
}
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MCM_Park+0x9c>)
  if ( wqd_tmp > INT16_MAX )
 8000c10:	2380      	movs	r3, #128	; 0x80
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8000c12:	4368      	muls	r0, r5
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000c14:	4361      	muls	r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000c16:	1840      	adds	r0, r0, r1
 8000c18:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	4298      	cmp	r0, r3
 8000c1e:	daef      	bge.n	8000c00 <MCM_Park+0x40>
  else if ( wqd_tmp < ( -32768 ) )
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MCM_Park+0x94>)
 8000c22:	4298      	cmp	r0, r3
 8000c24:	da01      	bge.n	8000c2a <MCM_Park+0x6a>
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MCM_Park+0x98>)
 8000c28:	e7eb      	b.n	8000c02 <MCM_Park+0x42>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000c2a:	490b      	ldr	r1, [pc, #44]	; (8000c58 <MCM_Park+0x98>)
 8000c2c:	1c03      	adds	r3, r0, #0
 8000c2e:	b200      	sxth	r0, r0
 8000c30:	4288      	cmp	r0, r1
 8000c32:	db0b      	blt.n	8000c4c <MCM_Park+0x8c>
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	e7e4      	b.n	8000c02 <MCM_Park+0x42>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000c38:	4e07      	ldr	r6, [pc, #28]	; (8000c58 <MCM_Park+0x98>)
 8000c3a:	1c1a      	adds	r2, r3, #0
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	42b3      	cmp	r3, r6
 8000c40:	db01      	blt.n	8000c46 <MCM_Park+0x86>
 8000c42:	b212      	sxth	r2, r2
 8000c44:	e7e4      	b.n	8000c10 <MCM_Park+0x50>
 8000c46:	1c32      	adds	r2, r6, #0
 8000c48:	b212      	sxth	r2, r2
 8000c4a:	e7e1      	b.n	8000c10 <MCM_Park+0x50>
 8000c4c:	1c0b      	adds	r3, r1, #0
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	e7d7      	b.n	8000c02 <MCM_Park+0x42>
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	ffff8000 	.word	0xffff8000
 8000c58:	ffff8001 	.word	0xffff8001
 8000c5c:	00007fff 	.word	0x00007fff

08000c60 <MCM_Rev_Park>:
{
 8000c60:	b530      	push	{r4, r5, lr}
 8000c62:	b085      	sub	sp, #20
 8000c64:	b205      	sxth	r5, r0
 8000c66:	9001      	str	r0, [sp, #4]
 8000c68:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000c6a:	0008      	movs	r0, r1
 8000c6c:	f7ff ff5a 	bl	8000b24 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000c70:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000c72:	1400      	asrs	r0, r0, #16
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000c74:	0013      	movs	r3, r2
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000c76:	0001      	movs	r1, r0
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000c78:	436b      	muls	r3, r5
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000c7a:	4361      	muls	r1, r4
  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8000c7c:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000c7e:	4354      	muls	r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000c80:	185b      	adds	r3, r3, r1
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000c82:	1a20      	subs	r0, r4, r0
 8000c84:	13c0      	asrs	r0, r0, #15
  return ( Output );
 8000c86:	005c      	lsls	r4, r3, #1
 8000c88:	0c24      	lsrs	r4, r4, #16
 8000c8a:	0400      	lsls	r0, r0, #16
 8000c8c:	4320      	orrs	r0, r4
}
 8000c8e:	b005      	add	sp, #20
 8000c90:	bd30      	pop	{r4, r5, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)

08000c94 <FOC_Clear>:
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000c94:	2126      	movs	r1, #38	; 0x26
 8000c96:	2200      	movs	r2, #0
 8000c98:	4341      	muls	r1, r0
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <FOC_Clear+0x50>)
{
 8000c9c:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8000c9e:	52ca      	strh	r2, [r1, r3]
 8000ca0:	185b      	adds	r3, r3, r1
 8000ca2:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000ca4:	809a      	strh	r2, [r3, #4]
 8000ca6:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ca8:	819a      	strh	r2, [r3, #12]
 8000caa:	81da      	strh	r2, [r3, #14]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8000cac:	821a      	strh	r2, [r3, #16]
 8000cae:	825a      	strh	r2, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000cb0:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000cb2:	82da      	strh	r2, [r3, #22]
 8000cb4:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8000cb6:	835a      	strh	r2, [r3, #26]
 8000cb8:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000cba:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <FOC_Clear+0x54>)
 8000cbe:	0084      	lsls	r4, r0, #2
 8000cc0:	58e0      	ldr	r0, [r4, r3]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f004 f8e6 	bl	8004e94 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <FOC_Clear+0x58>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	58e0      	ldr	r0, [r4, r3]
 8000cce:	f004 f8e1 	bl	8004e94 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <FOC_Clear+0x5c>)
 8000cd4:	58e0      	ldr	r0, [r4, r3]
 8000cd6:	f004 ff41 	bl	8005b5c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <FOC_Clear+0x60>)
 8000cdc:	58e0      	ldr	r0, [r4, r3]
 8000cde:	f004 fa79 	bl	80051d4 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000ce2:	bd10      	pop	{r4, pc}
 8000ce4:	200008c4 	.word	0x200008c4
 8000ce8:	20000980 	.word	0x20000980
 8000cec:	2000097c 	.word	0x2000097c
 8000cf0:	2000098c 	.word	0x2000098c
 8000cf4:	20000994 	.word	0x20000994

08000cf8 <MCboot>:
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	46de      	mov	lr, fp
 8000cfc:	4657      	mov	r7, sl
 8000cfe:	464e      	mov	r6, r9
 8000d00:	4645      	mov	r5, r8
  bMCBootCompleted = 0;
 8000d02:	2400      	movs	r4, #0
{
 8000d04:	b5e0      	push	{r5, r6, r7, lr}
 8000d06:	b087      	sub	sp, #28
 8000d08:	9002      	str	r0, [sp, #8]
  STM_Init(&STM[M1]);
 8000d0a:	4855      	ldr	r0, [pc, #340]	; (8000e60 <MCboot+0x168>)
{
 8000d0c:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 8000d0e:	f004 ffdf 	bl	8005cd0 <STM_Init>
  bMCBootCompleted = 0;
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <MCboot+0x16c>)
  pCLM[M1] = &CircleLimitationM1;
 8000d14:	4a54      	ldr	r2, [pc, #336]	; (8000e68 <MCboot+0x170>)
  bMCBootCompleted = 0;
 8000d16:	701c      	strb	r4, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000d18:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <MCboot+0x174>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000d1a:	4855      	ldr	r0, [pc, #340]	; (8000e70 <MCboot+0x178>)
  pCLM[M1] = &CircleLimitationM1;
 8000d1c:	601a      	str	r2, [r3, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000d1e:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <MCboot+0x17c>)
 8000d20:	6018      	str	r0, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8000d22:	f004 fb8d 	bl	8005440 <R3_1_Init>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000d26:	4d54      	ldr	r5, [pc, #336]	; (8000e78 <MCboot+0x180>)
 8000d28:	0028      	movs	r0, r5
 8000d2a:	f004 f89f 	bl	8004e6c <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000d2e:	4b53      	ldr	r3, [pc, #332]	; (8000e7c <MCboot+0x184>)
  HALL_Init (&HALL_M1);
 8000d30:	4853      	ldr	r0, [pc, #332]	; (8000e80 <MCboot+0x188>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000d32:	4698      	mov	r8, r3
 8000d34:	601d      	str	r5, [r3, #0]
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000d36:	4d53      	ldr	r5, [pc, #332]	; (8000e84 <MCboot+0x18c>)
 8000d38:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <MCboot+0x190>)
 8000d3a:	602b      	str	r3, [r5, #0]
  HALL_Init (&HALL_M1);
 8000d3c:	f003 fc14 	bl	8004568 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000d40:	4643      	mov	r3, r8
 8000d42:	4a4f      	ldr	r2, [pc, #316]	; (8000e80 <MCboot+0x188>)
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	6828      	ldr	r0, [r5, #0]
 8000d48:	f004 fef4 	bl	8005b34 <STC_Init>
  STO_PLL_Init (&STO_PLL_M1);
 8000d4c:	484f      	ldr	r0, [pc, #316]	; (8000e8c <MCboot+0x194>)
 8000d4e:	f005 fbed 	bl	800652c <STO_PLL_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000d52:	4f4f      	ldr	r7, [pc, #316]	; (8000e90 <MCboot+0x198>)
 8000d54:	0038      	movs	r0, r7
 8000d56:	f004 f889 	bl	8004e6c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000d5a:	4e4e      	ldr	r6, [pc, #312]	; (8000e94 <MCboot+0x19c>)
 8000d5c:	0030      	movs	r0, r6
 8000d5e:	f004 f885 	bl	8004e6c <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000d62:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <MCboot+0x1a0>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d64:	484d      	ldr	r0, [pc, #308]	; (8000e9c <MCboot+0x1a4>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000d66:	601f      	str	r7, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000d68:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <MCboot+0x1a8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d6a:	4f4e      	ldr	r7, [pc, #312]	; (8000ea4 <MCboot+0x1ac>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000d6c:	601e      	str	r6, [r3, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d6e:	6038      	str	r0, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8000d70:	f004 fe40 	bl	80059f4 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <MCboot+0x1b0>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d76:	683e      	ldr	r6, [r7, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d78:	469a      	mov	sl, r3
 8000d7a:	4652      	mov	r2, sl
 8000d7c:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <MCboot+0x1b4>)
 8000d7e:	6013      	str	r3, [r2, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d80:	2288      	movs	r2, #136	; 0x88
 8000d82:	0052      	lsls	r2, r2, #1
 8000d84:	509e      	str	r6, [r3, r2]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000d86:	4e4a      	ldr	r6, [pc, #296]	; (8000eb0 <MCboot+0x1b8>)
 8000d88:	3a04      	subs	r2, #4
 8000d8a:	509e      	str	r6, [r3, r2]
  NTC_Init(&TempSensorParamsM1);
 8000d8c:	4b49      	ldr	r3, [pc, #292]	; (8000eb4 <MCboot+0x1bc>)
 8000d8e:	4699      	mov	r9, r3
 8000d90:	0018      	movs	r0, r3
 8000d92:	f004 f823 	bl	8004ddc <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d96:	464a      	mov	r2, r9
 8000d98:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <MCboot+0x1c0>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d9a:	4848      	ldr	r0, [pc, #288]	; (8000ebc <MCboot+0x1c4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	469b      	mov	fp, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000da0:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <MCboot+0x1c8>)
 8000da2:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8000da4:	f004 fe72 	bl	8005a8c <REMNG_Init>
  FOC_Clear(M1);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff73 	bl	8000c94 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000dae:	2324      	movs	r3, #36	; 0x24
 8000db0:	2201      	movs	r2, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000db2:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000db4:	54f2      	strb	r2, [r6, r3]
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000db6:	f004 ff7b 	bl	8005cb0 <STC_GetDefaultIqdref>
 8000dba:	6130      	str	r0, [r6, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000dbc:	6828      	ldr	r0, [r5, #0]
 8000dbe:	f004 ff77 	bl	8005cb0 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000dc2:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <MCboot+0x1cc>)
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000dc4:	0c00      	lsrs	r0, r0, #16
  oMCInterface[M1] = & Mci[M1];
 8000dc6:	4699      	mov	r9, r3
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000dc8:	82b0      	strh	r0, [r6, #20]
  oMCInterface[M1] = & Mci[M1];
 8000dca:	483f      	ldr	r0, [pc, #252]	; (8000ec8 <MCboot+0x1d0>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000dcc:	682a      	ldr	r2, [r5, #0]
 8000dce:	4924      	ldr	r1, [pc, #144]	; (8000e60 <MCboot+0x168>)
  oMCInterface[M1] = & Mci[M1];
 8000dd0:	6018      	str	r0, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000dd2:	0033      	movs	r3, r6
 8000dd4:	f7ff fd64 	bl	80008a0 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000dd8:	464b      	mov	r3, r9
 8000dda:	6828      	ldr	r0, [r5, #0]
 8000ddc:	681e      	ldr	r6, [r3, #0]
 8000dde:	f004 ff5d 	bl	8005c9c <STC_GetMecSpeedRefUnitDefault>
 8000de2:	2200      	movs	r2, #0
 8000de4:	0001      	movs	r1, r0
 8000de6:	0030      	movs	r0, r6
 8000de8:	f7ff fd64 	bl	80008b4 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000dec:	464b      	mov	r3, r9
 8000dee:	681b      	ldr	r3, [r3, #0]
  bMCBootCompleted = 1;
 8000df0:	2201      	movs	r2, #1
  pMCIList[M1] = oMCInterface[M1];
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	9801      	ldr	r0, [sp, #4]
 8000df6:	9b02      	ldr	r3, [sp, #8]
 8000df8:	6018      	str	r0, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <MCboot+0x1d4>)
 8000dfe:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000e00:	60dc      	str	r4, [r3, #12]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000e02:	6018      	str	r0, [r3, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e04:	4824      	ldr	r0, [pc, #144]	; (8000e98 <MCboot+0x1a0>)
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8000e06:	615c      	str	r4, [r3, #20]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e08:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000e0a:	621c      	str	r4, [r3, #32]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e0c:	6058      	str	r0, [r3, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8000e0e:	4824      	ldr	r0, [pc, #144]	; (8000ea0 <MCboot+0x1a8>)
 8000e10:	6800      	ldr	r0, [r0, #0]
 8000e12:	6098      	str	r0, [r3, #8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000e14:	4817      	ldr	r0, [pc, #92]	; (8000e74 <MCboot+0x17c>)
 8000e16:	6800      	ldr	r0, [r0, #0]
 8000e18:	6118      	str	r0, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000e1a:	4819      	ldr	r0, [pc, #100]	; (8000e80 <MCboot+0x188>)
 8000e1c:	6198      	str	r0, [r3, #24]
  MCT[M1].pSpeedSensorAux = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8000e1e:	481b      	ldr	r0, [pc, #108]	; (8000e8c <MCboot+0x194>)
 8000e20:	61d8      	str	r0, [r3, #28]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000e22:	6828      	ldr	r0, [r5, #0]
 8000e24:	6258      	str	r0, [r3, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <MCboot+0x168>)
 8000e28:	6298      	str	r0, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000e2a:	4658      	mov	r0, fp
 8000e2c:	6800      	ldr	r0, [r0, #0]
 8000e2e:	62d8      	str	r0, [r3, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	6318      	str	r0, [r3, #48]	; 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000e34:	4650      	mov	r0, sl
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8000e36:	635c      	str	r4, [r3, #52]	; 0x34
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000e38:	6800      	ldr	r0, [r0, #0]
  pMCTList[M1] = &MCT[M1];
 8000e3a:	9903      	ldr	r1, [sp, #12]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000e3c:	639c      	str	r4, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000e3e:	63d8      	str	r0, [r3, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 8000e40:	641c      	str	r4, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 8000e42:	645c      	str	r4, [r3, #68]	; 0x44
  MCT[M1].pPosCtrl = MC_NULL;
 8000e44:	649c      	str	r4, [r3, #72]	; 0x48
  MCT[M1].pSCC = MC_NULL;
 8000e46:	64dc      	str	r4, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8000e48:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000e4a:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <MCboot+0x16c>)
 8000e4e:	701a      	strb	r2, [r3, #0]
}
 8000e50:	b007      	add	sp, #28
 8000e52:	bcf0      	pop	{r4, r5, r6, r7}
 8000e54:	46bb      	mov	fp, r7
 8000e56:	46b2      	mov	sl, r6
 8000e58:	46a9      	mov	r9, r5
 8000e5a:	46a0      	mov	r8, r4
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	2000095c 	.word	0x2000095c
 8000e64:	20000962 	.word	0x20000962
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000974 	.word	0x20000974
 8000e70:	20000314 	.word	0x20000314
 8000e74:	20000994 	.word	0x20000994
 8000e78:	200001d4 	.word	0x200001d4
 8000e7c:	20000984 	.word	0x20000984
 8000e80:	200000b4 	.word	0x200000b4
 8000e84:	2000098c 	.word	0x2000098c
 8000e88:	20000538 	.word	0x20000538
 8000e8c:	20000410 	.word	0x20000410
 8000e90:	200001a8 	.word	0x200001a8
 8000e94:	2000017c 	.word	0x2000017c
 8000e98:	20000980 	.word	0x20000980
 8000e9c:	200003e8 	.word	0x200003e8
 8000ea0:	2000097c 	.word	0x2000097c
 8000ea4:	20000970 	.word	0x20000970
 8000ea8:	20000978 	.word	0x20000978
 8000eac:	20000200 	.word	0x20000200
 8000eb0:	200008c4 	.word	0x200008c4
 8000eb4:	2000056c 	.word	0x2000056c
 8000eb8:	20000990 	.word	0x20000990
 8000ebc:	20000390 	.word	0x20000390
 8000ec0:	20000988 	.word	0x20000988
 8000ec4:	2000096c 	.word	0x2000096c
 8000ec8:	20000940 	.word	0x20000940
 8000ecc:	200008ec 	.word	0x200008ec

08000ed0 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000ed0:	4770      	bx	lr
 8000ed2:	46c0      	nop			; (mov r8, r8)

08000ed4 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8000ed4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000ed6:	2426      	movs	r4, #38	; 0x26
 8000ed8:	4344      	muls	r4, r0
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <FOC_CalcCurrRef+0x28>)
 8000edc:	191c      	adds	r4, r3, r4
 8000ede:	0023      	movs	r3, r4
 8000ee0:	3324      	adds	r3, #36	; 0x24
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d000      	beq.n	8000eea <FOC_CalcCurrRef+0x16>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000ee8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <FOC_CalcCurrRef+0x2c>)
 8000eec:	0080      	lsls	r0, r0, #2
 8000eee:	58c0      	ldr	r0, [r0, r3]
 8000ef0:	f004 fe9c 	bl	8005c2c <STC_CalcTorqueReference>
 8000ef4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000ef6:	8220      	strh	r0, [r4, #16]
}
 8000ef8:	e7f6      	b.n	8000ee8 <FOC_CalcCurrRef+0x14>
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	200008c4 	.word	0x200008c4
 8000f00:	2000098c 	.word	0x2000098c

08000f04 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000f04:	4b01      	ldr	r3, [pc, #4]	; (8000f0c <TSK_SetChargeBootCapDelayM1+0x8>)
 8000f06:	8018      	strh	r0, [r3, #0]
}
 8000f08:	4770      	bx	lr
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000964 	.word	0x20000964

08000f10 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8000f12:	8818      	ldrh	r0, [r3, #0]
 8000f14:	4243      	negs	r3, r0
 8000f16:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000f18:	b2c0      	uxtb	r0, r0
}
 8000f1a:	4770      	bx	lr
 8000f1c:	20000964 	.word	0x20000964

08000f20 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000f20:	4b01      	ldr	r3, [pc, #4]	; (8000f28 <TSK_SetStopPermanencyTimeM1+0x8>)
 8000f22:	8018      	strh	r0, [r3, #0]
}
 8000f24:	4770      	bx	lr
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	20000968 	.word	0x20000968

08000f2c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8000f2e:	8818      	ldrh	r0, [r3, #0]
 8000f30:	4243      	negs	r3, r0
 8000f32:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000f34:	b2c0      	uxtb	r0, r0
}
 8000f36:	4770      	bx	lr
 8000f38:	20000968 	.word	0x20000968

08000f3c <TSK_MediumFrequencyTaskM1>:
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	46c6      	mov	lr, r8
 8000f40:	b500      	push	{lr}
 8000f42:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8000f44:	466b      	mov	r3, sp
 8000f46:	1d9c      	adds	r4, r3, #6
 8000f48:	2300      	movs	r3, #0
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000f4a:	4f51      	ldr	r7, [pc, #324]	; (8001090 <TSK_MediumFrequencyTaskM1+0x154>)
 8000f4c:	0021      	movs	r1, r4
 8000f4e:	0038      	movs	r0, r7
  int16_t wAux = 0;
 8000f50:	8023      	strh	r3, [r4, #0]
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000f52:	f005 f9cd 	bl	80062f0 <STO_PLL_CalcAvrgMecSpeedUnit>
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000f56:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <TSK_MediumFrequencyTaskM1+0x158>)
 8000f58:	0021      	movs	r1, r4
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	4698      	mov	r8, r3
 8000f5e:	f003 fc57 	bl	8004810 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000f62:	4e4d      	ldr	r6, [pc, #308]	; (8001098 <TSK_MediumFrequencyTaskM1+0x15c>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000f64:	0004      	movs	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000f66:	6830      	ldr	r0, [r6, #0]
 8000f68:	f003 ffe2 	bl	8004f30 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000f6c:	4d4b      	ldr	r5, [pc, #300]	; (800109c <TSK_MediumFrequencyTaskM1+0x160>)
 8000f6e:	0028      	movs	r0, r5
 8000f70:	f004 ff42 	bl	8005df8 <STM_GetState>
  switch ( StateM1 )
 8000f74:	3803      	subs	r0, #3
 8000f76:	b2c0      	uxtb	r0, r0
 8000f78:	280f      	cmp	r0, #15
 8000f7a:	d807      	bhi.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
 8000f7c:	4a48      	ldr	r2, [pc, #288]	; (80010a0 <TSK_MediumFrequencyTaskM1+0x164>)
 8000f7e:	0083      	lsls	r3, r0, #2
 8000f80:	58d3      	ldr	r3, [r2, r3]
 8000f82:	469f      	mov	pc, r3
    STM_NextState( &STM[M1], IDLE );
 8000f84:	2100      	movs	r1, #0
 8000f86:	0028      	movs	r0, r5
 8000f88:	f004 fec2 	bl	8005d10 <STM_NextState>
}
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bc80      	pop	{r7}
 8000f90:	46b8      	mov	r8, r7
 8000f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HALL_Clear( &HALL_M1 );
 8000f94:	4640      	mov	r0, r8
 8000f96:	f003 fb73 	bl	8004680 <HALL_Clear>
    STO_PLL_Clear( &STO_PLL_M1 );
 8000f9a:	0038      	movs	r0, r7
 8000f9c:	f005 fa92 	bl	80064c4 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	0028      	movs	r0, r5
 8000fa4:	f004 feb4 	bl	8005d10 <STM_NextState>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d0ef      	beq.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
      FOC_Clear( M1 );
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fe71 	bl	8000c94 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <TSK_MediumFrequencyTaskM1+0x168>)
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f004 fb41 	bl	800563c <R3_1_SwitchOnPWM>
 8000fba:	e7e7      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8000fbc:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <TSK_MediumFrequencyTaskM1+0x168>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f004 fb18 	bl	80055f4 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8000fc4:	2014      	movs	r0, #20
 8000fc6:	f7ff ff9d 	bl	8000f04 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000fca:	2110      	movs	r1, #16
 8000fcc:	0028      	movs	r0, r5
 8000fce:	f004 fe9f 	bl	8005d10 <STM_NextState>
    break;
 8000fd2:	e7db      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	0028      	movs	r0, r5
 8000fd8:	f004 fe9a 	bl	8005d10 <STM_NextState>
    break;
 8000fdc:	e7d6      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
	  FOC_InitAdditionalMethods(M1);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff ff76 	bl	8000ed0 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff ff75 	bl	8000ed4 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8000fea:	2106      	movs	r1, #6
 8000fec:	0028      	movs	r0, r5
 8000fee:	f004 fe8f 	bl	8005d10 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <TSK_MediumFrequencyTaskM1+0x16c>)
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f004 fe63 	bl	8005cc0 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <TSK_MediumFrequencyTaskM1+0x170>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f7ff fc91 	bl	8000924 <MCI_ExecBufferedCommands>
    break;
 8001002:	e7c3      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <TSK_MediumFrequencyTaskM1+0x170>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	f7ff fc8c 	bl	8000924 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ff61 	bl	8000ed4 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001012:	2c00      	cmp	r4, #0
 8001014:	d1ba      	bne.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001016:	2200      	movs	r2, #0
 8001018:	2120      	movs	r1, #32
 800101a:	0028      	movs	r0, r5
 800101c:	f004 fe5e 	bl	8005cdc <STM_FaultProcessing>
 8001020:	e7b4      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <TSK_MediumFrequencyTaskM1+0x168>)
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	f004 fb7f 	bl	8005728 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fe32 	bl	8000c94 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001030:	6830      	ldr	r0, [r6, #0]
 8001032:	f003 fe8b 	bl	8004d4c <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001036:	20c8      	movs	r0, #200	; 0xc8
 8001038:	0080      	lsls	r0, r0, #2
 800103a:	f7ff ff71 	bl	8000f20 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800103e:	2108      	movs	r1, #8
 8001040:	0028      	movs	r0, r5
 8001042:	f004 fe65 	bl	8005d10 <STM_NextState>
    break;
 8001046:	e7a1      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001048:	f7ff ff70 	bl	8000f2c <TSK_StopPermanencyTimeHasElapsedM1>
 800104c:	2800      	cmp	r0, #0
 800104e:	d09d      	beq.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001050:	2109      	movs	r1, #9
 8001052:	0028      	movs	r0, r5
 8001054:	f004 fe5c 	bl	8005d10 <STM_NextState>
 8001058:	e798      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800105a:	f7ff ff59 	bl	8000f10 <TSK_ChargeBootCapDelayHasElapsedM1>
 800105e:	2800      	cmp	r0, #0
 8001060:	d094      	beq.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <TSK_MediumFrequencyTaskM1+0x168>)
 8001064:	2100      	movs	r1, #0
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	f004 f8b8 	bl	80051dc <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 800106c:	2111      	movs	r1, #17
 800106e:	0028      	movs	r0, r5
 8001070:	f004 fe4e 	bl	8005d10 <STM_NextState>
 8001074:	e78a      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <TSK_MediumFrequencyTaskM1+0x168>)
 8001078:	2101      	movs	r1, #1
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	f004 f8ae 	bl	80051dc <PWMC_CurrentReadingCalibr>
 8001080:	2800      	cmp	r0, #0
 8001082:	d100      	bne.n	8001086 <TSK_MediumFrequencyTaskM1+0x14a>
 8001084:	e782      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
      STM_NextState( &STM[M1], CLEAR );
 8001086:	2112      	movs	r1, #18
 8001088:	0028      	movs	r0, r5
 800108a:	f004 fe41 	bl	8005d10 <STM_NextState>
 800108e:	e77d      	b.n	8000f8c <TSK_MediumFrequencyTaskM1+0x50>
 8001090:	20000410 	.word	0x20000410
 8001094:	200000b4 	.word	0x200000b4
 8001098:	20000978 	.word	0x20000978
 800109c:	2000095c 	.word	0x2000095c
 80010a0:	08006948 	.word	0x08006948
 80010a4:	20000994 	.word	0x20000994
 80010a8:	2000098c 	.word	0x2000098c
 80010ac:	2000096c 	.word	0x2000096c

080010b0 <MC_Scheduler>:
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
  if (bMCBootCompleted == 1)
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MC_Scheduler+0x48>)
 80010b4:	781c      	ldrb	r4, [r3, #0]
 80010b6:	2c01      	cmp	r4, #1
 80010b8:	d000      	beq.n	80010bc <MC_Scheduler+0xc>
}
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
    if(hMFTaskCounterM1 > 0u)
 80010bc:	4d0f      	ldr	r5, [pc, #60]	; (80010fc <MC_Scheduler+0x4c>)
 80010be:	882b      	ldrh	r3, [r5, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d014      	beq.n	80010ee <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 80010c4:	882b      	ldrh	r3, [r5, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MC_Scheduler+0x50>)
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d003      	beq.n	80010dc <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80010d4:	881a      	ldrh	r2, [r3, #0]
 80010d6:	3a01      	subs	r2, #1
 80010d8:	b292      	uxth	r2, r2
 80010da:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MC_Scheduler+0x54>)
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d0ea      	beq.n	80010ba <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	3a01      	subs	r2, #1
 80010e8:	b292      	uxth	r2, r2
 80010ea:	801a      	strh	r2, [r3, #0]
}
 80010ec:	e7e5      	b.n	80010ba <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 80010ee:	f7ff ff25 	bl	8000f3c <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80010f2:	802c      	strh	r4, [r5, #0]
 80010f4:	e7ea      	b.n	80010cc <MC_Scheduler+0x1c>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	20000962 	.word	0x20000962
 80010fc:	20000966 	.word	0x20000966
 8001100:	20000964 	.word	0x20000964
 8001104:	20000968 	.word	0x20000968

08001108 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	46d6      	mov	lr, sl
 800110c:	464f      	mov	r7, r9
 800110e:	4646      	mov	r6, r8

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  Observer_Inputs_t STO_aux_Inputs; /*  only if sensorless aux*/
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001110:	4c43      	ldr	r4, [pc, #268]	; (8001220 <TSK_HighFrequencyTask+0x118>)
{
 8001112:	b5c0      	push	{r6, r7, lr}
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001114:	0027      	movs	r7, r4
{
 8001116:	b08a      	sub	sp, #40	; 0x28
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001118:	371a      	adds	r7, #26
 800111a:	2204      	movs	r2, #4
 800111c:	0039      	movs	r1, r7
 800111e:	a807      	add	r0, sp, #28
 8001120:	f005 faba 	bl	8006698 <memcpy>

  HALL_CalcElAngle (&HALL_M1);
 8001124:	483f      	ldr	r0, [pc, #252]	; (8001224 <TSK_HighFrequencyTask+0x11c>)
 8001126:	f003 fb55 	bl	80047d4 <HALL_CalcElAngle>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <TSK_HighFrequencyTask+0x120>)
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	f004 fd13 	bl	8005b58 <STC_GetSpeedSensor>
 8001132:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001134:	f004 fcb6 	bl	8005aa4 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <TSK_HighFrequencyTask+0x124>)
  hElAngle = SPD_GetElAngle(speedHandle);
 800113a:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800113c:	a904      	add	r1, sp, #16
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	4698      	mov	r8, r3
 8001142:	f003 ff49 	bl	8004fd8 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 8001146:	f000 fd27 	bl	8001b98 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800114a:	9804      	ldr	r0, [sp, #16]
 800114c:	f7ff fcbe 	bl	8000acc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001150:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001152:	9005      	str	r0, [sp, #20]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001154:	f7ff fd34 	bl	8000bc0 <MCM_Park>
 8001158:	9002      	str	r0, [sp, #8]
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800115a:	2310      	movs	r3, #16
 800115c:	5ee1      	ldrsh	r1, [r4, r3]
 800115e:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001160:	1ac9      	subs	r1, r1, r3
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <TSK_HighFrequencyTask+0x128>)
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f003 fea1 	bl	8004eac <PI_Controller>
 800116a:	4681      	mov	r9, r0

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800116c:	2312      	movs	r3, #18
 800116e:	5ee1      	ldrsh	r1, [r4, r3]
 8001170:	ab02      	add	r3, sp, #8
 8001172:	2202      	movs	r2, #2
 8001174:	5e9b      	ldrsh	r3, [r3, r2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001176:	1ac9      	subs	r1, r1, r3
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <TSK_HighFrequencyTask+0x12c>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	f003 fe96 	bl	8004eac <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001180:	4649      	mov	r1, r9
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <TSK_HighFrequencyTask+0x130>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	ab03      	add	r3, sp, #12
 8001188:	8058      	strh	r0, [r3, #2]
 800118a:	8019      	strh	r1, [r3, #0]
 800118c:	0010      	movs	r0, r2
 800118e:	9903      	ldr	r1, [sp, #12]
 8001190:	f003 f98c 	bl	80044ac <Circle_Limitation>
 8001194:	b203      	sxth	r3, r0
 8001196:	469a      	mov	sl, r3
 8001198:	9003      	str	r0, [sp, #12]
 800119a:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800119c:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800119e:	4699      	mov	r9, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80011a0:	f004 fc88 	bl	8005ab4 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80011a4:	0029      	movs	r1, r5
 80011a6:	9803      	ldr	r0, [sp, #12]
 80011a8:	f7ff fd5a 	bl	8000c60 <MCM_Rev_Park>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80011ac:	4643      	mov	r3, r8
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80011ae:	0001      	movs	r1, r0
 80011b0:	9006      	str	r0, [sp, #24]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f003 ff14 	bl	8004fe0 <PWMC_SetPhaseVoltage>
 80011b8:	0006      	movs	r6, r0
  RCM_ReadOngoingConv();
 80011ba:	f000 fd2b 	bl	8001c14 <RCM_ReadOngoingConv>
  FOCVars[M1].Vqd = Vqd;
 80011be:	4653      	mov	r3, sl
 80011c0:	82e3      	strh	r3, [r4, #22]
 80011c2:	464b      	mov	r3, r9
 80011c4:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 80011c6:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 80011c8:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 80011ca:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80011cc:	9b05      	ldr	r3, [sp, #20]
  FOCVars[M1].Valphabeta = Valphabeta;
 80011ce:	0038      	movs	r0, r7
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80011d0:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80011d2:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Valphabeta = Valphabeta;
 80011d4:	a906      	add	r1, sp, #24
  FOCVars[M1].Iqd = Iqd;
 80011d6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80011d8:	f005 fa5e 	bl	8006698 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 80011dc:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 80011de:	2e01      	cmp	r6, #1
 80011e0:	d017      	beq.n	8001212 <TSK_HighFrequencyTask+0x10a>
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 80011e2:	6863      	ldr	r3, [r4, #4]
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	9308      	str	r3, [sp, #32]
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <TSK_HighFrequencyTask+0x134>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f003 f956 	bl	800449c <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 80011f0:	4c13      	ldr	r4, [pc, #76]	; (8001240 <TSK_HighFrequencyTask+0x138>)
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80011f2:	ab02      	add	r3, sp, #8
 80011f4:	8398      	strh	r0, [r3, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 80011f6:	a907      	add	r1, sp, #28
 80011f8:	0020      	movs	r0, r4
 80011fa:	f004 ff69 	bl	80060d0 <STO_PLL_CalcElAngle>
	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 80011fe:	0020      	movs	r0, r4
 8001200:	f005 f92a 	bl	8006458 <STO_PLL_CalcAvrgElSpeedDpp>
}
 8001204:	2000      	movs	r0, #0
 8001206:	b00a      	add	sp, #40	; 0x28
 8001208:	bce0      	pop	{r5, r6, r7}
 800120a:	46ba      	mov	sl, r7
 800120c:	46b1      	mov	r9, r6
 800120e:	46a8      	mov	r8, r5
 8001210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2101      	movs	r1, #1
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <TSK_HighFrequencyTask+0x13c>)
 8001218:	f004 fd60 	bl	8005cdc <STM_FaultProcessing>
 800121c:	e7f2      	b.n	8001204 <TSK_HighFrequencyTask+0xfc>
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	200008c4 	.word	0x200008c4
 8001224:	200000b4 	.word	0x200000b4
 8001228:	2000098c 	.word	0x2000098c
 800122c:	20000994 	.word	0x20000994
 8001230:	20000980 	.word	0x20000980
 8001234:	2000097c 	.word	0x2000097c
 8001238:	20000974 	.word	0x20000974
 800123c:	20000970 	.word	0x20000970
 8001240:	20000410 	.word	0x20000410
 8001244:	2000095c 	.word	0x2000095c

08001248 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	46ce      	mov	lr, r9
 800124c:	4647      	mov	r7, r8
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <TSK_SafetyTask_PWMOFF+0x8c>)
{
 8001250:	b580      	push	{r7, lr}
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001252:	0087      	lsls	r7, r0, #2
{
 8001254:	0005      	movs	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001256:	59d8      	ldr	r0, [r3, r7]
 8001258:	f003 fdd4 	bl	8004e04 <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800125e:	0006      	movs	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001260:	59d8      	ldr	r0, [r3, r7]
 8001262:	4698      	mov	r8, r3
 8001264:	f003 ffde 	bl	8005224 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001268:	2308      	movs	r3, #8
 800126a:	439e      	bics	r6, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800126c:	4306      	orrs	r6, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800126e:	4699      	mov	r9, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001270:	b2b4      	uxth	r4, r6
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001272:	2d00      	cmp	r5, #0
 8001274:	d025      	beq.n	80012c2 <TSK_SafetyTask_PWMOFF+0x7a>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001276:	43e2      	mvns	r2, r4
 8001278:	006b      	lsls	r3, r5, #1
 800127a:	4e18      	ldr	r6, [pc, #96]	; (80012dc <TSK_SafetyTask_PWMOFF+0x94>)
 800127c:	195b      	adds	r3, r3, r5
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	18f6      	adds	r6, r6, r3
 8001282:	0021      	movs	r1, r4
 8001284:	0030      	movs	r0, r6
 8001286:	b292      	uxth	r2, r2
 8001288:	f004 fd28 	bl	8005cdc <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800128c:	0030      	movs	r0, r6
 800128e:	f004 fdb3 	bl	8005df8 <STM_GetState>
 8001292:	280a      	cmp	r0, #10
 8001294:	d009      	beq.n	80012aa <TSK_SafetyTask_PWMOFF+0x62>
 8001296:	280b      	cmp	r0, #11
 8001298:	d103      	bne.n	80012a2 <TSK_SafetyTask_PWMOFF+0x5a>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800129a:	4643      	mov	r3, r8
 800129c:	59d8      	ldr	r0, [r3, r7]
 800129e:	f003 ff99 	bl	80051d4 <PWMC_SwitchOffPWM>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80012a2:	bcc0      	pop	{r6, r7}
 80012a4:	46b9      	mov	r9, r7
 80012a6:	46b0      	mov	r8, r6
 80012a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012aa:	4643      	mov	r3, r8
 80012ac:	59d8      	ldr	r0, [r3, r7]
 80012ae:	f003 ff91 	bl	80051d4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80012b2:	0028      	movs	r0, r5
 80012b4:	f7ff fcee 	bl	8000c94 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <TSK_SafetyTask_PWMOFF+0x98>)
 80012ba:	59d8      	ldr	r0, [r3, r7]
 80012bc:	f003 fd46 	bl	8004d4c <MPM_Clear>
    break;
 80012c0:	e7ef      	b.n	80012a2 <TSK_SafetyTask_PWMOFF+0x5a>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <TSK_SafetyTask_PWMOFF+0x9c>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	f004 fbad 	bl	8005a24 <RVBS_CalcAvVbus>
 80012ca:	464b      	mov	r3, r9
 80012cc:	4398      	bics	r0, r3
 80012ce:	4304      	orrs	r4, r0
 80012d0:	b2a4      	uxth	r4, r4
 80012d2:	e7d0      	b.n	8001276 <TSK_SafetyTask_PWMOFF+0x2e>
 80012d4:	20000990 	.word	0x20000990
 80012d8:	20000994 	.word	0x20000994
 80012dc:	2000095c 	.word	0x2000095c
 80012e0:	20000978 	.word	0x20000978
 80012e4:	20000970 	.word	0x20000970

080012e8 <TSK_SafetyTask>:
{
 80012e8:	b510      	push	{r4, lr}
  if (bMCBootCompleted == 1)
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <TSK_SafetyTask+0x18>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d000      	beq.n	80012f4 <TSK_SafetyTask+0xc>
}
 80012f2:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ffa7 	bl	8001248 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv ();
 80012fa:	f000 fc1f 	bl	8001b3c <RCM_ExecUserConv>
}
 80012fe:	e7f8      	b.n	80012f2 <TSK_SafetyTask+0xa>
 8001300:	20000962 	.word	0x20000962

08001304 <MC_RunMotorControlTasks>:
{
 8001304:	b510      	push	{r4, lr}
  if ( bMCBootCompleted ) {
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MC_RunMotorControlTasks+0x1c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d100      	bne.n	8001310 <MC_RunMotorControlTasks+0xc>
}
 800130e:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 8001310:	f7ff fece 	bl	80010b0 <MC_Scheduler>
    TSK_SafetyTask();
 8001314:	f7ff ffe8 	bl	80012e8 <TSK_SafetyTask>
    UI_Scheduler();
 8001318:	f000 ff1c 	bl	8002154 <UI_Scheduler>
}
 800131c:	e7f7      	b.n	800130e <MC_RunMotorControlTasks+0xa>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20000962 	.word	0x20000962

08001324 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001324:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <TSK_HardwareFaultTask+0x18>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	f004 f9fd 	bl	8005728 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <TSK_HardwareFaultTask+0x1c>)
 8001334:	f004 fcd2 	bl	8005cdc <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001338:	bd10      	pop	{r4, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	20000994 	.word	0x20000994
 8001340:	2000095c 	.word	0x2000095c

08001344 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001344:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001346:	2108      	movs	r1, #8
 8001348:	2002      	movs	r0, #2
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800134a:	b510      	push	{r4, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800134c:	4a3e      	ldr	r2, [pc, #248]	; (8001448 <mc_lock_pins+0x104>)
 800134e:	05db      	lsls	r3, r3, #23
 8001350:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001352:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001354:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001356:	69da      	ldr	r2, [r3, #28]
 8001358:	b08e      	sub	sp, #56	; 0x38
 800135a:	920d      	str	r2, [sp, #52]	; 0x34
  (void) temp;
 800135c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800135e:	4a3b      	ldr	r2, [pc, #236]	; (800144c <mc_lock_pins+0x108>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001360:	3118      	adds	r1, #24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001362:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001364:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001366:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001368:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800136a:	3910      	subs	r1, #16
  temp = READ_REG(GPIOx->LCKR);
 800136c:	920c      	str	r2, [sp, #48]	; 0x30
  (void) temp;
 800136e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001370:	4a37      	ldr	r2, [pc, #220]	; (8001450 <mc_lock_pins+0x10c>)
 8001372:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001374:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001376:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001378:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800137a:	4936      	ldr	r1, [pc, #216]	; (8001454 <mc_lock_pins+0x110>)
  temp = READ_REG(GPIOx->LCKR);
 800137c:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 800137e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001380:	4a35      	ldr	r2, [pc, #212]	; (8001458 <mc_lock_pins+0x114>)
 8001382:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001384:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001386:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001388:	69d4      	ldr	r4, [r2, #28]
 800138a:	940a      	str	r4, [sp, #40]	; 0x28
  (void) temp;
 800138c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800138e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001390:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001392:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001394:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001396:	3002      	adds	r0, #2
  temp = READ_REG(GPIOx->LCKR);
 8001398:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 800139a:	9909      	ldr	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800139c:	492f      	ldr	r1, [pc, #188]	; (800145c <mc_lock_pins+0x118>)
 800139e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013a0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013a2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013a4:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013a6:	3803      	subs	r0, #3
  temp = READ_REG(GPIOx->LCKR);
 80013a8:	9108      	str	r1, [sp, #32]
  (void) temp;
 80013aa:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ac:	492c      	ldr	r1, [pc, #176]	; (8001460 <mc_lock_pins+0x11c>)
 80013ae:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013b0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013b2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013b4:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013b6:	30ff      	adds	r0, #255	; 0xff
  temp = READ_REG(GPIOx->LCKR);
 80013b8:	9107      	str	r1, [sp, #28]
  (void) temp;
 80013ba:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013bc:	4929      	ldr	r1, [pc, #164]	; (8001464 <mc_lock_pins+0x120>)
 80013be:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013c0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013c4:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013c6:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80013c8:	9106      	str	r1, [sp, #24]
  (void) temp;
 80013ca:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013cc:	2181      	movs	r1, #129	; 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013ce:	30ff      	adds	r0, #255	; 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013d0:	0249      	lsls	r1, r1, #9
 80013d2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013d4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013d6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013d8:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013da:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80013dc:	9105      	str	r1, [sp, #20]
  (void) temp;
 80013de:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013e0:	2188      	movs	r1, #136	; 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013e2:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013e4:	0249      	lsls	r1, r1, #9
 80013e6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013e8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ea:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013ec:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013ee:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80013f0:	9104      	str	r1, [sp, #16]
  (void) temp;
 80013f2:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013f4:	21a0      	movs	r1, #160	; 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013f6:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013f8:	0249      	lsls	r1, r1, #9
 80013fa:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013fc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013fe:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001400:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001402:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001404:	9103      	str	r1, [sp, #12]
  (void) temp;
 8001406:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001408:	2182      	movs	r1, #130	; 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 800140a:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800140c:	0249      	lsls	r1, r1, #9
 800140e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001410:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001412:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001414:	69db      	ldr	r3, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001416:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001418:	9302      	str	r3, [sp, #8]
  (void) temp;
 800141a:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800141c:	23c0      	movs	r3, #192	; 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 800141e:	0209      	lsls	r1, r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001424:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001426:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001428:	69d3      	ldr	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800142a:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 800142c:	9301      	str	r3, [sp, #4]
  (void) temp;
 800142e:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001430:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001432:	0189      	lsls	r1, r1, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001438:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800143a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800143c:	69d3      	ldr	r3, [r2, #28]
 800143e:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001440:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8001442:	b00e      	add	sp, #56	; 0x38
 8001444:	bd10      	pop	{r4, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	00010008 	.word	0x00010008
 800144c:	00010020 	.word	0x00010020
 8001450:	00010010 	.word	0x00010010
 8001454:	00010002 	.word	0x00010002
 8001458:	48000400 	.word	0x48000400
 800145c:	00010004 	.word	0x00010004
 8001460:	00010001 	.word	0x00010001
 8001464:	00010100 	.word	0x00010100

08001468 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	46c6      	mov	lr, r8
 800146c:	b500      	push	{lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	0016      	movs	r6, r2
 8001472:	001f      	movs	r7, r3
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001474:	2200      	movs	r2, #0
 8001476:	466b      	mov	r3, sp
{
 8001478:	0005      	movs	r5, r0
  bool bNoError = false; // Default is error
 800147a:	725a      	strb	r2, [r3, #9]
{
 800147c:	000c      	movs	r4, r1
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 800147e:	094a      	lsrs	r2, r1, #5
  if (bMotorSelection != 0)
 8001480:	d111      	bne.n	80014a6 <MCP_ReceivedFrame+0x3e>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001482:	2912      	cmp	r1, #18
 8001484:	d82d      	bhi.n	80014e2 <MCP_ReceivedFrame+0x7a>
 8001486:	4bcf      	ldr	r3, [pc, #828]	; (80017c4 <MCP_ReceivedFrame+0x35c>)
 8001488:	008c      	lsls	r4, r1, #2
 800148a:	591b      	ldr	r3, [r3, r4]
 800148c:	469f      	mov	pc, r3
 800148e:	240e      	movs	r4, #14
 8001490:	446c      	add	r4, sp
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001492:	69a8      	ldr	r0, [r5, #24]
 8001494:	2301      	movs	r3, #1
 8001496:	0022      	movs	r2, r4
 8001498:	21ff      	movs	r1, #255	; 0xff
 800149a:	69ed      	ldr	r5, [r5, #28]
 800149c:	47a8      	blx	r5
    }
  }
}
 800149e:	b00c      	add	sp, #48	; 0x30
 80014a0:	bc80      	pop	{r7}
 80014a2:	46b8      	mov	r8, r7
 80014a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80014a6:	2100      	movs	r1, #0
 80014a8:	3a01      	subs	r2, #1
 80014aa:	f000 fe9d 	bl	80021e8 <UI_SetReg>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d10e      	bne.n	80014d0 <MCP_ReceivedFrame+0x68>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80014b2:	240e      	movs	r4, #14
 80014b4:	230b      	movs	r3, #11
 80014b6:	446c      	add	r4, sp
 80014b8:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 80014ba:	466b      	mov	r3, sp
 80014bc:	7a58      	ldrb	r0, [r3, #9]
 80014be:	2800      	cmp	r0, #0
 80014c0:	d0e5      	beq.n	800148e <MCP_ReceivedFrame+0x26>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80014c2:	2300      	movs	r3, #0
 80014c4:	2200      	movs	r2, #0
 80014c6:	21f0      	movs	r1, #240	; 0xf0
 80014c8:	69a8      	ldr	r0, [r5, #24]
 80014ca:	69ec      	ldr	r4, [r5, #28]
 80014cc:	47a0      	blx	r4
 80014ce:	e7e6      	b.n	800149e <MCP_ReceivedFrame+0x36>
  switch (Code)
 80014d0:	211f      	movs	r1, #31
 80014d2:	400c      	ands	r4, r1
 80014d4:	2c12      	cmp	r4, #18
 80014d6:	d900      	bls.n	80014da <MCP_ReceivedFrame+0x72>
 80014d8:	e118      	b.n	800170c <MCP_ReceivedFrame+0x2a4>
 80014da:	4bbb      	ldr	r3, [pc, #748]	; (80017c8 <MCP_ReceivedFrame+0x360>)
 80014dc:	00a4      	lsls	r4, r4, #2
 80014de:	591b      	ldr	r3, [r3, r4]
 80014e0:	469f      	mov	pc, r3
      bErrorCode = ERROR_BAD_FRAME_ID;
 80014e2:	240e      	movs	r4, #14
 80014e4:	2301      	movs	r3, #1
 80014e6:	446c      	add	r4, sp
 80014e8:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 80014ea:	e7d2      	b.n	8001492 <MCP_ReceivedFrame+0x2a>
        outBuff[i] = 0;
 80014ec:	ac04      	add	r4, sp, #16
 80014ee:	2220      	movs	r2, #32
 80014f0:	2100      	movs	r1, #0
 80014f2:	0020      	movs	r0, r4
 80014f4:	f005 f8d9 	bl	80066aa <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80014f8:	23a8      	movs	r3, #168	; 0xa8
 80014fa:	58e8      	ldr	r0, [r5, r3]
 80014fc:	2300      	movs	r3, #0
 80014fe:	e005      	b.n	800150c <MCP_ReceivedFrame+0xa4>
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001500:	18e1      	adds	r1, r4, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001502:	3301      	adds	r3, #1
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001504:	70ca      	strb	r2, [r1, #3]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001506:	2b1d      	cmp	r3, #29
 8001508:	d100      	bne.n	800150c <MCP_ReceivedFrame+0xa4>
 800150a:	e154      	b.n	80017b6 <MCP_ReceivedFrame+0x34e>
 800150c:	5cc2      	ldrb	r2, [r0, r3]
 800150e:	b2d9      	uxtb	r1, r3
 8001510:	2a09      	cmp	r2, #9
 8001512:	d1f5      	bne.n	8001500 <MCP_ReceivedFrame+0x98>
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001514:	1d4a      	adds	r2, r1, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001516:	1dcb      	adds	r3, r1, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001518:	3109      	adds	r1, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 800151a:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 800151c:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 800151e:	b2c9      	uxtb	r1, r1
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001520:	5c82      	ldrb	r2, [r0, r2]
 8001522:	7022      	strb	r2, [r4, #0]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001524:	5cc3      	ldrb	r3, [r0, r3]
 8001526:	7063      	strb	r3, [r4, #1]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001528:	5c43      	ldrb	r3, [r0, r1]
 800152a:	70a3      	strb	r3, [r4, #2]
 800152c:	e0d1      	b.n	80016d2 <MCP_ReceivedFrame+0x26a>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800152e:	7973      	ldrb	r3, [r6, #5]
 8001530:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001532:	7871      	ldrb	r1, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	18d2      	adds	r2, r2, r3
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001538:	7833      	ldrb	r3, [r6, #0]
 800153a:	0209      	lsls	r1, r1, #8
 800153c:	18c9      	adds	r1, r1, r3
 800153e:	78b3      	ldrb	r3, [r6, #2]
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001540:	0028      	movs	r0, r5
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	18c9      	adds	r1, r1, r3
 8001546:	78f3      	ldrb	r3, [r6, #3]
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001548:	b292      	uxth	r2, r2
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800154a:	061b      	lsls	r3, r3, #24
 800154c:	18c9      	adds	r1, r1, r3
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800154e:	f001 f9e7 	bl	8002920 <UI_ExecSpeedRamp>
 8001552:	466b      	mov	r3, sp
 8001554:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001556:	e7b2      	b.n	80014be <MCP_ReceivedFrame+0x56>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001558:	270a      	movs	r7, #10
 800155a:	240e      	movs	r4, #14
 800155c:	ab03      	add	r3, sp, #12
 800155e:	4698      	mov	r8, r3
 8001560:	446c      	add	r4, sp
 8001562:	446f      	add	r7, sp
 8001564:	7831      	ldrb	r1, [r6, #0]
 8001566:	003a      	movs	r2, r7
 8001568:	9400      	str	r4, [sp, #0]
 800156a:	0028      	movs	r0, r5
 800156c:	f001 f9f4 	bl	8002958 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001570:	4643      	mov	r3, r8
 8001572:	2200      	movs	r2, #0
 8001574:	5e9a      	ldrsh	r2, [r3, r2]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001576:	69a8      	ldr	r0, [r5, #24]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001578:	0053      	lsls	r3, r2, #1
 800157a:	189b      	adds	r3, r3, r2
 800157c:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 800157e:	aa04      	add	r2, sp, #16
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001580:	1219      	asrs	r1, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001582:	7013      	strb	r3, [r2, #0]
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001584:	7051      	strb	r1, [r2, #1]
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001586:	1419      	asrs	r1, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001588:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 800158a:	7091      	strb	r1, [r2, #2]
      outBuff[3] = (uint8_t)(rpm >> 24);
 800158c:	70d3      	strb	r3, [r2, #3]
      outBuff[4] = (uint8_t)(FinalTorque);
 800158e:	2100      	movs	r1, #0
 8001590:	5e63      	ldrsh	r3, [r4, r1]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001592:	21f0      	movs	r1, #240	; 0xf0
      outBuff[4] = (uint8_t)(FinalTorque);
 8001594:	7113      	strb	r3, [r2, #4]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001596:	121b      	asrs	r3, r3, #8
 8001598:	7153      	strb	r3, [r2, #5]
      outBuff[6] = (uint8_t)(Durationms);
 800159a:	883b      	ldrh	r3, [r7, #0]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800159c:	69ec      	ldr	r4, [r5, #28]
      outBuff[6] = (uint8_t)(Durationms);
 800159e:	7193      	strb	r3, [r2, #6]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	71d3      	strb	r3, [r2, #7]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80015a4:	2308      	movs	r3, #8
 80015a6:	47a0      	blx	r4
    if (bNoError)
 80015a8:	466b      	mov	r3, sp
 80015aa:	7a58      	ldrb	r0, [r3, #9]
 80015ac:	e787      	b.n	80014be <MCP_ReceivedFrame+0x56>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80015ae:	78b0      	ldrb	r0, [r6, #2]
 80015b0:	7873      	ldrb	r3, [r6, #1]
 80015b2:	0200      	lsls	r0, r0, #8
 80015b4:	18c0      	adds	r0, r0, r3
 80015b6:	78f3      	ldrb	r3, [r6, #3]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80015b8:	2106      	movs	r1, #6
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	18c0      	adds	r0, r0, r3
 80015be:	7933      	ldrb	r3, [r6, #4]
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	18c0      	adds	r0, r0, r3
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80015c4:	f7fe fe2a 	bl	800021c <__divsi3>
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80015c8:	b203      	sxth	r3, r0
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80015ca:	79b0      	ldrb	r0, [r6, #6]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80015cc:	7a31      	ldrb	r1, [r6, #8]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80015ce:	7974      	ldrb	r4, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80015d0:	79f2      	ldrb	r2, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80015d2:	0200      	lsls	r0, r0, #8
      hDurationms = buffer[7] + (buffer[8] << 8);
 80015d4:	0209      	lsls	r1, r1, #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80015d6:	1824      	adds	r4, r4, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80015d8:	1852      	adds	r2, r2, r1
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80015da:	b224      	sxth	r4, r4
 80015dc:	7831      	ldrb	r1, [r6, #0]
 80015de:	0028      	movs	r0, r5
 80015e0:	b292      	uxth	r2, r2
 80015e2:	9400      	str	r4, [sp, #0]
 80015e4:	f001 f9d6 	bl	8002994 <UI_SetRevupData>
 80015e8:	466b      	mov	r3, sp
 80015ea:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80015ec:	e767      	b.n	80014be <MCP_ReceivedFrame+0x56>
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80015ee:	240e      	movs	r4, #14
 80015f0:	2303      	movs	r3, #3
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80015f2:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80015f4:	446c      	add	r4, sp
 80015f6:	7023      	strb	r3, [r4, #0]
      switch (bRegID)
 80015f8:	2988      	cmp	r1, #136	; 0x88
 80015fa:	d8d5      	bhi.n	80015a8 <MCP_ReceivedFrame+0x140>
 80015fc:	4a73      	ldr	r2, [pc, #460]	; (80017cc <MCP_ReceivedFrame+0x364>)
 80015fe:	008b      	lsls	r3, r1, #2
 8001600:	58d3      	ldr	r3, [r2, r3]
 8001602:	469f      	mov	pc, r3
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001604:	240e      	movs	r4, #14
 8001606:	2307      	movs	r3, #7
 8001608:	446c      	add	r4, sp
 800160a:	7023      	strb	r3, [r4, #0]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800160c:	0028      	movs	r0, r5
      uint8_t bCmdID = buffer[0];
 800160e:	7831      	ldrb	r1, [r6, #0]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001610:	f001 f94c 	bl	80028ac <UI_ExecCmd>
 8001614:	466b      	mov	r3, sp
 8001616:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001618:	e751      	b.n	80014be <MCP_ReceivedFrame+0x56>
      bErrorCode = ERROR_CODE_WRONG_SET;
 800161a:	240e      	movs	r4, #14
 800161c:	2305      	movs	r3, #5
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 800161e:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001620:	446c      	add	r4, sp
 8001622:	7023      	strb	r3, [r4, #0]
      switch (bRegID)
 8001624:	2988      	cmp	r1, #136	; 0x88
 8001626:	d878      	bhi.n	800171a <MCP_ReceivedFrame+0x2b2>
 8001628:	4a69      	ldr	r2, [pc, #420]	; (80017d0 <MCP_ReceivedFrame+0x368>)
 800162a:	008b      	lsls	r3, r1, #2
 800162c:	58d3      	ldr	r3, [r2, r3]
 800162e:	469f      	mov	pc, r3
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001630:	78f3      	ldrb	r3, [r6, #3]
 8001632:	78b2      	ldrb	r2, [r6, #2]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	18d2      	adds	r2, r2, r3
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001638:	7873      	ldrb	r3, [r6, #1]
 800163a:	7831      	ldrb	r1, [r6, #0]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	18c9      	adds	r1, r1, r3
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001640:	b212      	sxth	r2, r2
 8001642:	0028      	movs	r0, r5
 8001644:	b209      	sxth	r1, r1
 8001646:	f001 f9c1 	bl	80029cc <UI_SetCurrentReferences>
      bNoError = true;
 800164a:	2301      	movs	r3, #1
 800164c:	466a      	mov	r2, sp
 800164e:	7253      	strb	r3, [r2, #9]
  if (RequireAck)
 8001650:	e737      	b.n	80014c2 <MCP_ReceivedFrame+0x5a>
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001652:	240e      	movs	r4, #14
 8001654:	230c      	movs	r3, #12
      stepList.data = buffer;
 8001656:	9604      	str	r6, [sp, #16]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001658:	4e5e      	ldr	r6, [pc, #376]	; (80017d4 <MCP_ReceivedFrame+0x36c>)
      stepList.data = buffer;
 800165a:	a804      	add	r0, sp, #16
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800165c:	446c      	add	r4, sp
 800165e:	7023      	strb	r3, [r4, #0]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001660:	0031      	movs	r1, r6
      stepList.len = Size;
 8001662:	7107      	strb	r7, [r0, #4]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001664:	f001 f9c0 	bl	80029e8 <UI_GetMPInfo>
 8001668:	466b      	mov	r3, sp
 800166a:	7258      	strb	r0, [r3, #9]
      if (bNoError)
 800166c:	2800      	cmp	r0, #0
 800166e:	d100      	bne.n	8001672 <MCP_ReceivedFrame+0x20a>
 8001670:	e70f      	b.n	8001492 <MCP_ReceivedFrame+0x2a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001672:	21f0      	movs	r1, #240	; 0xf0
 8001674:	7933      	ldrb	r3, [r6, #4]
 8001676:	6832      	ldr	r2, [r6, #0]
 8001678:	69a8      	ldr	r0, [r5, #24]
 800167a:	69ec      	ldr	r4, [r5, #28]
 800167c:	47a0      	blx	r4
  if (RequireAck)
 800167e:	e70e      	b.n	800149e <MCP_ReceivedFrame+0x36>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001680:	7973      	ldrb	r3, [r6, #5]
 8001682:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001684:	7871      	ldrb	r1, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	18d2      	adds	r2, r2, r3
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800168a:	7833      	ldrb	r3, [r6, #0]
 800168c:	0209      	lsls	r1, r1, #8
 800168e:	18c9      	adds	r1, r1, r3
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001690:	0028      	movs	r0, r5
 8001692:	b292      	uxth	r2, r2
 8001694:	b209      	sxth	r1, r1
 8001696:	f001 f955 	bl	8002944 <UI_ExecTorqueRamp>
 800169a:	466b      	mov	r3, sp
 800169c:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 800169e:	e70e      	b.n	80014be <MCP_ReceivedFrame+0x56>
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80016a0:	23a8      	movs	r3, #168	; 0xa8
        outBuff[i] = pHandle->s_fwVer[i];
 80016a2:	240f      	movs	r4, #15
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80016a4:	58e9      	ldr	r1, [r5, r3]
        outBuff[i] = pHandle->s_fwVer[i];
 80016a6:	446c      	add	r4, sp
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80016a8:	3ba7      	subs	r3, #167	; 0xa7
 80016aa:	3901      	subs	r1, #1
 80016ac:	e004      	b.n	80016b8 <MCP_ReceivedFrame+0x250>
        outBuff[i] = pHandle->s_fwVer[i];
 80016ae:	54e2      	strb	r2, [r4, r3]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80016b0:	3301      	adds	r3, #1
 80016b2:	2b21      	cmp	r3, #33	; 0x21
 80016b4:	d100      	bne.n	80016b8 <MCP_ReceivedFrame+0x250>
 80016b6:	e082      	b.n	80017be <MCP_ReceivedFrame+0x356>
 80016b8:	5cca      	ldrb	r2, [r1, r3]
 80016ba:	1e58      	subs	r0, r3, #1
 80016bc:	b2c0      	uxtb	r0, r0
 80016be:	2a00      	cmp	r2, #0
 80016c0:	d1f5      	bne.n	80016ae <MCP_ReceivedFrame+0x246>
        outBuff[i] = 0;
 80016c2:	2220      	movs	r2, #32
 80016c4:	ac04      	add	r4, sp, #16
 80016c6:	1a12      	subs	r2, r2, r0
 80016c8:	2100      	movs	r1, #0
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	1820      	adds	r0, r4, r0
 80016ce:	f004 ffec 	bl	80066aa <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80016d2:	0022      	movs	r2, r4
 80016d4:	2320      	movs	r3, #32
 80016d6:	21f0      	movs	r1, #240	; 0xf0
 80016d8:	69a8      	ldr	r0, [r5, #24]
 80016da:	69ec      	ldr	r4, [r5, #28]
 80016dc:	47a0      	blx	r4
      bNoError = true;
 80016de:	2301      	movs	r3, #1
 80016e0:	466a      	mov	r2, sp
 80016e2:	7253      	strb	r3, [r2, #9]
  if (RequireAck)
 80016e4:	e6ed      	b.n	80014c2 <MCP_ReceivedFrame+0x5a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80016e6:	2309      	movs	r3, #9
 80016e8:	446b      	add	r3, sp
 80016ea:	001a      	movs	r2, r3
 80016ec:	0028      	movs	r0, r5
 80016ee:	f000 fe9b 	bl	8002428 <UI_GetReg>
          if ( bNoError == true )
 80016f2:	466b      	mov	r3, sp
 80016f4:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80016f6:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d100      	bne.n	80016fe <MCP_ReceivedFrame+0x296>
 80016fc:	e6c9      	b.n	8001492 <MCP_ReceivedFrame+0x2a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80016fe:	2302      	movs	r3, #2
 8001700:	21f0      	movs	r1, #240	; 0xf0
 8001702:	69a8      	ldr	r0, [r5, #24]
 8001704:	69ec      	ldr	r4, [r5, #28]
 8001706:	aa04      	add	r2, sp, #16
 8001708:	47a0      	blx	r4
  if (RequireAck)
 800170a:	e6c8      	b.n	800149e <MCP_ReceivedFrame+0x36>
    if (bNoError)
 800170c:	466b      	mov	r3, sp
      bErrorCode = ERROR_BAD_FRAME_ID;
 800170e:	240e      	movs	r4, #14
    if (bNoError)
 8001710:	7a58      	ldrb	r0, [r3, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001712:	2301      	movs	r3, #1
 8001714:	446c      	add	r4, sp
 8001716:	7023      	strb	r3, [r4, #0]
  if (RequireAck)
 8001718:	e6d1      	b.n	80014be <MCP_ReceivedFrame+0x56>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 800171a:	2302      	movs	r3, #2
 800171c:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 800171e:	466b      	mov	r3, sp
 8001720:	7a58      	ldrb	r0, [r3, #9]
 8001722:	e6cc      	b.n	80014be <MCP_ReceivedFrame+0x56>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001724:	78b2      	ldrb	r2, [r6, #2]
 8001726:	7873      	ldrb	r3, [r6, #1]
 8001728:	0212      	lsls	r2, r2, #8
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800172a:	18d2      	adds	r2, r2, r3
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800172c:	0028      	movs	r0, r5
 800172e:	f000 fd5b 	bl	80021e8 <UI_SetReg>
 8001732:	466b      	mov	r3, sp
 8001734:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001736:	e6c2      	b.n	80014be <MCP_ReceivedFrame+0x56>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001738:	2309      	movs	r3, #9
 800173a:	446b      	add	r3, sp
 800173c:	001a      	movs	r2, r3
 800173e:	0028      	movs	r0, r5
 8001740:	f000 fe72 	bl	8002428 <UI_GetReg>
          if ( bNoError == true )
 8001744:	466b      	mov	r3, sp
 8001746:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001748:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800174a:	2b00      	cmp	r3, #0
 800174c:	d100      	bne.n	8001750 <MCP_ReceivedFrame+0x2e8>
 800174e:	e6a0      	b.n	8001492 <MCP_ReceivedFrame+0x2a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001750:	2304      	movs	r3, #4
 8001752:	21f0      	movs	r1, #240	; 0xf0
 8001754:	69a8      	ldr	r0, [r5, #24]
 8001756:	69ec      	ldr	r4, [r5, #28]
 8001758:	aa04      	add	r2, sp, #16
 800175a:	47a0      	blx	r4
  if (RequireAck)
 800175c:	e69f      	b.n	800149e <MCP_ReceivedFrame+0x36>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800175e:	78b2      	ldrb	r2, [r6, #2]
 8001760:	7873      	ldrb	r3, [r6, #1]
 8001762:	0212      	lsls	r2, r2, #8
 8001764:	18d2      	adds	r2, r2, r3
 8001766:	78f3      	ldrb	r3, [r6, #3]
 8001768:	041b      	lsls	r3, r3, #16
 800176a:	18d2      	adds	r2, r2, r3
 800176c:	7933      	ldrb	r3, [r6, #4]
 800176e:	061b      	lsls	r3, r3, #24
 8001770:	e7db      	b.n	800172a <MCP_ReceivedFrame+0x2c2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001772:	2309      	movs	r3, #9
 8001774:	446b      	add	r3, sp
 8001776:	001a      	movs	r2, r3
 8001778:	0028      	movs	r0, r5
 800177a:	f000 fe55 	bl	8002428 <UI_GetReg>
           if ( bNoError == true )
 800177e:	466b      	mov	r3, sp
 8001780:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001782:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001784:	2b00      	cmp	r3, #0
 8001786:	d100      	bne.n	800178a <MCP_ReceivedFrame+0x322>
 8001788:	e683      	b.n	8001492 <MCP_ReceivedFrame+0x2a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800178a:	2301      	movs	r3, #1
 800178c:	21f0      	movs	r1, #240	; 0xf0
 800178e:	69a8      	ldr	r0, [r5, #24]
 8001790:	69ec      	ldr	r4, [r5, #28]
 8001792:	aa04      	add	r2, sp, #16
 8001794:	47a0      	blx	r4
  if (RequireAck)
 8001796:	e682      	b.n	800149e <MCP_ReceivedFrame+0x36>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001798:	0028      	movs	r0, r5
 800179a:	7872      	ldrb	r2, [r6, #1]
 800179c:	f000 fd24 	bl	80021e8 <UI_SetReg>
 80017a0:	466b      	mov	r3, sp
 80017a2:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80017a4:	e68b      	b.n	80014be <MCP_ReceivedFrame+0x56>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80017a6:	2100      	movs	r1, #0
 80017a8:	0028      	movs	r0, r5
          int32_t wValue = (int32_t)(buffer[1]);
 80017aa:	7872      	ldrb	r2, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80017ac:	f000 fd1c 	bl	80021e8 <UI_SetReg>
 80017b0:	466b      	mov	r3, sp
 80017b2:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80017b4:	e683      	b.n	80014be <MCP_ReceivedFrame+0x56>
 80017b6:	2126      	movs	r1, #38	; 0x26
 80017b8:	2324      	movs	r3, #36	; 0x24
 80017ba:	2222      	movs	r2, #34	; 0x22
 80017bc:	e6b0      	b.n	8001520 <MCP_ReceivedFrame+0xb8>
 80017be:	ac04      	add	r4, sp, #16
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80017c0:	e787      	b.n	80016d2 <MCP_ReceivedFrame+0x26a>
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	08006988 	.word	0x08006988
 80017c8:	080069d4 	.word	0x080069d4
 80017cc:	08006a20 	.word	0x08006a20
 80017d0:	08006c44 	.word	0x08006c44
 80017d4:	20000998 	.word	0x20000998

080017d8 <MCP_WaitNextFrame>:
{
 80017d8:	b510      	push	{r4, lr}
 80017da:	0004      	movs	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80017dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017de:	6980      	ldr	r0, [r0, #24]
 80017e0:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	23ac      	movs	r3, #172	; 0xac
 80017e6:	54e2      	strb	r2, [r4, r3]
  pHandle->fFcpReceive(pHandle->pFCP);
 80017e8:	69a0      	ldr	r0, [r4, #24]
 80017ea:	6a23      	ldr	r3, [r4, #32]
 80017ec:	4798      	blx	r3
}
 80017ee:	bd10      	pop	{r4, pc}

080017f0 <MCP_Init>:
{
 80017f0:	b570      	push	{r4, r5, r6, lr}
 80017f2:	0004      	movs	r4, r0
 80017f4:	001d      	movs	r5, r3
  pHandle->s_fwVer = s_fwVer;
 80017f6:	23a8      	movs	r3, #168	; 0xa8
{
 80017f8:	0016      	movs	r6, r2
 80017fa:	b082      	sub	sp, #8
  pHandle->s_fwVer = s_fwVer;
 80017fc:	9a07      	ldr	r2, [sp, #28]
  pHandle->pFCP = pFCP;
 80017fe:	61a1      	str	r1, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 8001800:	50e2      	str	r2, [r4, r3]
  FCP_SetClient( pFCP, pHandle,
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MCP_Init+0x34>)
{
 8001804:	0008      	movs	r0, r1
  FCP_SetClient( pFCP, pHandle,
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <MCP_Init+0x38>)
 8001808:	0021      	movs	r1, r4
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MCP_Init+0x3c>)
 800180e:	f002 fe8b 	bl	8004528 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001812:	9b06      	ldr	r3, [sp, #24]
  MCP_WaitNextFrame(pHandle);
 8001814:	0020      	movs	r0, r4
  pHandle->fFcpSend = fFcpSend;
 8001816:	61e6      	str	r6, [r4, #28]
  pHandle->fFcpReceive = fFcpReceive;
 8001818:	6225      	str	r5, [r4, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 800181a:	6263      	str	r3, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 800181c:	f7ff ffdc 	bl	80017d8 <MCP_WaitNextFrame>
}
 8001820:	b002      	add	sp, #8
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	08001831 	.word	0x08001831
 8001828:	08001839 	.word	0x08001839
 800182c:	08001469 	.word	0x08001469

08001830 <MCP_OnTimeOut>:
{
 8001830:	b510      	push	{r4, lr}
     MCP_WaitNextFrame(pHandle);
 8001832:	f7ff ffd1 	bl	80017d8 <MCP_WaitNextFrame>
}
 8001836:	bd10      	pop	{r4, pc}

08001838 <MCP_SentFrame>:
{
 8001838:	b510      	push	{r4, lr}
    MCP_WaitNextFrame(pHandle);
 800183a:	f7ff ffcd 	bl	80017d8 <MCP_WaitNextFrame>
}
 800183e:	bd10      	pop	{r4, pc}

08001840 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001840:	b530      	push	{r4, r5, lr}
 8001842:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001844:	f001 ff56 	bl	80036f4 <HAL_RCC_GetHCLKFreq>
 8001848:	21fa      	movs	r1, #250	; 0xfa
 800184a:	00c9      	lsls	r1, r1, #3
 800184c:	f7fe fc5c 	bl	8000108 <__udivsi3>
 8001850:	f001 fa90 	bl	8002d74 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001854:	4d08      	ldr	r5, [pc, #32]	; (8001878 <MX_MotorControl_Init+0x38>)
 8001856:	4c09      	ldr	r4, [pc, #36]	; (800187c <MX_MotorControl_Init+0x3c>)
 8001858:	0029      	movs	r1, r5
 800185a:	0020      	movs	r0, r4
 800185c:	f7ff fa4c 	bl	8000cf8 <MCboot>
  mc_lock_pins();
 8001860:	f7ff fd70 	bl	8001344 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_MotorControl_Init+0x40>)
 8001866:	0022      	movs	r2, r4
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2101      	movs	r1, #1
 800186c:	002b      	movs	r3, r5
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_MotorControl_Init+0x44>)
 8001870:	f000 fc2e 	bl	80020d0 <UI_TaskInit>
}
 8001874:	b003      	add	sp, #12
 8001876:	bd30      	pop	{r4, r5, pc}
 8001878:	200009a4 	.word	0x200009a4
 800187c:	200009a0 	.word	0x200009a0
 8001880:	08006e68 	.word	0x08006e68
 8001884:	200006d0 	.word	0x200006d0

08001888 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8001888:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800188a:	4d48      	ldr	r5, [pc, #288]	; (80019ac <RCM_RegisterRegConv+0x124>)
{
 800188c:	0003      	movs	r3, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800188e:	6829      	ldr	r1, [r5, #0]
 8001890:	2900      	cmp	r1, #0
 8001892:	d026      	beq.n	80018e2 <RCM_RegisterRegConv+0x5a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001894:	7902      	ldrb	r2, [r0, #4]
 8001896:	7908      	ldrb	r0, [r1, #4]
 8001898:	4282      	cmp	r2, r0
 800189a:	d016      	beq.n	80018ca <RCM_RegisterRegConv+0x42>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800189c:	6869      	ldr	r1, [r5, #4]
 800189e:	2900      	cmp	r1, #0
 80018a0:	d055      	beq.n	800194e <RCM_RegisterRegConv+0xc6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80018a2:	790c      	ldrb	r4, [r1, #4]
  uint8_t handle=255;
 80018a4:	20ff      	movs	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80018a6:	4294      	cmp	r4, r2
 80018a8:	d023      	beq.n	80018f2 <RCM_RegisterRegConv+0x6a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80018aa:	68a9      	ldr	r1, [r5, #8]
 80018ac:	2900      	cmp	r1, #0
 80018ae:	d064      	beq.n	800197a <RCM_RegisterRegConv+0xf2>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80018b0:	790c      	ldrb	r4, [r1, #4]
 80018b2:	4294      	cmp	r4, r2
 80018b4:	d053      	beq.n	800195e <RCM_RegisterRegConv+0xd6>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80018b6:	68e9      	ldr	r1, [r5, #12]
 80018b8:	2900      	cmp	r1, #0
 80018ba:	d020      	beq.n	80018fe <RCM_RegisterRegConv+0x76>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80018bc:	790c      	ldrb	r4, [r1, #4]
 80018be:	4294      	cmp	r4, r2
 80018c0:	d064      	beq.n	800198c <RCM_RegisterRegConv+0x104>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80018c2:	2803      	cmp	r0, #3
 80018c4:	d91e      	bls.n	8001904 <RCM_RegisterRegConv+0x7c>
 80018c6:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80018ca:	6809      	ldr	r1, [r1, #0]
 80018cc:	681c      	ldr	r4, [r3, #0]
 80018ce:	42a1      	cmp	r1, r4
 80018d0:	d04b      	beq.n	800196a <RCM_RegisterRegConv+0xe2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80018d2:	6869      	ldr	r1, [r5, #4]
 80018d4:	2900      	cmp	r1, #0
 80018d6:	d1e4      	bne.n	80018a2 <RCM_RegisterRegConv+0x1a>
 80018d8:	68a9      	ldr	r1, [r5, #8]
 80018da:	2900      	cmp	r1, #0
 80018dc:	d05e      	beq.n	800199c <RCM_RegisterRegConv+0x114>
      i++;
 80018de:	2001      	movs	r0, #1
 80018e0:	e7e6      	b.n	80018b0 <RCM_RegisterRegConv+0x28>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80018e2:	6869      	ldr	r1, [r5, #4]
  uint8_t i=0;
 80018e4:	2000      	movs	r0, #0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80018e6:	2900      	cmp	r1, #0
 80018e8:	d032      	beq.n	8001950 <RCM_RegisterRegConv+0xc8>
 80018ea:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80018ec:	790c      	ldrb	r4, [r1, #4]
 80018ee:	4294      	cmp	r4, r2
 80018f0:	d1db      	bne.n	80018aa <RCM_RegisterRegConv+0x22>
 80018f2:	6809      	ldr	r1, [r1, #0]
 80018f4:	681c      	ldr	r4, [r3, #0]
 80018f6:	42a1      	cmp	r1, r4
 80018f8:	d1d7      	bne.n	80018aa <RCM_RegisterRegConv+0x22>
      i++;
 80018fa:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 80018fc:	e003      	b.n	8001906 <RCM_RegisterRegConv+0x7e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80018fe:	2804      	cmp	r0, #4
 8001900:	d900      	bls.n	8001904 <RCM_RegisterRegConv+0x7c>
      i++;
 8001902:	2003      	movs	r0, #3
 8001904:	681c      	ldr	r4, [r3, #0]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001906:	2100      	movs	r1, #0
      RCM_handle_array [handle] = regConv;
 8001908:	0082      	lsls	r2, r0, #2
 800190a:	50ab      	str	r3, [r5, r2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800190c:	4a28      	ldr	r2, [pc, #160]	; (80019b0 <RCM_RegisterRegConv+0x128>)
 800190e:	00c3      	lsls	r3, r0, #3
 8001910:	5099      	str	r1, [r3, r2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001912:	68a3      	ldr	r3, [r4, #8]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001914:	07db      	lsls	r3, r3, #31
 8001916:	d40f      	bmi.n	8001938 <RCM_RegisterRegConv+0xb0>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001918:	68a3      	ldr	r3, [r4, #8]
 800191a:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <RCM_RegisterRegConv+0x12c>)
 800191c:	401a      	ands	r2, r3
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	4313      	orrs	r3, r2
 8001924:	60a3      	str	r3, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001926:	68a3      	ldr	r3, [r4, #8]
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 8001928:	2b00      	cmp	r3, #0
 800192a:	dbfc      	blt.n	8001926 <RCM_RegisterRegConv+0x9e>
  MODIFY_REG(ADCx->CR,
 800192c:	68a3      	ldr	r3, [r4, #8]
 800192e:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <RCM_RegisterRegConv+0x12c>)
 8001930:	4013      	ands	r3, r2
 8001932:	2201      	movs	r2, #1
 8001934:	4313      	orrs	r3, r2
 8001936:	60a3      	str	r3, [r4, #8]
      RCM_NoInj_array [handle].enable = false;
 8001938:	2100      	movs	r1, #0
 800193a:	0043      	lsls	r3, r0, #1
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <RCM_RegisterRegConv+0x130>)
 800193e:	181b      	adds	r3, r3, r0
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	5499      	strb	r1, [r3, r2]
      RCM_NoInj_array [handle].prev = handle;
 8001944:	18d3      	adds	r3, r2, r3
 8001946:	0202      	lsls	r2, r0, #8
 8001948:	4302      	orrs	r2, r0
 800194a:	809a      	strh	r2, [r3, #4]
 800194c:	e7bc      	b.n	80018c8 <RCM_RegisterRegConv+0x40>
      i++;
 800194e:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001950:	68a9      	ldr	r1, [r5, #8]
 8001952:	2900      	cmp	r1, #0
 8001954:	d00c      	beq.n	8001970 <RCM_RegisterRegConv+0xe8>
 8001956:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001958:	790c      	ldrb	r4, [r1, #4]
 800195a:	4294      	cmp	r4, r2
 800195c:	d1ab      	bne.n	80018b6 <RCM_RegisterRegConv+0x2e>
 800195e:	6809      	ldr	r1, [r1, #0]
 8001960:	681c      	ldr	r4, [r3, #0]
 8001962:	42a1      	cmp	r1, r4
 8001964:	d1a7      	bne.n	80018b6 <RCM_RegisterRegConv+0x2e>
      i++;
 8001966:	2002      	movs	r0, #2
 8001968:	e7cd      	b.n	8001906 <RCM_RegisterRegConv+0x7e>
  uint8_t i=0;
 800196a:	2000      	movs	r0, #0
 800196c:	e7cb      	b.n	8001906 <RCM_RegisterRegConv+0x7e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800196e:	2000      	movs	r0, #0
 8001970:	68e9      	ldr	r1, [r5, #12]
 8001972:	2900      	cmp	r1, #0
 8001974:	d0c6      	beq.n	8001904 <RCM_RegisterRegConv+0x7c>
 8001976:	791a      	ldrb	r2, [r3, #4]
 8001978:	e7a0      	b.n	80018bc <RCM_RegisterRegConv+0x34>
 800197a:	2804      	cmp	r0, #4
 800197c:	d9f7      	bls.n	800196e <RCM_RegisterRegConv+0xe6>
 800197e:	68e9      	ldr	r1, [r5, #12]
 8001980:	2900      	cmp	r1, #0
 8001982:	d009      	beq.n	8001998 <RCM_RegisterRegConv+0x110>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001984:	7908      	ldrb	r0, [r1, #4]
 8001986:	4290      	cmp	r0, r2
 8001988:	d106      	bne.n	8001998 <RCM_RegisterRegConv+0x110>
      i++;
 800198a:	2002      	movs	r0, #2
 800198c:	681c      	ldr	r4, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800198e:	680a      	ldr	r2, [r1, #0]
 8001990:	42a2      	cmp	r2, r4
 8001992:	d196      	bne.n	80018c2 <RCM_RegisterRegConv+0x3a>
      i++;
 8001994:	2003      	movs	r0, #3
 8001996:	e7b6      	b.n	8001906 <RCM_RegisterRegConv+0x7e>
 8001998:	2002      	movs	r0, #2
 800199a:	e7b3      	b.n	8001904 <RCM_RegisterRegConv+0x7c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800199c:	68e9      	ldr	r1, [r5, #12]
 800199e:	2900      	cmp	r1, #0
 80019a0:	d0ab      	beq.n	80018fa <RCM_RegisterRegConv+0x72>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80019a2:	790e      	ldrb	r6, [r1, #4]
      i++;
 80019a4:	2001      	movs	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80019a6:	4296      	cmp	r6, r2
 80019a8:	d0f1      	beq.n	800198e <RCM_RegisterRegConv+0x106>
 80019aa:	e7ac      	b.n	8001906 <RCM_RegisterRegConv+0x7e>
 80019ac:	200009e8 	.word	0x200009e8
 80019b0:	200009a8 	.word	0x200009a8
 80019b4:	7fffffe8 	.word	0x7fffffe8
 80019b8:	200009c8 	.word	0x200009c8

080019bc <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80019bc:	0041      	lsls	r1, r0, #1
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <RCM_ExecRegularConv+0x168>)
 80019c0:	180a      	adds	r2, r1, r0
 80019c2:	0052      	lsls	r2, r2, #1
 80019c4:	5c9a      	ldrb	r2, [r3, r2]
{
 80019c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (RCM_NoInj_array [handle].enable == false)
 80019c8:	2a00      	cmp	r2, #0
 80019ca:	d142      	bne.n	8001a52 <RCM_ExecRegularConv+0x96>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	2a00      	cmp	r2, #0
 80019d0:	d11c      	bne.n	8001a0c <RCM_ExecRegularConv+0x50>
  uint8_t LastEnable = RCM_MAX_CONV;
 80019d2:	2504      	movs	r5, #4
      if (RCM_NoInj_array [i].enable == true)
 80019d4:	799a      	ldrb	r2, [r3, #6]
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d100      	bne.n	80019dc <RCM_ExecRegularConv+0x20>
 80019da:	e07a      	b.n	8001ad2 <RCM_ExecRegularConv+0x116>
      {
        if (RCM_NoInj_array [i].next > handle)
 80019dc:	7adf      	ldrb	r7, [r3, #11]
 80019de:	42b8      	cmp	r0, r7
 80019e0:	d200      	bcs.n	80019e4 <RCM_ExecRegularConv+0x28>
 80019e2:	e092      	b.n	8001b0a <RCM_ExecRegularConv+0x14e>
      if (RCM_NoInj_array [i].enable == true)
 80019e4:	7b1a      	ldrb	r2, [r3, #12]
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d100      	bne.n	80019ec <RCM_ExecRegularConv+0x30>
 80019ea:	e091      	b.n	8001b10 <RCM_ExecRegularConv+0x154>
        if (RCM_NoInj_array [i].next > handle)
 80019ec:	7c5f      	ldrb	r7, [r3, #17]
 80019ee:	42b8      	cmp	r0, r7
 80019f0:	d200      	bcs.n	80019f4 <RCM_ExecRegularConv+0x38>
 80019f2:	e092      	b.n	8001b1a <RCM_ExecRegularConv+0x15e>
      if (RCM_NoInj_array [i].enable == true)
 80019f4:	7c9a      	ldrb	r2, [r3, #18]
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80019f6:	2502      	movs	r5, #2
      if (RCM_NoInj_array [i].enable == true)
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	d100      	bne.n	80019fe <RCM_ExecRegularConv+0x42>
 80019fc:	e073      	b.n	8001ae6 <RCM_ExecRegularConv+0x12a>
        if (RCM_NoInj_array [i].next > handle)
 80019fe:	7ddf      	ldrb	r7, [r3, #23]
 8001a00:	4287      	cmp	r7, r0
 8001a02:	d800      	bhi.n	8001a06 <RCM_ExecRegularConv+0x4a>
 8001a04:	e08c      	b.n	8001b20 <RCM_ExecRegularConv+0x164>
      i++;
 8001a06:	2203      	movs	r2, #3
      if (RCM_NoInj_array [i].enable == true)
 8001a08:	2603      	movs	r6, #3
 8001a0a:	e005      	b.n	8001a18 <RCM_ExecRegularConv+0x5c>
        if (RCM_NoInj_array [i].next > handle)
 8001a0c:	795f      	ldrb	r7, [r3, #5]
  uint8_t i=0;
 8001a0e:	2500      	movs	r5, #0
        if (RCM_NoInj_array [i].next > handle)
 8001a10:	42b8      	cmp	r0, r7
 8001a12:	d2df      	bcs.n	80019d4 <RCM_ExecRegularConv+0x18>
  uint8_t i=0;
 8001a14:	2200      	movs	r2, #0
      if (RCM_NoInj_array [i].enable == true)
 8001a16:	2600      	movs	r6, #0
          RCM_NoInj_array [handle].next = formerNext;
 8001a18:	180d      	adds	r5, r1, r0
          RCM_NoInj_array [i].next = handle;
 8001a1a:	0074      	lsls	r4, r6, #1
          RCM_NoInj_array [handle].next = formerNext;
 8001a1c:	006d      	lsls	r5, r5, #1
          RCM_NoInj_array [i].next = handle;
 8001a1e:	19a4      	adds	r4, r4, r6
          RCM_NoInj_array [handle].next = formerNext;
 8001a20:	195d      	adds	r5, r3, r5
          RCM_NoInj_array [i].next = handle;
 8001a22:	0064      	lsls	r4, r4, #1
          RCM_NoInj_array [handle].prev = i;
 8001a24:	712a      	strb	r2, [r5, #4]
          RCM_NoInj_array [i].next = handle;
 8001a26:	191c      	adds	r4, r3, r4
          RCM_NoInj_array [formerNext].prev = handle;
 8001a28:	007a      	lsls	r2, r7, #1
          RCM_NoInj_array [handle].next = formerNext;
 8001a2a:	716f      	strb	r7, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8001a2c:	19d2      	adds	r2, r2, r7
          RCM_NoInj_array [i].next = handle;
 8001a2e:	7160      	strb	r0, [r4, #5]
       {
         formerNext = RCM_NoInj_array [LastEnable].next;
         RCM_NoInj_array [handle].next = formerNext;
         RCM_NoInj_array [handle].prev = LastEnable;
         RCM_NoInj_array [LastEnable].next = handle;
         RCM_NoInj_array [formerNext].prev = handle;
 8001a30:	0052      	lsls	r2, r2, #1
 8001a32:	189a      	adds	r2, r3, r2
 8001a34:	7110      	strb	r0, [r2, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8001a36:	4a3c      	ldr	r2, [pc, #240]	; (8001b28 <RCM_ExecRegularConv+0x16c>)
 8001a38:	7815      	ldrb	r5, [r2, #0]
    RCM_NoInj_array [handle].enable = true;
 8001a3a:	2601      	movs	r6, #1
 8001a3c:	180c      	adds	r4, r1, r0
 8001a3e:	0064      	lsls	r4, r4, #1
 8001a40:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8001a42:	006c      	lsls	r4, r5, #1
 8001a44:	1964      	adds	r4, r4, r5
 8001a46:	0064      	lsls	r4, r4, #1
 8001a48:	191c      	adds	r4, r3, r4
 8001a4a:	7864      	ldrb	r4, [r4, #1]
 8001a4c:	2c01      	cmp	r4, #1
 8001a4e:	d000      	beq.n	8001a52 <RCM_ExecRegularConv+0x96>
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8001a50:	7010      	strb	r0, [r2, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8001a52:	2277      	movs	r2, #119	; 0x77
 8001a54:	4c35      	ldr	r4, [pc, #212]	; (8001b2c <RCM_ExecRegularConv+0x170>)
 8001a56:	5ca2      	ldrb	r2, [r4, r2]
 8001a58:	2a00      	cmp	r2, #0
 8001a5a:	d135      	bne.n	8001ac8 <RCM_ExecRegularConv+0x10c>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001a5c:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8001a5e:	4e34      	ldr	r6, [pc, #208]	; (8001b30 <RCM_ExecRegularConv+0x174>)
 8001a60:	0082      	lsls	r2, r0, #2
 8001a62:	58b5      	ldr	r5, [r6, r2]
 8001a64:	682a      	ldr	r2, [r5, #0]
 8001a66:	68d4      	ldr	r4, [r2, #12]
 8001a68:	43bc      	bics	r4, r7
 8001a6a:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001a6c:	68d4      	ldr	r4, [r2, #12]
 8001a6e:	4f31      	ldr	r7, [pc, #196]	; (8001b34 <RCM_ExecRegularConv+0x178>)
 8001a70:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001a72:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001a74:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001a76:	6954      	ldr	r4, [r2, #20]
 8001a78:	43bc      	bics	r4, r7
 8001a7a:	68af      	ldr	r7, [r5, #8]
 8001a7c:	433c      	orrs	r4, r7
 8001a7e:	6154      	str	r4, [r2, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a80:	2480      	movs	r4, #128	; 0x80
    /* Disabling External Trigger of ADC */
    LL_ADC_REG_SetTriggerSource (RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels (RCM_handle_array[handle]->regADC,  RCM_handle_array[handle]->samplingTime );
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[handle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel) );
 8001a82:	792d      	ldrb	r5, [r5, #4]
 8001a84:	01a4      	lsls	r4, r4, #6
 8001a86:	40ac      	lsls	r4, r5
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001a88:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a8a:	0b64      	lsrs	r4, r4, #13
 8001a8c:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001a8e:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8001a90:	6894      	ldr	r4, [r2, #8]
 8001a92:	4f29      	ldr	r7, [pc, #164]	; (8001b38 <RCM_ExecRegularConv+0x17c>)
 8001a94:	403c      	ands	r4, r7
 8001a96:	432c      	orrs	r4, r5
 8001a98:	6094      	str	r4, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001a9a:	6814      	ldr	r4, [r2, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );

    /* Wait EOC */
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
 8001a9c:	4225      	tst	r5, r4
 8001a9e:	d0fc      	beq.n	8001a9a <RCM_ExecRegularConv+0xde>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001aa0:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001aa2:	6c14      	ldr	r4, [r2, #64]	; 0x40
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8001aa4:	180a      	adds	r2, r1, r0
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
 8001aa6:	4d20      	ldr	r5, [pc, #128]	; (8001b28 <RCM_ExecRegularConv+0x16c>)
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	189a      	adds	r2, r3, r2
 8001aac:	8054      	strh	r4, [r2, #2]
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
 8001aae:	782c      	ldrb	r4, [r5, #0]
 8001ab0:	00a4      	lsls	r4, r4, #2
 8001ab2:	5934      	ldr	r4, [r6, r4]
 8001ab4:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001ab6:	68f4      	ldr	r4, [r6, #12]
 8001ab8:	43bc      	bics	r4, r7
 8001aba:	3f02      	subs	r7, #2
 8001abc:	433c      	orrs	r4, r7
 8001abe:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8001ac0:	7954      	ldrb	r4, [r2, #5]
 8001ac2:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array [handle].status = valid;
 8001ac4:	2402      	movs	r4, #2
 8001ac6:	7054      	strb	r4, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 8001ac8:	1808      	adds	r0, r1, r0
 8001aca:	0040      	lsls	r0, r0, #1
 8001acc:	181b      	adds	r3, r3, r0
return retVal;
 8001ace:	8858      	ldrh	r0, [r3, #2]
}
 8001ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (RCM_NoInj_array [i].enable == true)
 8001ad2:	7b1a      	ldrb	r2, [r3, #12]
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d000      	beq.n	8001ada <RCM_ExecRegularConv+0x11e>
 8001ad8:	e788      	b.n	80019ec <RCM_ExecRegularConv+0x30>
 8001ada:	7c9a      	ldrb	r2, [r3, #18]
 8001adc:	2a00      	cmp	r2, #0
 8001ade:	d000      	beq.n	8001ae2 <RCM_ExecRegularConv+0x126>
 8001ae0:	e78d      	b.n	80019fe <RCM_ExecRegularConv+0x42>
       if (LastEnable != RCM_MAX_CONV )
 8001ae2:	2d04      	cmp	r5, #4
 8001ae4:	d00d      	beq.n	8001b02 <RCM_ExecRegularConv+0x146>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8001ae6:	006a      	lsls	r2, r5, #1
 8001ae8:	1952      	adds	r2, r2, r5
 8001aea:	0052      	lsls	r2, r2, #1
 8001aec:	189a      	adds	r2, r3, r2
         RCM_NoInj_array [handle].next = formerNext;
 8001aee:	180c      	adds	r4, r1, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8001af0:	7956      	ldrb	r6, [r2, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8001af2:	0064      	lsls	r4, r4, #1
 8001af4:	191c      	adds	r4, r3, r4
 8001af6:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 8001af8:	7150      	strb	r0, [r2, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8001afa:	0072      	lsls	r2, r6, #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8001afc:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array [formerNext].prev = handle;
 8001afe:	1992      	adds	r2, r2, r6
 8001b00:	e796      	b.n	8001a30 <RCM_ExecRegularConv+0x74>
         RCM_currentHandle = handle;
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <RCM_ExecRegularConv+0x16c>)
 8001b04:	0005      	movs	r5, r0
 8001b06:	7010      	strb	r0, [r2, #0]
    while (i < RCM_MAX_CONV)
 8001b08:	e797      	b.n	8001a3a <RCM_ExecRegularConv+0x7e>
      i++;
 8001b0a:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 8001b0c:	2601      	movs	r6, #1
 8001b0e:	e783      	b.n	8001a18 <RCM_ExecRegularConv+0x5c>
 8001b10:	7c9a      	ldrb	r2, [r3, #18]
      i++;
 8001b12:	2501      	movs	r5, #1
      if (RCM_NoInj_array [i].enable == true)
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d0e6      	beq.n	8001ae6 <RCM_ExecRegularConv+0x12a>
 8001b18:	e771      	b.n	80019fe <RCM_ExecRegularConv+0x42>
      i++;
 8001b1a:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 8001b1c:	2602      	movs	r6, #2
 8001b1e:	e77b      	b.n	8001a18 <RCM_ExecRegularConv+0x5c>
      i++;
 8001b20:	2503      	movs	r5, #3
 8001b22:	e7e0      	b.n	8001ae6 <RCM_ExecRegularConv+0x12a>
 8001b24:	200009c8 	.word	0x200009c8
 8001b28:	200009e4 	.word	0x200009e4
 8001b2c:	20000314 	.word	0x20000314
 8001b30:	200009e8 	.word	0x200009e8
 8001b34:	fffff23f 	.word	0xfffff23f
 8001b38:	7fffffe8 	.word	0x7fffffe8

08001b3c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001b3c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001b3e:	4c11      	ldr	r4, [pc, #68]	; (8001b84 <RCM_ExecUserConv+0x48>)
 8001b40:	7823      	ldrb	r3, [r4, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d000      	beq.n	8001b48 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001b48:	4d0f      	ldr	r5, [pc, #60]	; (8001b88 <RCM_ExecUserConv+0x4c>)
 8001b4a:	7828      	ldrb	r0, [r5, #0]
 8001b4c:	f7ff ff36 	bl	80019bc <RCM_ExecRegularConv>
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <RCM_ExecUserConv+0x50>)
 8001b52:	0001      	movs	r1, r0
 8001b54:	8018      	strh	r0, [r3, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8001b56:	7828      	ldrb	r0, [r5, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <RCM_ExecUserConv+0x54>)
 8001b5a:	0043      	lsls	r3, r0, #1
 8001b5c:	181b      	adds	r3, r3, r0
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	18d3      	adds	r3, r2, r3
 8001b62:	785b      	ldrb	r3, [r3, #1]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <RCM_ExecUserConv+0x30>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <RCM_ExecUserConv+0x58>)
 8001b6e:	00c2      	lsls	r2, r0, #3
 8001b70:	58d5      	ldr	r5, [r2, r3]
 8001b72:	2d00      	cmp	r5, #0
 8001b74:	d0e7      	beq.n	8001b46 <RCM_ExecUserConv+0xa>
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001b76:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001b78:	189b      	adds	r3, r3, r2
 8001b7a:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001b7c:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001b7e:	47a8      	blx	r5
}
 8001b80:	e7e1      	b.n	8001b46 <RCM_ExecUserConv+0xa>
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	200009e1 	.word	0x200009e1
 8001b88:	200009e0 	.word	0x200009e0
 8001b8c:	200009e2 	.word	0x200009e2
 8001b90:	200009c8 	.word	0x200009c8
 8001b94:	200009a8 	.word	0x200009a8

08001b98 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
 8001b98:	b570      	push	{r4, r5, r6, lr}
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8001b9a:	4819      	ldr	r0, [pc, #100]	; (8001c00 <RCM_ExecNextConv+0x68>)
 8001b9c:	4919      	ldr	r1, [pc, #100]	; (8001c04 <RCM_ExecNextConv+0x6c>)
 8001b9e:	7802      	ldrb	r2, [r0, #0]
 8001ba0:	0053      	lsls	r3, r2, #1
 8001ba2:	189b      	adds	r3, r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	5c5b      	ldrb	r3, [r3, r1]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d028      	beq.n	8001bfe <RCM_ExecNextConv+0x66>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001bac:	2604      	movs	r6, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001bae:	2403      	movs	r4, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <RCM_ExecNextConv+0x70>)
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	58d2      	ldr	r2, [r2, r3]
 8001bb6:	6812      	ldr	r2, [r2, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001bb8:	6016      	str	r6, [r2, #0]
    /* Disabling ADC DMA request  */
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8001bba:	7805      	ldrb	r5, [r0, #0]
 8001bbc:	00aa      	lsls	r2, r5, #2
 8001bbe:	58d2      	ldr	r2, [r2, r3]
 8001bc0:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001bc2:	68d8      	ldr	r0, [r3, #12]
 8001bc4:	43a0      	bics	r0, r4
 8001bc6:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001bc8:	68d8      	ldr	r0, [r3, #12]
 8001bca:	4c10      	ldr	r4, [pc, #64]	; (8001c0c <RCM_ExecNextConv+0x74>)
 8001bcc:	4020      	ands	r0, r4
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001bce:	2407      	movs	r4, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001bd0:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001bd2:	6958      	ldr	r0, [r3, #20]
 8001bd4:	43a0      	bics	r0, r4
 8001bd6:	6894      	ldr	r4, [r2, #8]
 8001bd8:	4320      	orrs	r0, r4
    /* Disabling External Trigger of ADC */
    LL_ADC_REG_SetTriggerSource (RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel of ADC for Regular Conversion */
    LL_ADC_SetSamplingTimeCommonChannels (RCM_handle_array[RCM_currentHandle]->regADC,  RCM_handle_array[RCM_currentHandle]->samplingTime );
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[RCM_currentHandle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel) );
 8001bda:	2401      	movs	r4, #1
 8001bdc:	6158      	str	r0, [r3, #20]
 8001bde:	0020      	movs	r0, r4
 8001be0:	7912      	ldrb	r2, [r2, #4]
 8001be2:	4090      	lsls	r0, r2
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001be4:	0340      	lsls	r0, r0, #13
 8001be6:	0b40      	lsrs	r0, r0, #13
 8001be8:	6298      	str	r0, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4808      	ldr	r0, [pc, #32]	; (8001c10 <RCM_ExecNextConv+0x78>)
 8001bee:	4002      	ands	r2, r0
 8001bf0:	4332      	orrs	r2, r6
 8001bf2:	609a      	str	r2, [r3, #8]
    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8001bf4:	006b      	lsls	r3, r5, #1
 8001bf6:	195b      	adds	r3, r3, r5
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	18c9      	adds	r1, r1, r3
 8001bfc:	704c      	strb	r4, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8001bfe:	bd70      	pop	{r4, r5, r6, pc}
 8001c00:	200009e4 	.word	0x200009e4
 8001c04:	200009c8 	.word	0x200009c8
 8001c08:	200009e8 	.word	0x200009e8
 8001c0c:	fffff23f 	.word	0xfffff23f
 8001c10:	7fffffe8 	.word	0x7fffffe8

08001c14 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001c16:	4c10      	ldr	r4, [pc, #64]	; (8001c58 <RCM_ReadOngoingConv+0x44>)
 8001c18:	4910      	ldr	r1, [pc, #64]	; (8001c5c <RCM_ReadOngoingConv+0x48>)
 8001c1a:	7820      	ldrb	r0, [r4, #0]
 8001c1c:	0043      	lsls	r3, r0, #1
 8001c1e:	181a      	adds	r2, r3, r0
 8001c20:	0052      	lsls	r2, r2, #1
 8001c22:	188a      	adds	r2, r1, r2
 8001c24:	7855      	ldrb	r5, [r2, #1]
 8001c26:	2d01      	cmp	r5, #1
 8001c28:	d005      	beq.n	8001c36 <RCM_ReadOngoingConv+0x22>
    /* Restore back DMA configuration. */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8001c2a:	181b      	adds	r3, r3, r0
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	18cb      	adds	r3, r1, r3
 8001c30:	795b      	ldrb	r3, [r3, #5]
 8001c32:	7023      	strb	r3, [r4, #0]
}
 8001c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8001c36:	4e0a      	ldr	r6, [pc, #40]	; (8001c60 <RCM_ReadOngoingConv+0x4c>)
 8001c38:	0087      	lsls	r7, r0, #2
 8001c3a:	59be      	ldr	r6, [r7, r6]
 8001c3c:	6836      	ldr	r6, [r6, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001c3e:	6837      	ldr	r7, [r6, #0]
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001c40:	077f      	lsls	r7, r7, #29
 8001c42:	d5f2      	bpl.n	8001c2a <RCM_ReadOngoingConv+0x16>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001c44:	6c37      	ldr	r7, [r6, #64]	; 0x40
    RCM_NoInj_array [RCM_currentHandle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );
 8001c46:	8057      	strh	r7, [r2, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8001c48:	2702      	movs	r7, #2
 8001c4a:	7057      	strb	r7, [r2, #1]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001c4c:	68f2      	ldr	r2, [r6, #12]
 8001c4e:	3701      	adds	r7, #1
 8001c50:	43ba      	bics	r2, r7
 8001c52:	4315      	orrs	r5, r2
 8001c54:	60f5      	str	r5, [r6, #12]
}
 8001c56:	e7e8      	b.n	8001c2a <RCM_ReadOngoingConv+0x16>
 8001c58:	200009e4 	.word	0x200009e4
 8001c5c:	200009c8 	.word	0x200009c8
 8001c60:	200009e8 	.word	0x200009e8

08001c64 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c64:	2201      	movs	r2, #1
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_MspInit+0x2c>)
{
 8001c68:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	6999      	ldr	r1, [r3, #24]
 8001c6c:	4311      	orrs	r1, r2
 8001c6e:	6199      	str	r1, [r3, #24]
 8001c70:	6999      	ldr	r1, [r3, #24]
 8001c72:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	9200      	str	r2, [sp, #0]
 8001c78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	0549      	lsls	r1, r1, #21
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	400b      	ands	r3, r1
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	b002      	add	sp, #8
 8001c8c:	4770      	bx	lr
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	0004      	movs	r4, r0
 8001c98:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	2214      	movs	r2, #20
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	a804      	add	r0, sp, #16
 8001ca0:	f004 fd03 	bl	80066aa <memset>
  if(hadc->Instance==ADC1)
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_ADC_MspInit+0xb4>)
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cac:	b00a      	add	sp, #40	; 0x28
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb0:	2080      	movs	r0, #128	; 0x80
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_ADC_MspInit+0xb8>)
 8001cb4:	0080      	lsls	r0, r0, #2
 8001cb6:	6999      	ldr	r1, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cba:	4301      	orrs	r1, r0
 8001cbc:	6199      	str	r1, [r3, #24]
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc4:	9201      	str	r2, [sp, #4]
 8001cc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	6959      	ldr	r1, [r3, #20]
 8001cca:	0280      	lsls	r0, r0, #10
 8001ccc:	4301      	orrs	r1, r0
 8001cce:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	4002      	ands	r2, r0
 8001cd8:	9202      	str	r2, [sp, #8]
 8001cda:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cdc:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	615a      	str	r2, [r3, #20]
 8001ce4:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001ce6:	2238      	movs	r2, #56	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	400b      	ands	r3, r1
 8001cea:	9303      	str	r3, [sp, #12]
 8001cec:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001cee:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	a904      	add	r1, sp, #16
 8001cf2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001cf4:	9204      	str	r2, [sp, #16]
 8001cf6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f001 f890 	bl	8002e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001d00:	4813      	ldr	r0, [pc, #76]	; (8001d50 <HAL_ADC_MspInit+0xbc>)
 8001d02:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001d04:	9204      	str	r2, [sp, #16]
 8001d06:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f001 f887 	bl	8002e1c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8001d0e:	4d11      	ldr	r5, [pc, #68]	; (8001d54 <HAL_ADC_MspInit+0xc0>)
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001d12:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8001d14:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d1a:	3380      	adds	r3, #128	; 0x80
 8001d1c:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001d24:	2320      	movs	r3, #32
 8001d26:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d2c:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2e:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001d30:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001d32:	f001 f83f 	bl	8002db4 <HAL_DMA_Init>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001d3a:	6325      	str	r5, [r4, #48]	; 0x30
 8001d3c:	626c      	str	r4, [r5, #36]	; 0x24
}
 8001d3e:	e7b5      	b.n	8001cac <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001d40:	f7fe fd94 	bl	800086c <Error_Handler>
 8001d44:	e7f9      	b.n	8001d3a <HAL_ADC_MspInit+0xa6>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40012400 	.word	0x40012400
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	48000400 	.word	0x48000400
 8001d54:	20000740 	.word	0x20000740
 8001d58:	40020008 	.word	0x40020008

08001d5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	0004      	movs	r4, r0
 8001d60:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	2214      	movs	r2, #20
 8001d64:	2100      	movs	r1, #0
 8001d66:	a802      	add	r0, sp, #8
 8001d68:	f004 fc9f 	bl	80066aa <memset>
  if(htim_pwm->Instance==TIM1)
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d74:	b008      	add	sp, #32
 8001d76:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d78:	2080      	movs	r0, #128	; 0x80
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_TIM_PWM_MspInit+0x60>)
 8001d7c:	0100      	lsls	r0, r0, #4
 8001d7e:	6999      	ldr	r1, [r3, #24]
 8001d80:	4301      	orrs	r1, r0
 8001d82:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d86:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8a:	4002      	ands	r2, r0
 8001d8c:	9200      	str	r2, [sp, #0]
 8001d8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <HAL_TIM_PWM_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	430a      	orrs	r2, r1
 8001d96:	615a      	str	r2, [r3, #20]
 8001d98:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001d9a:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001da2:	2302      	movs	r3, #2
 8001da4:	0152      	lsls	r2, r2, #5
 8001da6:	9202      	str	r2, [sp, #8]
 8001da8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001daa:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001dac:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001db0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f001 f833 	bl	8002e1c <HAL_GPIO_Init>
}
 8001db6:	e7dd      	b.n	8001d74 <HAL_TIM_PWM_MspInit+0x18>
 8001db8:	40012c00 	.word	0x40012c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	0004      	movs	r4, r0
 8001dc8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dca:	2214      	movs	r2, #20
 8001dcc:	2100      	movs	r1, #0
 8001dce:	a802      	add	r0, sp, #8
 8001dd0:	f004 fc6b 	bl	80066aa <memset>
  if(htim_base->Instance==TIM2)
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	6822      	ldr	r2, [r4, #0]
 8001dd8:	05db      	lsls	r3, r3, #23
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_TIM_Base_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dde:	b008      	add	sp, #32
 8001de0:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de2:	2201      	movs	r2, #1
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_TIM_Base_MspInit+0x60>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de8:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dec:	4311      	orrs	r1, r2
 8001dee:	61d9      	str	r1, [r3, #28]
 8001df0:	69d9      	ldr	r1, [r3, #28]
 8001df2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df6:	9200      	str	r2, [sp, #0]
 8001df8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	0289      	lsls	r1, r1, #10
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	615a      	str	r2, [r3, #20]
 8001e02:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8001e04:	2207      	movs	r2, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	400b      	ands	r3, r1
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	9202      	str	r2, [sp, #8]
 8001e10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e12:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e16:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f000 fffe 	bl	8002e1c <HAL_GPIO_Init>
}
 8001e20:	e7dd      	b.n	8001dde <HAL_TIM_Base_MspInit+0x1a>
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e28:	b5d0      	push	{r4, r6, r7, lr}
 8001e2a:	0004      	movs	r4, r0
 8001e2c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	2214      	movs	r2, #20
 8001e30:	2100      	movs	r1, #0
 8001e32:	a802      	add	r0, sp, #8
 8001e34:	f004 fc39 	bl	80066aa <memset>
  if(htim->Instance==TIM1)
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_TIM_MspPostInit+0x7c>)
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e40:	b008      	add	sp, #32
 8001e42:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e44:	2080      	movs	r0, #128	; 0x80
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_TIM_MspPostInit+0x80>)
 8001e48:	02c0      	lsls	r0, r0, #11
 8001e4a:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001e4c:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	4002      	ands	r2, r0
 8001e5a:	9200      	str	r2, [sp, #0]
 8001e5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001e60:	2703      	movs	r7, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	430a      	orrs	r2, r1
 8001e64:	615a      	str	r2, [r3, #20]
 8001e66:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001e68:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e6e:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001e72:	2302      	movs	r3, #2
 8001e74:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	a902      	add	r1, sp, #8
 8001e78:	480c      	ldr	r0, [pc, #48]	; (8001eac <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001e7a:	9202      	str	r2, [sp, #8]
 8001e7c:	9303      	str	r3, [sp, #12]
 8001e7e:	9604      	str	r6, [sp, #16]
 8001e80:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e82:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f000 ffca 	bl	8002e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001e88:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	a902      	add	r1, sp, #8
 8001e92:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001e94:	9202      	str	r2, [sp, #8]
 8001e96:	9303      	str	r3, [sp, #12]
 8001e98:	9604      	str	r6, [sp, #16]
 8001e9a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e9c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f000 ffbd 	bl	8002e1c <HAL_GPIO_Init>
}
 8001ea2:	e7cd      	b.n	8001e40 <HAL_TIM_MspPostInit+0x18>
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000400 	.word	0x48000400

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b510      	push	{r4, lr}
 8001eb2:	0004      	movs	r4, r0
 8001eb4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb6:	2214      	movs	r2, #20
 8001eb8:	2100      	movs	r1, #0
 8001eba:	a802      	add	r0, sp, #8
 8001ebc:	f004 fbf5 	bl	80066aa <memset>
  if(huart->Instance==USART1)
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_UART_MspInit+0x54>)
 8001ec2:	6822      	ldr	r2, [r4, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ec8:	b008      	add	sp, #32
 8001eca:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ecc:	2080      	movs	r0, #128	; 0x80
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_UART_MspInit+0x58>)
 8001ed0:	01c0      	lsls	r0, r0, #7
 8001ed2:	6999      	ldr	r1, [r3, #24]
 8001ed4:	4301      	orrs	r1, r0
 8001ed6:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eda:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ede:	4002      	ands	r2, r0
 8001ee0:	9200      	str	r2, [sp, #0]
 8001ee2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee4:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	4809      	ldr	r0, [pc, #36]	; (8001f0c <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001eee:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001ef6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001efa:	9202      	str	r2, [sp, #8]
 8001efc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f000 ff8d 	bl	8002e1c <HAL_GPIO_Init>
}
 8001f02:	e7e1      	b.n	8001ec8 <HAL_UART_MspInit+0x18>
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000400 	.word	0x48000400

08001f10 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8001f10:	2207      	movs	r2, #7
{
 8001f12:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <DMA1_Channel1_IRQHandler+0x10>)
 8001f16:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8001f18:	f7ff f8f6 	bl	8001108 <TSK_HighFrequencyTask>
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8001f1c:	bd10      	pop	{r4, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	40020000 	.word	0x40020000

08001f24 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001f24:	2201      	movs	r2, #1
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8001f26:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_UPDATE(PWM_Handle_M1.pParams_str->TIMx))
 8001f28:	4c0f      	ldr	r4, [pc, #60]	; (8001f68 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8001f2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6919      	ldr	r1, [r3, #16]
 8001f30:	420a      	tst	r2, r1
 8001f32:	d002      	beq.n	8001f3a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x16>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8001f34:	68d9      	ldr	r1, [r3, #12]
 8001f36:	420a      	tst	r2, r1
 8001f38:	d10d      	bne.n	8001f56 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	420a      	tst	r2, r1
 8001f40:	d008      	beq.n	8001f54 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8001f42:	68d9      	ldr	r1, [r3, #12]
 8001f44:	420a      	tst	r2, r1
 8001f46:	d005      	beq.n	8001f54 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001f48:	3a02      	subs	r2, #2
 8001f4a:	3aff      	subs	r2, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    F0XX_BRK_IRQHandler(&PWM_Handle_M1);
 8001f4c:	0020      	movs	r0, r4
 8001f4e:	611a      	str	r2, [r3, #16]
 8001f50:	f003 fd0e 	bl	8005970 <F0XX_BRK_IRQHandler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8001f54:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f56:	3a03      	subs	r2, #3
 8001f58:	611a      	str	r2, [r3, #16]
    R3_1_TIMx_UP_IRQHandler( &PWM_Handle_M1 );
 8001f5a:	0020      	movs	r0, r4
 8001f5c:	f003 fcca 	bl	80058f4 <R3_1_TIMx_UP_IRQHandler>
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8001f60:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	e7e9      	b.n	8001f3a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x16>
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	20000314 	.word	0x20000314

08001f6c <DMA1_Channel4_5_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <DMA1_Channel4_5_IRQHandler+0x10>)
 8001f70:	0192      	lsls	r2, r2, #6
 8001f72:	6819      	ldr	r1, [r3, #0]
{
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */

  if (LL_DMA_IsActiveFlag_TC4(DMA1))
 8001f74:	4211      	tst	r1, r2
 8001f76:	d000      	beq.n	8001f7a <DMA1_Channel4_5_IRQHandler+0xe>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8001f78:	605a      	str	r2, [r3, #4]
    /* USER CODE END DMAx_R1_M1_TC4 */
  }
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8001f7a:	4770      	bx	lr
 8001f7c:	40020000 	.word	0x40020000

08001f80 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8001f80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx) != 0)
 8001f82:	4c0b      	ldr	r4, [pc, #44]	; (8001fb0 <TIM2_IRQHandler+0x30>)
 8001f84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	07d2      	lsls	r2, r2, #31
 8001f8a:	d409      	bmi.n	8001fa0 <TIM2_IRQHandler+0x20>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	0792      	lsls	r2, r2, #30
 8001f90:	d505      	bpl.n	8001f9e <TIM2_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001f92:	2203      	movs	r2, #3
 8001f94:	4252      	negs	r2, r2
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
  {
    LL_TIM_ClearFlag_CC1(HALL_M1.TIMx);
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8001f96:	0020      	movs	r0, r4
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	f002 fc87 	bl	80048ac <HALL_TIMx_CC_IRQHandler>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8001f9e:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4252      	negs	r2, r2
 8001fa4:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8001fa6:	0020      	movs	r0, r4
 8001fa8:	f002 fe0a 	bl	8004bc0 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8001fac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fae:	e7ed      	b.n	8001f8c <TIM2_IRQHandler+0xc>
 8001fb0:	200000b4 	.word	0x200000b4

08001fb4 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8001fb4:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001fb6:	2590      	movs	r5, #144	; 0x90
 8001fb8:	4c18      	ldr	r4, [pc, #96]	; (800201c <USART1_IRQHandler+0x68>)
 8001fba:	006d      	lsls	r5, r5, #1
 8001fbc:	5963      	ldr	r3, [r4, r5]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	0692      	lsls	r2, r2, #26
 8001fc2:	d50b      	bpl.n	8001fdc <USART1_IRQHandler+0x28>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8001fc4:	21ff      	movs	r1, #255	; 0xff
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001fc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fc8:	0020      	movs	r0, r4
 8001fca:	4019      	ands	r1, r3
 8001fcc:	f003 ffda 	bl	8005f84 <UFCP_RX_IRQ_Handler>
 8001fd0:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d01d      	beq.n	8002012 <USART1_IRQHandler+0x5e>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d017      	beq.n	800200a <USART1_IRQHandler+0x56>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001fda:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	0612      	lsls	r2, r2, #24
 8001fe0:	d505      	bpl.n	8001fee <USART1_IRQHandler+0x3a>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8001fe2:	0020      	movs	r0, r4
 8001fe4:	f003 ff1e 	bl	8005e24 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001fe8:	2390      	movs	r3, #144	; 0x90
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	58e3      	ldr	r3, [r4, r3]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001fee:	2508      	movs	r5, #8
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	421d      	tst	r5, r3
 8001ff4:	d008      	beq.n	8002008 <USART1_IRQHandler+0x54>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	f004 f82c 	bl	8006054 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001ffc:	2390      	movs	r3, #144	; 0x90
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	58e3      	ldr	r3, [r4, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002002:	621d      	str	r5, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8002004:	f000 f8c6 	bl	8002194 <UI_SerialCommunicationTimeOutStop>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002008:	bd70      	pop	{r4, r5, r6, pc}
      UI_SerialCommunicationTimeOutStop();
 800200a:	f000 f8c3 	bl	8002194 <UI_SerialCommunicationTimeOutStop>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800200e:	5963      	ldr	r3, [r4, r5]
 8002010:	e7e4      	b.n	8001fdc <USART1_IRQHandler+0x28>
      UI_SerialCommunicationTimeOutStart();
 8002012:	f000 f8c5 	bl	80021a0 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002016:	5963      	ldr	r3, [r4, r5]
 8002018:	e7e0      	b.n	8001fdc <USART1_IRQHandler+0x28>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	20000594 	.word	0x20000594

08002020 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002022:	2590      	movs	r5, #144	; 0x90
  TSK_HardwareFaultTask();
 8002024:	f7ff f97e 	bl	8001324 <TSK_HardwareFaultTask>
 8002028:	4c17      	ldr	r4, [pc, #92]	; (8002088 <HardFault_Handler+0x68>)
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800202a:	006d      	lsls	r5, r5, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800202c:	2608      	movs	r6, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800202e:	2780      	movs	r7, #128	; 0x80
 8002030:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	4216      	tst	r6, r2
 8002036:	d007      	beq.n	8002048 <HardFault_Handler+0x28>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002038:	0020      	movs	r0, r4
 800203a:	f004 f80b 	bl	8006054 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800203e:	5963      	ldr	r3, [r4, r5]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002040:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8002042:	f000 f8a7 	bl	8002194 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002046:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	4217      	tst	r7, r2
 800204c:	d014      	beq.n	8002078 <HardFault_Handler+0x58>
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 800204e:	0020      	movs	r0, r4
 8002050:	f003 fee8 	bl	8005e24 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002054:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	0692      	lsls	r2, r2, #26
 800205a:	d5ea      	bpl.n	8002032 <HardFault_Handler+0x12>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800205c:	21ff      	movs	r1, #255	; 0xff
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800205e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002060:	0020      	movs	r0, r4
 8002062:	4019      	ands	r1, r3
 8002064:	f003 ff8e 	bl	8005f84 <UFCP_RX_IRQ_Handler>
 8002068:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 800206a:	2b01      	cmp	r3, #1
 800206c:	d008      	beq.n	8002080 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 800206e:	2b02      	cmp	r3, #2
 8002070:	d1dd      	bne.n	800202e <HardFault_Handler+0xe>
        {
          UI_SerialCommunicationTimeOutStop();
 8002072:	f000 f88f 	bl	8002194 <UI_SerialCommunicationTimeOutStop>
 8002076:	e7d9      	b.n	800202c <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	0692      	lsls	r2, r2, #26
 800207c:	d5d9      	bpl.n	8002032 <HardFault_Handler+0x12>
 800207e:	e7ed      	b.n	800205c <HardFault_Handler+0x3c>
          UI_SerialCommunicationTimeOutStart();
 8002080:	f000 f88e 	bl	80021a0 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002084:	e7d3      	b.n	800202e <HardFault_Handler+0xe>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	20000594 	.word	0x20000594

0800208c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 800208c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800208e:	4c08      	ldr	r4, [pc, #32]	; (80020b0 <SysTick_Handler+0x24>)
 8002090:	7823      	ldrb	r3, [r4, #0]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d005      	beq.n	80020a2 <SysTick_Handler+0x16>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002096:	3301      	adds	r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 800209c:	f7ff f932 	bl	8001304 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80020a0:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80020a2:	f000 fcdb 	bl	8002a5c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80020a6:	f000 fe81 	bl	8002dac <HAL_SYSTICK_IRQHandler>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e7f5      	b.n	800209a <SysTick_Handler+0xe>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	200006d4 	.word	0x200006d4

080020b4 <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 80020b4:	2201      	movs	r2, #1
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <EXTI0_1_IRQHandler+0x18>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler (void)
{
 80020b8:	b510      	push	{r4, lr}
 80020ba:	6959      	ldr	r1, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0) )
 80020bc:	420a      	tst	r2, r1
 80020be:	d100      	bne.n	80020c2 <EXTI0_1_IRQHandler+0xe>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_0);
    UI_HandleStartStopButton_cb ();
  }

}
 80020c0:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80020c2:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 80020c4:	f000 f872 	bl	80021ac <UI_HandleStartStopButton_cb>
}
 80020c8:	e7fa      	b.n	80020c0 <EXTI0_1_IRQHandler+0xc>
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	40010400 	.word	0x40010400

080020d0 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	4646      	mov	r6, r8
 80020d4:	4698      	mov	r8, r3

    pMCP = &MCP_UI_Params;
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <UI_TaskInit+0x68>)
{
 80020d8:	46d6      	mov	lr, sl
 80020da:	464f      	mov	r7, r9
    pMCP = &MCP_UI_Params;
 80020dc:	469a      	mov	sl, r3
{
 80020de:	b5c0      	push	{r6, r7, lr}
 80020e0:	0017      	movs	r7, r2
    pMCP = &MCP_UI_Params;
 80020e2:	4652      	mov	r2, sl
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <UI_TaskInit+0x6c>)
    pMCP->_Super = UI_Params;
 80020e6:	4c16      	ldr	r4, [pc, #88]	; (8002140 <UI_TaskInit+0x70>)
    pMCP = &MCP_UI_Params;
 80020e8:	6013      	str	r3, [r2, #0]
{
 80020ea:	000e      	movs	r6, r1
 80020ec:	4681      	mov	r9, r0
    pMCP->_Super = UI_Params;
 80020ee:	cc07      	ldmia	r4!, {r0, r1, r2}
 80020f0:	c307      	stmia	r3!, {r0, r1, r2}
 80020f2:	001d      	movs	r5, r3
 80020f4:	cc0e      	ldmia	r4!, {r1, r2, r3}
 80020f6:	c50e      	stmia	r5!, {r1, r2, r3}

    UFCP_Init( & pUSART );
 80020f8:	4c12      	ldr	r4, [pc, #72]	; (8002144 <UI_TaskInit+0x74>)
{
 80020fa:	b082      	sub	sp, #8
    UFCP_Init( & pUSART );
 80020fc:	0020      	movs	r0, r4
 80020fe:	f003 fe8d 	bl	8005e1c <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002102:	4650      	mov	r0, sl
 8002104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002106:	0021      	movs	r1, r4
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <UI_TaskInit+0x78>)
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <UI_TaskInit+0x7c>)
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	6800      	ldr	r0, [r0, #0]
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <UI_TaskInit+0x80>)
 8002114:	f7ff fb6c 	bl	80017f0 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002118:	4653      	mov	r3, sl
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	464b      	mov	r3, r9
 800211e:	003a      	movs	r2, r7
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	0031      	movs	r1, r6
 8002124:	4643      	mov	r3, r8
 8002126:	f000 f84d 	bl	80021c4 <UI_Init>

}
 800212a:	b002      	add	sp, #8
 800212c:	bce0      	pop	{r5, r6, r7}
 800212e:	46ba      	mov	sl, r7
 8002130:	46b1      	mov	r9, r6
 8002132:	46a8      	mov	r8, r5
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	20000aac 	.word	0x20000aac
 800213c:	200009f8 	.word	0x200009f8
 8002140:	200008ac 	.word	0x200008ac
 8002144:	20000594 	.word	0x20000594
 8002148:	0800606d 	.word	0x0800606d
 800214c:	08005ec1 	.word	0x08005ec1
 8002150:	08005e95 	.word	0x08005e95

08002154 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <UI_Scheduler+0x34>)
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	2a00      	cmp	r2, #0
 800215a:	d003      	beq.n	8002164 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	3a01      	subs	r2, #1
 8002160:	b292      	uxth	r2, r2
 8002162:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002164:	4a09      	ldr	r2, [pc, #36]	; (800218c <UI_Scheduler+0x38>)
 8002166:	8813      	ldrh	r3, [r2, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d903      	bls.n	8002174 <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 800216c:	8813      	ldrh	r3, [r2, #0]
 800216e:	3b01      	subs	r3, #1
 8002170:	b29b      	uxth	r3, r3
 8002172:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002174:	4a06      	ldr	r2, [pc, #24]	; (8002190 <UI_Scheduler+0x3c>)
 8002176:	8813      	ldrh	r3, [r2, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d903      	bls.n	8002184 <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 800217c:	8813      	ldrh	r3, [r2, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	b29b      	uxth	r3, r3
 8002182:	8013      	strh	r3, [r2, #0]
  }
}
 8002184:	4770      	bx	lr
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	20000aaa 	.word	0x20000aaa
 800218c:	20000aa8 	.word	0x20000aa8
 8002190:	200006d6 	.word	0x200006d6

08002194 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002194:	2200      	movs	r2, #0
 8002196:	4b01      	ldr	r3, [pc, #4]	; (800219c <UI_SerialCommunicationTimeOutStop+0x8>)
 8002198:	801a      	strh	r2, [r3, #0]
}
 800219a:	4770      	bx	lr
 800219c:	20000aa8 	.word	0x20000aa8

080021a0 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80021a0:	224f      	movs	r2, #79	; 0x4f
 80021a2:	4b01      	ldr	r3, [pc, #4]	; (80021a8 <UI_SerialCommunicationTimeOutStart+0x8>)
 80021a4:	801a      	strh	r2, [r3, #0]
}
 80021a6:	4770      	bx	lr
 80021a8:	20000aa8 	.word	0x20000aa8

080021ac <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80021ac:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 80021ae:	f7fe fb6f 	bl	8000890 <MC_GetSTMStateMotor1>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d102      	bne.n	80021bc <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    MC_StartMotor1();
 80021b6:	f7fe fb5b 	bl	8000870 <MC_StartMotor1>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80021ba:	bd10      	pop	{r4, pc}
    MC_StopMotor1();
 80021bc:	f7fe fb60 	bl	8000880 <MC_StopMotor1>
}
 80021c0:	e7fb      	b.n	80021ba <UI_HandleStartStopButton_cb+0xe>
 80021c2:	46c0      	nop			; (mov r8, r8)

080021c4 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 80021c4:	60c3      	str	r3, [r0, #12]
  pHandle->bSelectedDrive = 0u;
 80021c6:	2300      	movs	r3, #0
 80021c8:	7503      	strb	r3, [r0, #20]
  pHandle->pUICfg = pUICfg;
 80021ca:	9b00      	ldr	r3, [sp, #0]
  pHandle->bDriveNum = bMCNum;
 80021cc:	7101      	strb	r1, [r0, #4]
  pHandle->pMCI = pMCI;
 80021ce:	6082      	str	r2, [r0, #8]
  pHandle->pUICfg = pUICfg;
 80021d0:	6103      	str	r3, [r0, #16]
}
 80021d2:	4770      	bx	lr

080021d4 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80021d4:	7902      	ldrb	r2, [r0, #4]
{
 80021d6:	0003      	movs	r3, r0
  {
    retVal = false;
 80021d8:	2000      	movs	r0, #0
  if (bSelectMC  >= pHandle->bDriveNum)
 80021da:	428a      	cmp	r2, r1
 80021dc:	d901      	bls.n	80021e2 <UI_SelectMC+0xe>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80021de:	7519      	strb	r1, [r3, #20]
  bool retVal = true;
 80021e0:	3001      	adds	r0, #1
  }
  return retVal;
}
 80021e2:	4770      	bx	lr

080021e4 <UI_GetSelectedMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
 80021e4:	7d00      	ldrb	r0, [r0, #20]
}
 80021e6:	4770      	bx	lr

080021e8 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80021e8:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80021ea:	7d03      	ldrb	r3, [r0, #20]
{
 80021ec:	0014      	movs	r4, r2
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80021ee:	6882      	ldr	r2, [r0, #8]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	58d5      	ldr	r5, [r2, r3]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80021f4:	68c2      	ldr	r2, [r0, #12]
{
 80021f6:	b082      	sub	sp, #8
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80021f8:	58d6      	ldr	r6, [r2, r3]

  bool retVal = true;
  switch (bRegID)
 80021fa:	295b      	cmp	r1, #91	; 0x5b
 80021fc:	d803      	bhi.n	8002206 <UI_SetReg+0x1e>
 80021fe:	4a89      	ldr	r2, [pc, #548]	; (8002424 <UI_SetReg+0x23c>)
 8002200:	0089      	lsls	r1, r1, #2
 8002202:	5852      	ldr	r2, [r2, r1]
 8002204:	4697      	mov	pc, r2
 8002206:	2400      	movs	r4, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002208:	0020      	movs	r0, r4
 800220a:	b002      	add	sp, #8
 800220c:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 800220e:	2106      	movs	r1, #6
 8002210:	0020      	movs	r0, r4
 8002212:	f7fe f803 	bl	800021c <__divsi3>
 8002216:	2200      	movs	r2, #0
 8002218:	b201      	sxth	r1, r0
 800221a:	0028      	movs	r0, r5
 800221c:	f7fe fb4a 	bl	80008b4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002220:	2401      	movs	r4, #1
    break;
 8002222:	e7f1      	b.n	8002208 <UI_SetReg+0x20>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002224:	0028      	movs	r0, r5
 8002226:	b221      	sxth	r1, r4
 8002228:	f7fe fc42 	bl	8000ab0 <MCI_SetIdref>
  bool retVal = true;
 800222c:	2401      	movs	r4, #1
    break;
 800222e:	e7eb      	b.n	8002208 <UI_SetReg+0x20>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002230:	6902      	ldr	r2, [r0, #16]
 8002232:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002234:	0f1a      	lsrs	r2, r3, #28
 8002236:	2a09      	cmp	r2, #9
 8002238:	d100      	bne.n	800223c <UI_SetReg+0x54>
 800223a:	e0cd      	b.n	80023d8 <UI_SetReg+0x1f0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	0f1b      	lsrs	r3, r3, #28
 8002240:	2b09      	cmp	r3, #9
 8002242:	d1f3      	bne.n	800222c <UI_SetReg+0x44>
        pSPD = pMCT->pSpeedSensorAux;
 8002244:	69f5      	ldr	r5, [r6, #28]
      if (pSPD != MC_NULL)
 8002246:	2d00      	cmp	r5, #0
 8002248:	d0f0      	beq.n	800222c <UI_SetReg+0x44>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800224a:	466b      	mov	r3, sp
 800224c:	ae01      	add	r6, sp, #4
 800224e:	1c99      	adds	r1, r3, #2
 8002250:	0032      	movs	r2, r6
 8002252:	0028      	movs	r0, r5
 8002254:	f004 f9c8 	bl	80065e8 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002258:	b221      	sxth	r1, r4
 800225a:	0028      	movs	r0, r5
 800225c:	2300      	movs	r3, #0
 800225e:	5ef2      	ldrsh	r2, [r6, r3]
 8002260:	f004 f9d0 	bl	8006604 <STO_SetPLLGains>
  bool retVal = true;
 8002264:	2401      	movs	r4, #1
 8002266:	e7cf      	b.n	8002208 <UI_SetReg+0x20>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002268:	6902      	ldr	r2, [r0, #16]
 800226a:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800226c:	0f1a      	lsrs	r2, r3, #28
 800226e:	2a09      	cmp	r2, #9
 8002270:	d100      	bne.n	8002274 <UI_SetReg+0x8c>
 8002272:	e0c5      	b.n	8002400 <UI_SetReg+0x218>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	0f1b      	lsrs	r3, r3, #28
 8002278:	2b09      	cmp	r3, #9
 800227a:	d1d7      	bne.n	800222c <UI_SetReg+0x44>
        pSPD = pMCT->pSpeedSensorAux;
 800227c:	69f5      	ldr	r5, [r6, #28]
      if (pSPD != MC_NULL)
 800227e:	2d00      	cmp	r5, #0
 8002280:	d0d4      	beq.n	800222c <UI_SetReg+0x44>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002282:	466b      	mov	r3, sp
 8002284:	1c9e      	adds	r6, r3, #2
 8002286:	0031      	movs	r1, r6
 8002288:	0028      	movs	r0, r5
 800228a:	aa01      	add	r2, sp, #4
 800228c:	f004 f9ac 	bl	80065e8 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002290:	b222      	sxth	r2, r4
 8002292:	0028      	movs	r0, r5
 8002294:	2300      	movs	r3, #0
 8002296:	5ef1      	ldrsh	r1, [r6, r3]
 8002298:	f004 f9b4 	bl	8006604 <STO_SetPLLGains>
  bool retVal = true;
 800229c:	2401      	movs	r4, #1
 800229e:	e7b3      	b.n	8002208 <UI_SetReg+0x20>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80022a0:	6902      	ldr	r2, [r0, #16]
 80022a2:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80022a4:	0f1a      	lsrs	r2, r3, #28
 80022a6:	2a09      	cmp	r2, #9
 80022a8:	d100      	bne.n	80022ac <UI_SetReg+0xc4>
 80022aa:	e0a2      	b.n	80023f2 <UI_SetReg+0x20a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	0f1b      	lsrs	r3, r3, #28
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d1bb      	bne.n	800222c <UI_SetReg+0x44>
        pSPD = pMCT->pSpeedSensorAux;
 80022b4:	69f5      	ldr	r5, [r6, #28]
      if (pSPD != MC_NULL)
 80022b6:	2d00      	cmp	r5, #0
 80022b8:	d0b8      	beq.n	800222c <UI_SetReg+0x44>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80022ba:	466b      	mov	r3, sp
 80022bc:	1c9e      	adds	r6, r3, #2
 80022be:	0031      	movs	r1, r6
 80022c0:	0028      	movs	r0, r5
 80022c2:	aa01      	add	r2, sp, #4
 80022c4:	f004 f984 	bl	80065d0 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 80022c8:	b222      	sxth	r2, r4
 80022ca:	0028      	movs	r0, r5
 80022cc:	2300      	movs	r3, #0
 80022ce:	5ef1      	ldrsh	r1, [r6, r3]
 80022d0:	f004 f986 	bl	80065e0 <STO_PLL_SetObserverGains>
  bool retVal = true;
 80022d4:	2401      	movs	r4, #1
 80022d6:	e797      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80022d8:	b221      	sxth	r1, r4
 80022da:	6870      	ldr	r0, [r6, #4]
 80022dc:	f002 fdd0 	bl	8004e80 <PID_SetKI>
  bool retVal = true;
 80022e0:	2401      	movs	r4, #1
    break;
 80022e2:	e791      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80022e4:	b221      	sxth	r1, r4
 80022e6:	6870      	ldr	r0, [r6, #4]
 80022e8:	f002 fdc8 	bl	8004e7c <PID_SetKP>
  bool retVal = true;
 80022ec:	2401      	movs	r4, #1
    break;
 80022ee:	e78b      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80022f0:	b221      	sxth	r1, r4
 80022f2:	68b0      	ldr	r0, [r6, #8]
 80022f4:	f002 fdc4 	bl	8004e80 <PID_SetKI>
  bool retVal = true;
 80022f8:	2401      	movs	r4, #1
    break;
 80022fa:	e785      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80022fc:	b221      	sxth	r1, r4
 80022fe:	68b0      	ldr	r0, [r6, #8]
 8002300:	f002 fdbc 	bl	8004e7c <PID_SetKP>
  bool retVal = true;
 8002304:	2401      	movs	r4, #1
    break;
 8002306:	e77f      	b.n	8002208 <UI_SetReg+0x20>
      currComp = MCI_GetIqdref(pMCI);
 8002308:	0028      	movs	r0, r5
 800230a:	f7fe fb9d 	bl	8000a48 <MCI_GetIqdref>
      currComp.d = (int16_t)wValue;
 800230e:	ab01      	add	r3, sp, #4
      currComp = MCI_GetIqdref(pMCI);
 8002310:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002312:	805c      	strh	r4, [r3, #2]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002314:	0028      	movs	r0, r5
 8002316:	9901      	ldr	r1, [sp, #4]
 8002318:	f7fe fadc 	bl	80008d4 <MCI_SetCurrentReferences>
  bool retVal = true;
 800231c:	2401      	movs	r4, #1
    break;
 800231e:	e773      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002320:	b221      	sxth	r1, r4
 8002322:	6870      	ldr	r0, [r6, #4]
 8002324:	f002 fdbc 	bl	8004ea0 <PID_SetKD>
  bool retVal = true;
 8002328:	2401      	movs	r4, #1
    break;
 800232a:	e76d      	b.n	8002208 <UI_SetReg+0x20>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800232c:	6902      	ldr	r2, [r0, #16]
 800232e:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002330:	0f1a      	lsrs	r2, r3, #28
 8002332:	2a09      	cmp	r2, #9
 8002334:	d057      	beq.n	80023e6 <UI_SetReg+0x1fe>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	0f1b      	lsrs	r3, r3, #28
 800233a:	2b09      	cmp	r3, #9
 800233c:	d000      	beq.n	8002340 <UI_SetReg+0x158>
 800233e:	e775      	b.n	800222c <UI_SetReg+0x44>
        pSPD = pMCT->pSpeedSensorAux;
 8002340:	69f5      	ldr	r5, [r6, #28]
      if (pSPD != MC_NULL)
 8002342:	2d00      	cmp	r5, #0
 8002344:	d100      	bne.n	8002348 <UI_SetReg+0x160>
 8002346:	e771      	b.n	800222c <UI_SetReg+0x44>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002348:	466b      	mov	r3, sp
 800234a:	ae01      	add	r6, sp, #4
 800234c:	1c99      	adds	r1, r3, #2
 800234e:	0032      	movs	r2, r6
 8002350:	0028      	movs	r0, r5
 8002352:	f004 f93d 	bl	80065d0 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002356:	b221      	sxth	r1, r4
 8002358:	0028      	movs	r0, r5
 800235a:	2300      	movs	r3, #0
 800235c:	5ef2      	ldrsh	r2, [r6, r3]
 800235e:	f004 f93f 	bl	80065e0 <STO_PLL_SetObserverGains>
  bool retVal = true;
 8002362:	2401      	movs	r4, #1
 8002364:	e750      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002366:	b221      	sxth	r1, r4
 8002368:	68b0      	ldr	r0, [r6, #8]
 800236a:	f002 fd99 	bl	8004ea0 <PID_SetKD>
  bool retVal = true;
 800236e:	2401      	movs	r4, #1
    break;
 8002370:	e74a      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002372:	b221      	sxth	r1, r4
 8002374:	6830      	ldr	r0, [r6, #0]
 8002376:	f002 fd83 	bl	8004e80 <PID_SetKI>
  bool retVal = true;
 800237a:	2401      	movs	r4, #1
    break;
 800237c:	e744      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 800237e:	b221      	sxth	r1, r4
 8002380:	6830      	ldr	r0, [r6, #0]
 8002382:	f002 fd7b 	bl	8004e7c <PID_SetKP>
  bool retVal = true;
 8002386:	2401      	movs	r4, #1
    break;
 8002388:	e73e      	b.n	8002208 <UI_SetReg+0x20>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800238a:	b2e1      	uxtb	r1, r4
 800238c:	2900      	cmp	r1, #0
 800238e:	d03e      	beq.n	800240e <UI_SetReg+0x226>
  bool retVal = true;
 8002390:	2401      	movs	r4, #1
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002392:	2901      	cmp	r1, #1
 8002394:	d000      	beq.n	8002398 <UI_SetReg+0x1b0>
 8002396:	e737      	b.n	8002208 <UI_SetReg+0x20>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002398:	0028      	movs	r0, r5
 800239a:	f7fe fb1f 	bl	80009dc <MCI_GetMecSpeedRefUnit>
 800239e:	2200      	movs	r2, #0
 80023a0:	0001      	movs	r1, r0
 80023a2:	0028      	movs	r0, r5
 80023a4:	f7fe fa86 	bl	80008b4 <MCI_ExecSpeedRamp>
 80023a8:	e72e      	b.n	8002208 <UI_SetReg+0x20>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 80023aa:	b2e1      	uxtb	r1, r4
 80023ac:	f7ff ff12 	bl	80021d4 <UI_SelectMC>
 80023b0:	0004      	movs	r4, r0
    break;
 80023b2:	e729      	b.n	8002208 <UI_SetReg+0x20>
      currComp = MCI_GetIqdref(pMCI);
 80023b4:	0028      	movs	r0, r5
 80023b6:	f7fe fb47 	bl	8000a48 <MCI_GetIqdref>
      currComp.q = (int16_t)wValue;
 80023ba:	ab01      	add	r3, sp, #4
      currComp = MCI_GetIqdref(pMCI);
 80023bc:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 80023be:	801c      	strh	r4, [r3, #0]
      MCI_SetCurrentReferences(pMCI,currComp);
 80023c0:	0028      	movs	r0, r5
 80023c2:	9901      	ldr	r1, [sp, #4]
 80023c4:	f7fe fa86 	bl	80008d4 <MCI_SetCurrentReferences>
  bool retVal = true;
 80023c8:	2401      	movs	r4, #1
    break;
 80023ca:	e71d      	b.n	8002208 <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80023cc:	b221      	sxth	r1, r4
 80023ce:	6830      	ldr	r0, [r6, #0]
 80023d0:	f002 fd66 	bl	8004ea0 <PID_SetKD>
  bool retVal = true;
 80023d4:	2401      	movs	r4, #1
    break;
 80023d6:	e717      	b.n	8002208 <UI_SetReg+0x20>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023d8:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 80023da:	69b5      	ldr	r5, [r6, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023dc:	0f1b      	lsrs	r3, r3, #28
 80023de:	2b09      	cmp	r3, #9
 80023e0:	d000      	beq.n	80023e4 <UI_SetReg+0x1fc>
 80023e2:	e730      	b.n	8002246 <UI_SetReg+0x5e>
 80023e4:	e72e      	b.n	8002244 <UI_SetReg+0x5c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023e6:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 80023e8:	69b5      	ldr	r5, [r6, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023ea:	0f1b      	lsrs	r3, r3, #28
 80023ec:	2b09      	cmp	r3, #9
 80023ee:	d1a8      	bne.n	8002342 <UI_SetReg+0x15a>
 80023f0:	e7a6      	b.n	8002340 <UI_SetReg+0x158>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023f2:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 80023f4:	69b5      	ldr	r5, [r6, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023f6:	0f1b      	lsrs	r3, r3, #28
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	d000      	beq.n	80023fe <UI_SetReg+0x216>
 80023fc:	e75b      	b.n	80022b6 <UI_SetReg+0xce>
 80023fe:	e759      	b.n	80022b4 <UI_SetReg+0xcc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002400:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 8002402:	69b5      	ldr	r5, [r6, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002404:	0f1b      	lsrs	r3, r3, #28
 8002406:	2b09      	cmp	r3, #9
 8002408:	d000      	beq.n	800240c <UI_SetReg+0x224>
 800240a:	e738      	b.n	800227e <UI_SetReg+0x96>
 800240c:	e736      	b.n	800227c <UI_SetReg+0x94>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800240e:	0028      	movs	r0, r5
 8002410:	f7fe fb4a 	bl	8000aa8 <MCI_GetTeref>
 8002414:	2200      	movs	r2, #0
 8002416:	0001      	movs	r1, r0
 8002418:	0028      	movs	r0, r5
 800241a:	f7fe fa53 	bl	80008c4 <MCI_ExecTorqueRamp>
  bool retVal = true;
 800241e:	2401      	movs	r4, #1
 8002420:	e6f2      	b.n	8002208 <UI_SetReg+0x20>
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	08006e88 	.word	0x08006e88

08002428 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002428:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800242a:	7d03      	ldrb	r3, [r0, #20]
 800242c:	68c4      	ldr	r4, [r0, #12]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800242e:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	58e4      	ldr	r4, [r4, r3]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002434:	58ed      	ldr	r5, [r5, r3]
{
 8002436:	b090      	sub	sp, #64	; 0x40

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002438:	2a00      	cmp	r2, #0
 800243a:	d007      	beq.n	800244c <UI_GetReg+0x24>
  {
    *success = true;
 800243c:	2601      	movs	r6, #1
 800243e:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 8002440:	2981      	cmp	r1, #129	; 0x81
 8002442:	d809      	bhi.n	8002458 <UI_GetReg+0x30>
 8002444:	4ec5      	ldr	r6, [pc, #788]	; (800275c <UI_GetReg+0x334>)
 8002446:	0089      	lsls	r1, r1, #2
 8002448:	5871      	ldr	r1, [r6, r1]
 800244a:	468f      	mov	pc, r1
 800244c:	2973      	cmp	r1, #115	; 0x73
 800244e:	d805      	bhi.n	800245c <UI_GetReg+0x34>
 8002450:	4ac3      	ldr	r2, [pc, #780]	; (8002760 <UI_GetReg+0x338>)
 8002452:	0089      	lsls	r1, r1, #2
 8002454:	5852      	ldr	r2, [r2, r1]
 8002456:	4697      	mov	pc, r2

    default:
	{
      if ( success != (bool *) 0 )
      {
        *success = false;
 8002458:	2300      	movs	r3, #0
 800245a:	7013      	strb	r3, [r2, #0]
  int32_t bRetVal = 0;
 800245c:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 800245e:	b010      	add	sp, #64	; 0x40
 8002460:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002462:	0028      	movs	r0, r5
 8002464:	f7fe faf0 	bl	8000a48 <MCI_GetIqdref>
 8002468:	1400      	asrs	r0, r0, #16
    break;
 800246a:	e7f8      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = CTRBDID;
 800246c:	48bd      	ldr	r0, [pc, #756]	; (8002764 <UI_GetReg+0x33c>)
 800246e:	e7f6      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002470:	0028      	movs	r0, r5
 8002472:	f7fe fae9 	bl	8000a48 <MCI_GetIqdref>
 8002476:	b200      	sxth	r0, r0
    break;
 8002478:	e7f1      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetIqd(pMCI).q;
 800247a:	0028      	movs	r0, r5
 800247c:	f7fe fad4 	bl	8000a28 <MCI_GetIqd>
 8002480:	b200      	sxth	r0, r0
    break;
 8002482:	e7ec      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002484:	0028      	movs	r0, r5
 8002486:	f7fe facf 	bl	8000a28 <MCI_GetIqd>
 800248a:	1400      	asrs	r0, r0, #16
    break;
 800248c:	e7e7      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800248e:	0028      	movs	r0, r5
 8002490:	f7fe faa4 	bl	80009dc <MCI_GetMecSpeedRefUnit>
 8002494:	0043      	lsls	r3, r0, #1
 8002496:	1818      	adds	r0, r3, r0
 8002498:	0040      	lsls	r0, r0, #1
 800249a:	e7e0      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 800249c:	6860      	ldr	r0, [r4, #4]
 800249e:	f002 fcf5 	bl	8004e8c <PID_GetKI>
    break;
 80024a2:	e7dc      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80024a4:	6820      	ldr	r0, [r4, #0]
 80024a6:	f002 fcf7 	bl	8004e98 <PID_GetKPDivisor>
    break;
 80024aa:	e7d8      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80024ac:	6860      	ldr	r0, [r4, #4]
 80024ae:	f002 fcf9 	bl	8004ea4 <PID_GetKD>
    break;
 80024b2:	e7d4      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80024b4:	6902      	ldr	r2, [r0, #16]
 80024b6:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024b8:	0f1a      	lsrs	r2, r3, #28
 80024ba:	2a09      	cmp	r2, #9
 80024bc:	d100      	bne.n	80024c0 <UI_GetReg+0x98>
 80024be:	e190      	b.n	80027e2 <UI_GetReg+0x3ba>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	0f1b      	lsrs	r3, r3, #28
 80024c4:	2b09      	cmp	r3, #9
 80024c6:	d100      	bne.n	80024ca <UI_GetReg+0xa2>
 80024c8:	e190      	b.n	80027ec <UI_GetReg+0x3c4>
 80024ca:	ac0e      	add	r4, sp, #56	; 0x38
      bRetVal = (int32_t)hIgain;
 80024cc:	2300      	movs	r3, #0
 80024ce:	5ee0      	ldrsh	r0, [r4, r3]
    break;
 80024d0:	e7c5      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80024d2:	6902      	ldr	r2, [r0, #16]
 80024d4:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024d6:	0f1a      	lsrs	r2, r3, #28
 80024d8:	2a09      	cmp	r2, #9
 80024da:	d100      	bne.n	80024de <UI_GetReg+0xb6>
 80024dc:	e172      	b.n	80027c4 <UI_GetReg+0x39c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	0f1b      	lsrs	r3, r3, #28
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	d100      	bne.n	80024e8 <UI_GetReg+0xc0>
 80024e6:	e172      	b.n	80027ce <UI_GetReg+0x3a6>
 80024e8:	ac0f      	add	r4, sp, #60	; 0x3c
 80024ea:	e7ef      	b.n	80024cc <UI_GetReg+0xa4>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	f002 fcc9 	bl	8004e84 <PID_GetKP>
    break;
 80024f2:	e7b4      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80024f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80024f6:	f003 fc7f 	bl	8005df8 <STM_GetState>
	break;
 80024fa:	e7b0      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80024fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80024fe:	f003 fc87 	bl	8005e10 <STM_GetFaultState>
	break;
 8002502:	e7ac      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002504:	f7ff fe6e 	bl	80021e4 <UI_GetSelectedMC>
    break;
 8002508:	e7a9      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800250a:	68a0      	ldr	r0, [r4, #8]
 800250c:	f002 fcba 	bl	8004e84 <PID_GetKP>
    break;
 8002510:	e7a5      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002512:	6860      	ldr	r0, [r4, #4]
 8002514:	f002 fcb6 	bl	8004e84 <PID_GetKP>
    break;
 8002518:	e7a1      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 800251a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800251c:	f001 ffc0 	bl	80044a0 <VBS_GetAvBusVoltage_V>
    break;
 8002520:	e79d      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002522:	6902      	ldr	r2, [r0, #16]
 8002524:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002526:	0f1a      	lsrs	r2, r3, #28
 8002528:	2a09      	cmp	r2, #9
 800252a:	d100      	bne.n	800252e <UI_GetReg+0x106>
 800252c:	e17f      	b.n	800282e <UI_GetReg+0x406>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	0f1b      	lsrs	r3, r3, #28
 8002532:	2b09      	cmp	r3, #9
 8002534:	d1c9      	bne.n	80024ca <UI_GetReg+0xa2>
        pSPD = pMCT->pSpeedSensorAux;
 8002536:	69e0      	ldr	r0, [r4, #28]
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002538:	ac0e      	add	r4, sp, #56	; 0x38
      if (pSPD != MC_NULL)
 800253a:	2800      	cmp	r0, #0
 800253c:	d0c6      	beq.n	80024cc <UI_GetReg+0xa4>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800253e:	0021      	movs	r1, r4
 8002540:	aa0f      	add	r2, sp, #60	; 0x3c
 8002542:	f004 f851 	bl	80065e8 <STO_GetPLLGains>
      bRetVal = (int32_t)hPgain;
 8002546:	e7c1      	b.n	80024cc <UI_GetReg+0xa4>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002548:	6902      	ldr	r2, [r0, #16]
 800254a:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800254c:	0f1a      	lsrs	r2, r3, #28
 800254e:	2a09      	cmp	r2, #9
 8002550:	d100      	bne.n	8002554 <UI_GetReg+0x12c>
 8002552:	e173      	b.n	800283c <UI_GetReg+0x414>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	0f1b      	lsrs	r3, r3, #28
 8002558:	2b09      	cmp	r3, #9
 800255a:	d1c5      	bne.n	80024e8 <UI_GetReg+0xc0>
        pSPD = pMCT->pSpeedSensorAux;
 800255c:	69e0      	ldr	r0, [r4, #28]
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800255e:	ac0f      	add	r4, sp, #60	; 0x3c
      if (pSPD != MC_NULL)
 8002560:	2800      	cmp	r0, #0
 8002562:	d0b3      	beq.n	80024cc <UI_GetReg+0xa4>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002564:	0022      	movs	r2, r4
 8002566:	a90e      	add	r1, sp, #56	; 0x38
 8002568:	f004 f83e 	bl	80065e8 <STO_GetPLLGains>
 800256c:	e7ae      	b.n	80024cc <UI_GetReg+0xa4>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800256e:	0028      	movs	r0, r5
 8002570:	f7fe fa1c 	bl	80009ac <MCI_GetControlMode>
 8002574:	2801      	cmp	r0, #1
 8002576:	d18a      	bne.n	800248e <UI_GetReg+0x66>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002578:	0028      	movs	r0, r5
 800257a:	f7fe fa19 	bl	80009b0 <MCI_GetLastRampFinalSpeed>
 800257e:	0043      	lsls	r3, r0, #1
 8002580:	1818      	adds	r0, r3, r0
 8002582:	0040      	lsls	r0, r0, #1
 8002584:	e76b      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002586:	6902      	ldr	r2, [r0, #16]
 8002588:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800258a:	0f1a      	lsrs	r2, r3, #28
 800258c:	2a09      	cmp	r2, #9
 800258e:	d100      	bne.n	8002592 <UI_GetReg+0x16a>
 8002590:	e176      	b.n	8002880 <UI_GetReg+0x458>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	0f1b      	lsrs	r3, r3, #28
 8002596:	2b09      	cmp	r3, #9
 8002598:	d000      	beq.n	800259c <UI_GetReg+0x174>
 800259a:	e75f      	b.n	800245c <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 800259c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800259e:	2800      	cmp	r0, #0
 80025a0:	d100      	bne.n	80025a4 <UI_GetReg+0x17c>
 80025a2:	e75b      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80025a4:	f004 f83e 	bl	8006624 <STO_PLL_GetObservedBemfLevel>
 80025a8:	1400      	asrs	r0, r0, #16
 80025aa:	e758      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80025ac:	6902      	ldr	r2, [r0, #16]
 80025ae:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025b0:	0f1a      	lsrs	r2, r3, #28
 80025b2:	2a09      	cmp	r2, #9
 80025b4:	d100      	bne.n	80025b8 <UI_GetReg+0x190>
 80025b6:	e133      	b.n	8002820 <UI_GetReg+0x3f8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	0f1b      	lsrs	r3, r3, #28
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d000      	beq.n	80025c2 <UI_GetReg+0x19a>
 80025c0:	e74c      	b.n	800245c <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 80025c2:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80025c4:	2800      	cmp	r0, #0
 80025c6:	d100      	bne.n	80025ca <UI_GetReg+0x1a2>
 80025c8:	e748      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80025ca:	f003 fff3 	bl	80065b4 <STO_PLL_GetEstimatedCurrent>
 80025ce:	b200      	sxth	r0, r0
 80025d0:	e745      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80025d2:	6902      	ldr	r2, [r0, #16]
 80025d4:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025d6:	0f1a      	lsrs	r2, r3, #28
 80025d8:	2a09      	cmp	r2, #9
 80025da:	d100      	bne.n	80025de <UI_GetReg+0x1b6>
 80025dc:	e143      	b.n	8002866 <UI_GetReg+0x43e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	0f1b      	lsrs	r3, r3, #28
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d000      	beq.n	80025e8 <UI_GetReg+0x1c0>
 80025e6:	e739      	b.n	800245c <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 80025e8:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d100      	bne.n	80025f0 <UI_GetReg+0x1c8>
 80025ee:	e735      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = SPD_GetS16Speed(pSPD);
 80025f0:	f003 fa94 	bl	8005b1c <SPD_GetS16Speed>
 80025f4:	e733      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80025f6:	6902      	ldr	r2, [r0, #16]
 80025f8:	58d3      	ldr	r3, [r2, r3]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80025fa:	0f1a      	lsrs	r2, r3, #28
 80025fc:	3a01      	subs	r2, #1
 80025fe:	2a01      	cmp	r2, #1
 8002600:	d800      	bhi.n	8002604 <UI_GetReg+0x1dc>
 8002602:	e105      	b.n	8002810 <UI_GetReg+0x3e8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	0f1b      	lsrs	r3, r3, #28
 8002608:	3b01      	subs	r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d900      	bls.n	8002610 <UI_GetReg+0x1e8>
 800260e:	e725      	b.n	800245c <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 8002610:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002612:	2800      	cmp	r0, #0
 8002614:	d100      	bne.n	8002618 <UI_GetReg+0x1f0>
 8002616:	e721      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = SPD_GetElAngle(pSPD);
 8002618:	f003 fa44 	bl	8005aa4 <SPD_GetElAngle>
 800261c:	e71f      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800261e:	0028      	movs	r0, r5
 8002620:	f7fe fa32 	bl	8000a88 <MCI_GetValphabeta>
 8002624:	1400      	asrs	r0, r0, #16
    break;
 8002626:	e71a      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002628:	0028      	movs	r0, r5
 800262a:	f7fe f9ed 	bl	8000a08 <MCI_GetIalphabeta>
 800262e:	b200      	sxth	r0, r0
    break;
 8002630:	e715      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetIab(pMCI).b;
 8002632:	0028      	movs	r0, r5
 8002634:	f7fe f9d8 	bl	80009e8 <MCI_GetIab>
 8002638:	1400      	asrs	r0, r0, #16
    break;
 800263a:	e710      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800263c:	0028      	movs	r0, r5
 800263e:	f7fe f9c5 	bl	80009cc <MCI_GetAvrgMecSpeedUnit>
 8002642:	0043      	lsls	r3, r0, #1
 8002644:	1818      	adds	r0, r3, r0
 8002646:	0040      	lsls	r0, r0, #1
    break;
 8002648:	e709      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 800264a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800264c:	f002 fbb0 	bl	8004db0 <MPM_GetAvrgElMotorPowerW>
    break;
 8002650:	e705      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002652:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002654:	f002 fbf6 	bl	8004e44 <NTC_GetAvTemp_C>
    break;
 8002658:	e701      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	f002 fc22 	bl	8004ea4 <PID_GetKD>
    break;
 8002660:	e6fd      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002662:	6820      	ldr	r0, [r4, #0]
 8002664:	f002 fc12 	bl	8004e8c <PID_GetKI>
    break;
 8002668:	e6f9      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 800266a:	0028      	movs	r0, r5
 800266c:	f7fe f99e 	bl	80009ac <MCI_GetControlMode>
    break;
 8002670:	e6f5      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetIab(pMCI).a;
 8002672:	0028      	movs	r0, r5
 8002674:	f7fe f9b8 	bl	80009e8 <MCI_GetIab>
 8002678:	b200      	sxth	r0, r0
    break;
 800267a:	e6f0      	b.n	800245e <UI_GetReg+0x36>
      if (pMCT->pRevupCtrl)
 800267c:	6960      	ldr	r0, [r4, #20]
 800267e:	2800      	cmp	r0, #0
 8002680:	d100      	bne.n	8002684 <UI_GetReg+0x25c>
 8002682:	e6eb      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002684:	f003 fd20 	bl	80060c8 <RUC_GetNumberOfPhases>
 8002688:	e6e9      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetVqd(pMCI).q;
 800268a:	0028      	movs	r0, r5
 800268c:	f7fe f9ec 	bl	8000a68 <MCI_GetVqd>
 8002690:	b200      	sxth	r0, r0
    break;
 8002692:	e6e4      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002694:	0028      	movs	r0, r5
 8002696:	f7fe f9b7 	bl	8000a08 <MCI_GetIalphabeta>
 800269a:	1400      	asrs	r0, r0, #16
    break;
 800269c:	e6df      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800269e:	68a0      	ldr	r0, [r4, #8]
 80026a0:	f002 fc00 	bl	8004ea4 <PID_GetKD>
    break;
 80026a4:	e6db      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80026a6:	68a0      	ldr	r0, [r4, #8]
 80026a8:	f002 fbf0 	bl	8004e8c <PID_GetKI>
    break;
 80026ac:	e6d7      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 80026ae:	0028      	movs	r0, r5
 80026b0:	f7fe f9ea 	bl	8000a88 <MCI_GetValphabeta>
 80026b4:	b200      	sxth	r0, r0
    break;
 80026b6:	e6d2      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = MCI_GetVqd(pMCI).d;
 80026b8:	0028      	movs	r0, r5
 80026ba:	f7fe f9d5 	bl	8000a68 <MCI_GetVqd>
 80026be:	1400      	asrs	r0, r0, #16
    break;
 80026c0:	e6cd      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80026c2:	6902      	ldr	r2, [r0, #16]
 80026c4:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026c6:	0f1a      	lsrs	r2, r3, #28
 80026c8:	2a09      	cmp	r2, #9
 80026ca:	d100      	bne.n	80026ce <UI_GetReg+0x2a6>
 80026cc:	e0c4      	b.n	8002858 <UI_GetReg+0x430>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	0f1b      	lsrs	r3, r3, #28
 80026d2:	2b09      	cmp	r3, #9
 80026d4:	d000      	beq.n	80026d8 <UI_GetReg+0x2b0>
 80026d6:	e6c1      	b.n	800245c <UI_GetReg+0x34>
 80026d8:	e79a      	b.n	8002610 <UI_GetReg+0x1e8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80026da:	6902      	ldr	r2, [r0, #16]
 80026dc:	58d3      	ldr	r3, [r2, r3]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80026de:	0f1a      	lsrs	r2, r3, #28
 80026e0:	3a01      	subs	r2, #1
 80026e2:	2a01      	cmp	r2, #1
 80026e4:	d800      	bhi.n	80026e8 <UI_GetReg+0x2c0>
 80026e6:	e08b      	b.n	8002800 <UI_GetReg+0x3d8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	0f1b      	lsrs	r3, r3, #28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d900      	bls.n	80026f4 <UI_GetReg+0x2cc>
 80026f2:	e6b3      	b.n	800245c <UI_GetReg+0x34>
 80026f4:	e778      	b.n	80025e8 <UI_GetReg+0x1c0>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80026f6:	6902      	ldr	r2, [r0, #16]
 80026f8:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026fa:	0f1a      	lsrs	r2, r3, #28
 80026fc:	2a09      	cmp	r2, #9
 80026fe:	d100      	bne.n	8002702 <UI_GetReg+0x2da>
 8002700:	e0cc      	b.n	800289c <UI_GetReg+0x474>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	0f1b      	lsrs	r3, r3, #28
 8002706:	2b09      	cmp	r3, #9
 8002708:	d000      	beq.n	800270c <UI_GetReg+0x2e4>
 800270a:	e6a7      	b.n	800245c <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 800270c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800270e:	2800      	cmp	r0, #0
 8002710:	d100      	bne.n	8002714 <UI_GetReg+0x2ec>
 8002712:	e6a3      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002714:	f003 ff82 	bl	800661c <STO_PLL_GetEstimatedBemfLevel>
 8002718:	1400      	asrs	r0, r0, #16
 800271a:	e6a0      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800271c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800271e:	f003 fac1 	bl	8005ca4 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002722:	0043      	lsls	r3, r0, #1
 8002724:	1818      	adds	r0, r3, r0
 8002726:	0040      	lsls	r0, r0, #1
    break;
 8002728:	e699      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800272a:	6902      	ldr	r2, [r0, #16]
 800272c:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800272e:	0f1a      	lsrs	r2, r3, #28
 8002730:	2a09      	cmp	r2, #9
 8002732:	d100      	bne.n	8002736 <UI_GetReg+0x30e>
 8002734:	e089      	b.n	800284a <UI_GetReg+0x422>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	0f1b      	lsrs	r3, r3, #28
 800273a:	2b09      	cmp	r3, #9
 800273c:	d000      	beq.n	8002740 <UI_GetReg+0x318>
 800273e:	e68d      	b.n	800245c <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 8002740:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002742:	2800      	cmp	r0, #0
 8002744:	d100      	bne.n	8002748 <UI_GetReg+0x320>
 8002746:	e689      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8002748:	f003 ff2a 	bl	80065a0 <STO_PLL_GetEstimatedBemf>
 800274c:	1400      	asrs	r0, r0, #16
 800274e:	e686      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002750:	6820      	ldr	r0, [r4, #0]
 8002752:	f002 fba3 	bl	8004e9c <PID_GetKIDivisor>
    break;
 8002756:	e682      	b.n	800245e <UI_GetReg+0x36>
      bRetVal = (int32_t)(MC_UID);
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <UI_GetReg+0x340>)
 800275a:	e680      	b.n	800245e <UI_GetReg+0x36>
 800275c:	08006ff8 	.word	0x08006ff8
 8002760:	08007200 	.word	0x08007200
 8002764:	0000271a 	.word	0x0000271a
 8002768:	34a6847a 	.word	0x34a6847a
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800276c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800276e:	f003 fa9b 	bl	8005ca8 <STC_GetMinAppNegativeMecSpeedUnit>
 8002772:	0043      	lsls	r3, r0, #1
 8002774:	1818      	adds	r0, r3, r0
 8002776:	0040      	lsls	r0, r0, #1
    break;
 8002778:	e671      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800277a:	6902      	ldr	r2, [r0, #16]
 800277c:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800277e:	0f1a      	lsrs	r2, r3, #28
 8002780:	2a09      	cmp	r2, #9
 8002782:	d100      	bne.n	8002786 <UI_GetReg+0x35e>
 8002784:	e083      	b.n	800288e <UI_GetReg+0x466>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	0f1b      	lsrs	r3, r3, #28
 800278a:	2b09      	cmp	r3, #9
 800278c:	d000      	beq.n	8002790 <UI_GetReg+0x368>
 800278e:	e665      	b.n	800245c <UI_GetReg+0x34>
        pSPD =  pMCT->pSpeedSensorAux;
 8002790:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002792:	2800      	cmp	r0, #0
 8002794:	d100      	bne.n	8002798 <UI_GetReg+0x370>
 8002796:	e661      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8002798:	f003 ff02 	bl	80065a0 <STO_PLL_GetEstimatedBemf>
 800279c:	b200      	sxth	r0, r0
 800279e:	e65e      	b.n	800245e <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027a0:	6902      	ldr	r2, [r0, #16]
 80027a2:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027a4:	0f1a      	lsrs	r2, r3, #28
 80027a6:	2a09      	cmp	r2, #9
 80027a8:	d064      	beq.n	8002874 <UI_GetReg+0x44c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	0f1b      	lsrs	r3, r3, #28
 80027ae:	2b09      	cmp	r3, #9
 80027b0:	d000      	beq.n	80027b4 <UI_GetReg+0x38c>
 80027b2:	e653      	b.n	800245c <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 80027b4:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d100      	bne.n	80027bc <UI_GetReg+0x394>
 80027ba:	e64f      	b.n	800245c <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 80027bc:	f003 fefa 	bl	80065b4 <STO_PLL_GetEstimatedCurrent>
 80027c0:	1400      	asrs	r0, r0, #16
 80027c2:	e64c      	b.n	800245e <UI_GetReg+0x36>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027c4:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 80027c6:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027c8:	0f1b      	lsrs	r3, r3, #28
 80027ca:	2b09      	cmp	r3, #9
 80027cc:	d100      	bne.n	80027d0 <UI_GetReg+0x3a8>
        pSPD = pMCT->pSpeedSensorAux;
 80027ce:	69e0      	ldr	r0, [r4, #28]
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80027d0:	ac0f      	add	r4, sp, #60	; 0x3c
      if (pSPD != MC_NULL)
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d100      	bne.n	80027d8 <UI_GetReg+0x3b0>
 80027d6:	e679      	b.n	80024cc <UI_GetReg+0xa4>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80027d8:	0022      	movs	r2, r4
 80027da:	a90e      	add	r1, sp, #56	; 0x38
 80027dc:	f003 fef8 	bl	80065d0 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 80027e0:	e674      	b.n	80024cc <UI_GetReg+0xa4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027e2:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 80027e4:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027e6:	0f1b      	lsrs	r3, r3, #28
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d100      	bne.n	80027ee <UI_GetReg+0x3c6>
        pSPD = pMCT->pSpeedSensorAux;
 80027ec:	69e0      	ldr	r0, [r4, #28]
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80027ee:	ac0e      	add	r4, sp, #56	; 0x38
      if (pSPD != MC_NULL)
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d100      	bne.n	80027f6 <UI_GetReg+0x3ce>
 80027f4:	e66a      	b.n	80024cc <UI_GetReg+0xa4>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80027f6:	0021      	movs	r1, r4
 80027f8:	aa0f      	add	r2, sp, #60	; 0x3c
 80027fa:	f003 fee9 	bl	80065d0 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 80027fe:	e665      	b.n	80024cc <UI_GetReg+0xa4>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	0f1b      	lsrs	r3, r3, #28
 8002804:	3b01      	subs	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002806:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002808:	2b01      	cmp	r3, #1
 800280a:	d900      	bls.n	800280e <UI_GetReg+0x3e6>
 800280c:	e6ed      	b.n	80025ea <UI_GetReg+0x1c2>
 800280e:	e6eb      	b.n	80025e8 <UI_GetReg+0x1c0>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	0f1b      	lsrs	r3, r3, #28
 8002814:	3b01      	subs	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002816:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002818:	2b01      	cmp	r3, #1
 800281a:	d900      	bls.n	800281e <UI_GetReg+0x3f6>
 800281c:	e6f9      	b.n	8002612 <UI_GetReg+0x1ea>
 800281e:	e6f7      	b.n	8002610 <UI_GetReg+0x1e8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002820:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 8002822:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002824:	0f1b      	lsrs	r3, r3, #28
 8002826:	2b09      	cmp	r3, #9
 8002828:	d000      	beq.n	800282c <UI_GetReg+0x404>
 800282a:	e6cb      	b.n	80025c4 <UI_GetReg+0x19c>
 800282c:	e6c9      	b.n	80025c2 <UI_GetReg+0x19a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800282e:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 8002830:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002832:	0f1b      	lsrs	r3, r3, #28
 8002834:	2b09      	cmp	r3, #9
 8002836:	d000      	beq.n	800283a <UI_GetReg+0x412>
 8002838:	e67e      	b.n	8002538 <UI_GetReg+0x110>
 800283a:	e67c      	b.n	8002536 <UI_GetReg+0x10e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800283c:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 800283e:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002840:	0f1b      	lsrs	r3, r3, #28
 8002842:	2b09      	cmp	r3, #9
 8002844:	d000      	beq.n	8002848 <UI_GetReg+0x420>
 8002846:	e68a      	b.n	800255e <UI_GetReg+0x136>
 8002848:	e688      	b.n	800255c <UI_GetReg+0x134>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800284a:	011b      	lsls	r3, r3, #4
       pSPD = pMCT->pSpeedSensorMain;
 800284c:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800284e:	0f1b      	lsrs	r3, r3, #28
 8002850:	2b09      	cmp	r3, #9
 8002852:	d000      	beq.n	8002856 <UI_GetReg+0x42e>
 8002854:	e775      	b.n	8002742 <UI_GetReg+0x31a>
 8002856:	e773      	b.n	8002740 <UI_GetReg+0x318>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002858:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 800285a:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800285c:	0f1b      	lsrs	r3, r3, #28
 800285e:	2b09      	cmp	r3, #9
 8002860:	d000      	beq.n	8002864 <UI_GetReg+0x43c>
 8002862:	e6d6      	b.n	8002612 <UI_GetReg+0x1ea>
 8002864:	e6d4      	b.n	8002610 <UI_GetReg+0x1e8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002866:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 8002868:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800286a:	0f1b      	lsrs	r3, r3, #28
 800286c:	2b09      	cmp	r3, #9
 800286e:	d000      	beq.n	8002872 <UI_GetReg+0x44a>
 8002870:	e6bb      	b.n	80025ea <UI_GetReg+0x1c2>
 8002872:	e6b9      	b.n	80025e8 <UI_GetReg+0x1c0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002874:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 8002876:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002878:	0f1b      	lsrs	r3, r3, #28
 800287a:	2b09      	cmp	r3, #9
 800287c:	d19b      	bne.n	80027b6 <UI_GetReg+0x38e>
 800287e:	e799      	b.n	80027b4 <UI_GetReg+0x38c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002880:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 8002882:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002884:	0f1b      	lsrs	r3, r3, #28
 8002886:	2b09      	cmp	r3, #9
 8002888:	d000      	beq.n	800288c <UI_GetReg+0x464>
 800288a:	e688      	b.n	800259e <UI_GetReg+0x176>
 800288c:	e686      	b.n	800259c <UI_GetReg+0x174>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800288e:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 8002890:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002892:	0f1b      	lsrs	r3, r3, #28
 8002894:	2b09      	cmp	r3, #9
 8002896:	d000      	beq.n	800289a <UI_GetReg+0x472>
 8002898:	e77b      	b.n	8002792 <UI_GetReg+0x36a>
 800289a:	e779      	b.n	8002790 <UI_GetReg+0x368>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800289c:	011b      	lsls	r3, r3, #4
        pSPD = pMCT->pSpeedSensorMain;
 800289e:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028a0:	0f1b      	lsrs	r3, r3, #28
 80028a2:	2b09      	cmp	r3, #9
 80028a4:	d000      	beq.n	80028a8 <UI_GetReg+0x480>
 80028a6:	e732      	b.n	800270e <UI_GetReg+0x2e6>
 80028a8:	e730      	b.n	800270c <UI_GetReg+0x2e4>
 80028aa:	46c0      	nop			; (mov r8, r8)

080028ac <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80028ac:	b570      	push	{r4, r5, r6, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80028ae:	7d03      	ldrb	r3, [r0, #20]
 80028b0:	6882      	ldr	r2, [r0, #8]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	589d      	ldr	r5, [r3, r2]

  switch (bCmdID)
 80028b6:	290e      	cmp	r1, #14
 80028b8:	d803      	bhi.n	80028c2 <UI_ExecCmd+0x16>
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <UI_ExecCmd+0x70>)
 80028bc:	0089      	lsls	r1, r1, #2
 80028be:	585b      	ldr	r3, [r3, r1]
 80028c0:	469f      	mov	pc, r3
 80028c2:	2400      	movs	r4, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80028c4:	0020      	movs	r0, r4
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
  bool retVal = true;
 80028c8:	2401      	movs	r4, #1
 80028ca:	e7fb      	b.n	80028c4 <UI_ExecCmd+0x18>
      if (MCI_GetSTMState(pMCI) == IDLE)
 80028cc:	0028      	movs	r0, r5
 80028ce:	f7fe f867 	bl	80009a0 <MCI_GetSTMState>
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d004      	beq.n	80028e0 <UI_ExecCmd+0x34>
        MCI_StopMotor(pMCI);
 80028d6:	0028      	movs	r0, r5
 80028d8:	f7fe f812 	bl	8000900 <MCI_StopMotor>
  bool retVal = true;
 80028dc:	2401      	movs	r4, #1
 80028de:	e7f1      	b.n	80028c4 <UI_ExecCmd+0x18>
        MCI_StartMotor(pMCI);
 80028e0:	0028      	movs	r0, r5
 80028e2:	f7fe f801 	bl	80008e8 <MCI_StartMotor>
  bool retVal = true;
 80028e6:	2401      	movs	r4, #1
 80028e8:	e7ec      	b.n	80028c4 <UI_ExecCmd+0x18>
      MCI_FaultAcknowledged(pMCI);
 80028ea:	0028      	movs	r0, r5
 80028ec:	f7fe f80e 	bl	800090c <MCI_FaultAcknowledged>
  bool retVal = true;
 80028f0:	2401      	movs	r4, #1
    break;
 80028f2:	e7e7      	b.n	80028c4 <UI_ExecCmd+0x18>
      MCI_EncoderAlign(pMCI);
 80028f4:	0028      	movs	r0, r5
 80028f6:	f7fe f80f 	bl	8000918 <MCI_EncoderAlign>
  bool retVal = true;
 80028fa:	2401      	movs	r4, #1
    break;
 80028fc:	e7e2      	b.n	80028c4 <UI_ExecCmd+0x18>
      MCI_Clear_Iqdref(pMCI);
 80028fe:	0028      	movs	r0, r5
 8002900:	f7fe f8da 	bl	8000ab8 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002904:	2401      	movs	r4, #1
    break;
 8002906:	e7dd      	b.n	80028c4 <UI_ExecCmd+0x18>
      if (MCI_GetSTMState(pMCI) == RUN)
 8002908:	0028      	movs	r0, r5
 800290a:	f7fe f849 	bl	80009a0 <MCI_GetSTMState>
  bool retVal = true;
 800290e:	2401      	movs	r4, #1
      if (MCI_GetSTMState(pMCI) == RUN)
 8002910:	2806      	cmp	r0, #6
 8002912:	d1d7      	bne.n	80028c4 <UI_ExecCmd+0x18>
        MCI_StopRamp(pMCI);
 8002914:	0028      	movs	r0, r5
 8002916:	f7fe f853 	bl	80009c0 <MCI_StopRamp>
 800291a:	e7d3      	b.n	80028c4 <UI_ExecCmd+0x18>
 800291c:	080073d0 	.word	0x080073d0

08002920 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	0004      	movs	r4, r0
 8002924:	0008      	movs	r0, r1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002926:	2106      	movs	r1, #6
{
 8002928:	0015      	movs	r5, r2
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800292a:	f7fd fc77 	bl	800021c <__divsi3>
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800292e:	7d23      	ldrb	r3, [r4, #20]
 8002930:	68a2      	ldr	r2, [r4, #8]
 8002932:	009b      	lsls	r3, r3, #2
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002934:	b201      	sxth	r1, r0
 8002936:	5898      	ldr	r0, [r3, r2]
 8002938:	002a      	movs	r2, r5
 800293a:	f7fd ffbb 	bl	80008b4 <MCI_ExecSpeedRamp>
  return true;
}
 800293e:	2001      	movs	r0, #1
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	46c0      	nop			; (mov r8, r8)

08002944 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002944:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002946:	7d03      	ldrb	r3, [r0, #20]
 8002948:	6880      	ldr	r0, [r0, #8]
 800294a:	009b      	lsls	r3, r3, #2

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 800294c:	5818      	ldr	r0, [r3, r0]
 800294e:	f7fd ffb9 	bl	80008c4 <MCI_ExecTorqueRamp>
  return true;
}
 8002952:	2001      	movs	r0, #1
 8002954:	bd10      	pop	{r4, pc}
 8002956:	46c0      	nop			; (mov r8, r8)

08002958 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	000c      	movs	r4, r1
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800295c:	7d01      	ldrb	r1, [r0, #20]
{
 800295e:	001e      	movs	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002960:	68c3      	ldr	r3, [r0, #12]
 8002962:	0089      	lsls	r1, r1, #2
 8002964:	58cb      	ldr	r3, [r1, r3]
{
 8002966:	0017      	movs	r7, r2
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002968:	695d      	ldr	r5, [r3, #20]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
  }
  else
  {
    hRetVal = false;
 800296a:	2000      	movs	r0, #0
  if (pRevupCtrl)
 800296c:	2d00      	cmp	r5, #0
 800296e:	d010      	beq.n	8002992 <UI_GetRevupData+0x3a>
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002970:	0021      	movs	r1, r4
 8002972:	0028      	movs	r0, r5
 8002974:	f003 fb92 	bl	800609c <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002978:	0021      	movs	r1, r4
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800297a:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800297c:	0028      	movs	r0, r5
 800297e:	f003 fb93 	bl	80060a8 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002982:	0021      	movs	r1, r4
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002984:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002986:	0028      	movs	r0, r5
 8002988:	f003 fb96 	bl	80060b8 <RUC_GetPhaseFinalTorque>
 800298c:	9b06      	ldr	r3, [sp, #24]
 800298e:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002990:	2001      	movs	r0, #1
  }
  return hRetVal;
}
 8002992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002994 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002996:	000c      	movs	r4, r1
 8002998:	001e      	movs	r6, r3
 800299a:	ab06      	add	r3, sp, #24
 800299c:	2700      	movs	r7, #0
 800299e:	5fdf      	ldrsh	r7, [r3, r7]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80029a0:	7d03      	ldrb	r3, [r0, #20]
 80029a2:	68c1      	ldr	r1, [r0, #12]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	585b      	ldr	r3, [r3, r1]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80029a8:	0021      	movs	r1, r4
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80029aa:	695d      	ldr	r5, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80029ac:	0028      	movs	r0, r5
 80029ae:	f003 fb63 	bl	8006078 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80029b2:	0032      	movs	r2, r6
 80029b4:	0028      	movs	r0, r5
 80029b6:	0021      	movs	r1, r4
 80029b8:	f003 fb64 	bl	8006084 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80029bc:	0028      	movs	r0, r5
 80029be:	003a      	movs	r2, r7
 80029c0:	0021      	movs	r1, r4
 80029c2:	f003 fb65 	bl	8006090 <RUC_SetPhaseFinalTorque>
  return true;
}
 80029c6:	2001      	movs	r0, #1
 80029c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)

080029cc <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80029cc:	b500      	push	{lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80029ce:	7d03      	ldrb	r3, [r0, #20]
 80029d0:	6880      	ldr	r0, [r0, #8]
{
 80029d2:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	5818      	ldr	r0, [r3, r0]
  qd_t currComp;
  currComp.q = hIqRef;
 80029d8:	ab01      	add	r3, sp, #4
 80029da:	8019      	strh	r1, [r3, #0]
  currComp.d = hIdRef;
 80029dc:	805a      	strh	r2, [r3, #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 80029de:	9901      	ldr	r1, [sp, #4]
 80029e0:	f7fd ff78 	bl	80008d4 <MCI_SetCurrentReferences>
}
 80029e4:	b003      	add	sp, #12
 80029e6:	bd00      	pop	{pc}

080029e8 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80029e8:	2000      	movs	r0, #0
 80029ea:	4770      	bx	lr

080029ec <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029ec:	4770      	bx	lr
 80029ee:	46c0      	nop			; (mov r8, r8)

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b510      	push	{r4, lr}
 80029f2:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f4:	20fa      	movs	r0, #250	; 0xfa
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_InitTick+0x40>)
 80029f8:	0080      	lsls	r0, r0, #2
 80029fa:	7819      	ldrb	r1, [r3, #0]
 80029fc:	f7fd fb84 	bl	8000108 <__udivsi3>
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_InitTick+0x44>)
 8002a02:	0001      	movs	r1, r0
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	f7fd fb7f 	bl	8000108 <__udivsi3>
 8002a0a:	f000 f9b3 	bl	8002d74 <HAL_SYSTICK_Config>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8002a12:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a14:	2c03      	cmp	r4, #3
 8002a16:	d900      	bls.n	8002a1a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002a18:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a1a:	3802      	subs	r0, #2
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	0021      	movs	r1, r4
 8002a20:	f000 f96a 	bl	8002cf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_InitTick+0x48>)
 8002a26:	2000      	movs	r0, #0
 8002a28:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8002a2a:	e7f5      	b.n	8002a18 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e7f3      	b.n	8002a18 <HAL_InitTick+0x28>
 8002a30:	200006dc 	.word	0x200006dc
 8002a34:	200006d8 	.word	0x200006d8
 8002a38:	200006e0 	.word	0x200006e0

08002a3c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3c:	2110      	movs	r1, #16
 8002a3e:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <HAL_Init+0x1c>)
{
 8002a40:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a42:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a44:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a46:	430b      	orrs	r3, r1
 8002a48:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a4a:	f7ff ffd1 	bl	80029f0 <HAL_InitTick>
  HAL_MspInit();
 8002a4e:	f7ff f909 	bl	8001c64 <HAL_MspInit>
}
 8002a52:	2000      	movs	r0, #0
 8002a54:	bd10      	pop	{r4, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	40022000 	.word	0x40022000

08002a5c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a5c:	4a03      	ldr	r2, [pc, #12]	; (8002a6c <HAL_IncTick+0x10>)
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <HAL_IncTick+0x14>)
 8002a60:	6811      	ldr	r1, [r2, #0]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	185b      	adds	r3, r3, r1
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	4770      	bx	lr
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	20000ab0 	.word	0x20000ab0
 8002a70:	200006dc 	.word	0x200006dc

08002a74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a74:	4b01      	ldr	r3, [pc, #4]	; (8002a7c <HAL_GetTick+0x8>)
 8002a76:	6818      	ldr	r0, [r3, #0]
}
 8002a78:	4770      	bx	lr
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	20000ab0 	.word	0x20000ab0

08002a80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8002a84:	d100      	bne.n	8002a88 <HAL_ADC_Init+0x8>
 8002a86:	e085      	b.n	8002b94 <HAL_ADC_Init+0x114>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a88:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d100      	bne.n	8002a90 <HAL_ADC_Init+0x10>
 8002a8e:	e06b      	b.n	8002b68 <HAL_ADC_Init+0xe8>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a92:	06db      	lsls	r3, r3, #27
 8002a94:	d462      	bmi.n	8002b5c <HAL_ADC_Init+0xdc>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a96:	2104      	movs	r1, #4
 8002a98:	000e      	movs	r6, r1
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	4016      	ands	r6, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002aa0:	4211      	tst	r1, r2
 8002aa2:	d15b      	bne.n	8002b5c <HAL_ADC_Init+0xdc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002aa6:	4948      	ldr	r1, [pc, #288]	; (8002bc8 <HAL_ADC_Init+0x148>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	3106      	adds	r1, #6
 8002aac:	31ff      	adds	r1, #255	; 0xff
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	2a01      	cmp	r2, #1
 8002aba:	d05b      	beq.n	8002b74 <HAL_ADC_Init+0xf4>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002abc:	2118      	movs	r1, #24
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	68a1      	ldr	r1, [r4, #8]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	6861      	ldr	r1, [r4, #4]
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	0892      	lsrs	r2, r2, #2
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	493d      	ldr	r1, [pc, #244]	; (8002bcc <HAL_ADC_Init+0x14c>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002adc:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ade:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ae0:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ae2:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ae4:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ae6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ae8:	7ea7      	ldrb	r7, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002aea:	3a01      	subs	r2, #1
 8002aec:	1e55      	subs	r5, r2, #1
 8002aee:	41aa      	sbcs	r2, r5
 8002af0:	0315      	lsls	r5, r2, #12
 8002af2:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002af4:	0378      	lsls	r0, r7, #13
 8002af6:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002af8:	6922      	ldr	r2, [r4, #16]
 8002afa:	4301      	orrs	r1, r0
 8002afc:	2a02      	cmp	r2, #2
 8002afe:	d100      	bne.n	8002b02 <HAL_ADC_Init+0x82>
 8002b00:	2604      	movs	r6, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	5ca2      	ldrb	r2, [r4, r2]
 8002b06:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b08:	430a      	orrs	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b0a:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b0c:	432a      	orrs	r2, r5
 8002b0e:	4332      	orrs	r2, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b10:	2901      	cmp	r1, #1
 8002b12:	d04b      	beq.n	8002bac <HAL_ADC_Init+0x12c>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b14:	20c2      	movs	r0, #194	; 0xc2
 8002b16:	69e1      	ldr	r1, [r4, #28]
 8002b18:	30ff      	adds	r0, #255	; 0xff
 8002b1a:	4281      	cmp	r1, r0
 8002b1c:	d002      	beq.n	8002b24 <HAL_ADC_Init+0xa4>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002b1e:	6a20      	ldr	r0, [r4, #32]
 8002b20:	4301      	orrs	r1, r0
 8002b22:	430a      	orrs	r2, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002b24:	68d9      	ldr	r1, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b26:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	0549      	lsls	r1, r1, #21
 8002b30:	428d      	cmp	r5, r1
 8002b32:	d026      	beq.n	8002b82 <HAL_ADC_Init+0x102>
 8002b34:	1e69      	subs	r1, r5, #1
 8002b36:	2906      	cmp	r1, #6
 8002b38:	d923      	bls.n	8002b82 <HAL_ADC_Init+0x102>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4924      	ldr	r1, [pc, #144]	; (8002bd0 <HAL_ADC_Init+0x150>)
 8002b3e:	400b      	ands	r3, r1
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d029      	beq.n	8002b98 <HAL_ADC_Init+0x118>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b44:	2212      	movs	r2, #18
 8002b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8002b48:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	3a02      	subs	r2, #2
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b54:	3a0f      	subs	r2, #15
 8002b56:	4313      	orrs	r3, r2
 8002b58:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8002b5a:	e004      	b.n	8002b66 <HAL_ADC_Init+0xe6>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 8002b5e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b62:	4313      	orrs	r3, r2
 8002b64:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8002b68:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8002b6c:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002b6e:	f7ff f891 	bl	8001c94 <HAL_ADC_MspInit>
 8002b72:	e78d      	b.n	8002a90 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	420a      	tst	r2, r1
 8002b78:	d1ac      	bne.n	8002ad4 <HAL_ADC_Init+0x54>
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	0412      	lsls	r2, r2, #16
 8002b7e:	d4a9      	bmi.n	8002ad4 <HAL_ADC_Init+0x54>
 8002b80:	e79c      	b.n	8002abc <HAL_ADC_Init+0x3c>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b82:	2107      	movs	r1, #7
 8002b84:	6958      	ldr	r0, [r3, #20]
 8002b86:	4388      	bics	r0, r1
 8002b88:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002b8a:	6958      	ldr	r0, [r3, #20]
 8002b8c:	4029      	ands	r1, r5
 8002b8e:	4301      	orrs	r1, r0
 8002b90:	6159      	str	r1, [r3, #20]
 8002b92:	e7d2      	b.n	8002b3a <HAL_ADC_Init+0xba>
    return HAL_ERROR;
 8002b94:	2001      	movs	r0, #1
 8002b96:	e7e6      	b.n	8002b66 <HAL_ADC_Init+0xe6>
      ADC_CLEAR_ERRORCODE(hadc);
 8002b98:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002b9a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002b9c:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba0:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	3a02      	subs	r2, #2
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	63a3      	str	r3, [r4, #56]	; 0x38
 8002baa:	e7dc      	b.n	8002b66 <HAL_ADC_Init+0xe6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bac:	2f00      	cmp	r7, #0
 8002bae:	d103      	bne.n	8002bb8 <HAL_ADC_Init+0x138>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	0249      	lsls	r1, r1, #9
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	e7ad      	b.n	8002b14 <HAL_ADC_Init+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb8:	2520      	movs	r5, #32
 8002bba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002bbc:	4328      	orrs	r0, r5
 8002bbe:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002bc2:	4301      	orrs	r1, r0
 8002bc4:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002bc6:	e7a5      	b.n	8002b14 <HAL_ADC_Init+0x94>
 8002bc8:	fffffefd 	.word	0xfffffefd
 8002bcc:	fffe0219 	.word	0xfffe0219
 8002bd0:	833fffe7 	.word	0x833fffe7

08002bd4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002bd4:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd6:	2234      	movs	r2, #52	; 0x34
{
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002bdc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002bde:	5c83      	ldrb	r3, [r0, r2]
{
 8002be0:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002be2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d05f      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0xd4>
 8002be8:	2301      	movs	r3, #1
 8002bea:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bec:	6802      	ldr	r2, [r0, #0]
 8002bee:	6890      	ldr	r0, [r2, #8]
 8002bf0:	0740      	lsls	r0, r0, #29
 8002bf2:	d509      	bpl.n	8002c08 <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8002bf6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfe:	2334      	movs	r3, #52	; 0x34
 8002c00:	2200      	movs	r2, #0
 8002c02:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002c04:	b002      	add	sp, #8
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8002c08:	4835      	ldr	r0, [pc, #212]	; (8002ce0 <HAL_ADC_ConfigChannel+0x10c>)
 8002c0a:	684e      	ldr	r6, [r1, #4]
 8002c0c:	4286      	cmp	r6, r0
 8002c0e:	d02f      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c10:	6808      	ldr	r0, [r1, #0]
 8002c12:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8002c14:	4083      	lsls	r3, r0
 8002c16:	4333      	orrs	r3, r6
 8002c18:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	055b      	lsls	r3, r3, #21
 8002c1e:	429d      	cmp	r5, r3
 8002c20:	d00f      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x6e>
 8002c22:	3d01      	subs	r5, #1
 8002c24:	2d06      	cmp	r5, #6
 8002c26:	d90c      	bls.n	8002c42 <HAL_ADC_ConfigChannel+0x6e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002c28:	2307      	movs	r3, #7
 8002c2a:	688d      	ldr	r5, [r1, #8]
 8002c2c:	6951      	ldr	r1, [r2, #20]
 8002c2e:	4019      	ands	r1, r3
 8002c30:	428d      	cmp	r5, r1
 8002c32:	d006      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x6e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c34:	6951      	ldr	r1, [r2, #20]
 8002c36:	4399      	bics	r1, r3
 8002c38:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002c3a:	6951      	ldr	r1, [r2, #20]
 8002c3c:	402b      	ands	r3, r5
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c42:	0003      	movs	r3, r0
 8002c44:	3b10      	subs	r3, #16
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d810      	bhi.n	8002c6c <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c4a:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <HAL_ADC_ConfigChannel+0x110>)
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	2810      	cmp	r0, #16
 8002c50:	d02e      	beq.n	8002cb0 <HAL_ADC_ConfigChannel+0xdc>
 8002c52:	3811      	subs	r0, #17
 8002c54:	1e41      	subs	r1, r0, #1
 8002c56:	4188      	sbcs	r0, r1
 8002c58:	21c0      	movs	r1, #192	; 0xc0
 8002c5a:	4240      	negs	r0, r0
 8002c5c:	0409      	lsls	r1, r1, #16
 8002c5e:	4008      	ands	r0, r1
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	03c9      	lsls	r1, r1, #15
 8002c64:	468c      	mov	ip, r1
 8002c66:	4460      	add	r0, ip
 8002c68:	4318      	orrs	r0, r3
 8002c6a:	6010      	str	r0, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	e7c6      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c70:	6809      	ldr	r1, [r1, #0]
 8002c72:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002c74:	408b      	lsls	r3, r1
 8002c76:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c78:	000b      	movs	r3, r1
 8002c7a:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c7c:	6290      	str	r0, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d8f4      	bhi.n	8002c6c <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_ADC_ConfigChannel+0x110>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2910      	cmp	r1, #16
 8002c88:	d010      	beq.n	8002cac <HAL_ADC_ConfigChannel+0xd8>
 8002c8a:	3911      	subs	r1, #17
 8002c8c:	424b      	negs	r3, r1
 8002c8e:	414b      	adcs	r3, r1
 8002c90:	4259      	negs	r1, r3
 8002c92:	23c0      	movs	r3, #192	; 0xc0
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	4019      	ands	r1, r3
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_ADC_ConfigChannel+0x114>)
 8002c9a:	469c      	mov	ip, r3
 8002c9c:	4461      	add	r1, ip
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_ADC_ConfigChannel+0x110>)
 8002ca0:	4011      	ands	r1, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca2:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ca4:	6019      	str	r1, [r3, #0]
 8002ca6:	e7aa      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8002ca8:	2002      	movs	r0, #2
 8002caa:	e7ab      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002cac:	490f      	ldr	r1, [pc, #60]	; (8002cec <HAL_ADC_ConfigChannel+0x118>)
 8002cae:	e7f6      	b.n	8002c9e <HAL_ADC_ConfigChannel+0xca>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	0409      	lsls	r1, r1, #16
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_ADC_ConfigChannel+0x11c>)
 8002cba:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <HAL_ADC_ConfigChannel+0x120>)
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	f7fd fa23 	bl	8000108 <__udivsi3>
 8002cc2:	0083      	lsls	r3, r0, #2
 8002cc4:	181b      	adds	r3, r3, r0
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002cca:	9b01      	ldr	r3, [sp, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0cd      	beq.n	8002c6c <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 8002cd0:	9b01      	ldr	r3, [sp, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002cd6:	9b01      	ldr	r3, [sp, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cdc:	2000      	movs	r0, #0
 8002cde:	e78e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x2a>
 8002ce0:	00001001 	.word	0x00001001
 8002ce4:	40012708 	.word	0x40012708
 8002ce8:	feffffff 	.word	0xfeffffff
 8002cec:	ff7fffff 	.word	0xff7fffff
 8002cf0:	200006d8 	.word	0x200006d8
 8002cf4:	000f4240 	.word	0x000f4240

08002cf8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cf8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	db14      	blt.n	8002d28 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_NVIC_SetPriority+0x5c>)
 8002d00:	2203      	movs	r2, #3
 8002d02:	469c      	mov	ip, r3
 8002d04:	23ff      	movs	r3, #255	; 0xff
 8002d06:	0884      	lsrs	r4, r0, #2
 8002d08:	4010      	ands	r0, r2
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	26c0      	movs	r6, #192	; 0xc0
 8002d0e:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d10:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d12:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d14:	400b      	ands	r3, r1
 8002d16:	4083      	lsls	r3, r0
 8002d18:	00a4      	lsls	r4, r4, #2
 8002d1a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d1c:	00b6      	lsls	r6, r6, #2
 8002d1e:	59a5      	ldr	r5, [r4, r6]
 8002d20:	4395      	bics	r5, r2
 8002d22:	432b      	orrs	r3, r5
 8002d24:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d28:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <HAL_NVIC_SetPriority+0x60>)
 8002d2a:	230f      	movs	r3, #15
 8002d2c:	4694      	mov	ip, r2
 8002d2e:	2203      	movs	r2, #3
 8002d30:	4003      	ands	r3, r0
 8002d32:	4010      	ands	r0, r2
 8002d34:	32fc      	adds	r2, #252	; 0xfc
 8002d36:	0015      	movs	r5, r2
 8002d38:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d3a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d3c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d3e:	400a      	ands	r2, r1
 8002d40:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d42:	3b08      	subs	r3, #8
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4463      	add	r3, ip
 8002d4a:	69dc      	ldr	r4, [r3, #28]
 8002d4c:	43ac      	bics	r4, r5
 8002d4e:	4322      	orrs	r2, r4
 8002d50:	61da      	str	r2, [r3, #28]
 8002d52:	e7e8      	b.n	8002d26 <HAL_NVIC_SetPriority+0x2e>
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	db05      	blt.n	8002d6c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d60:	231f      	movs	r3, #31
 8002d62:	4018      	ands	r0, r3
 8002d64:	3b1e      	subs	r3, #30
 8002d66:	4083      	lsls	r3, r0
 8002d68:	4a01      	ldr	r2, [pc, #4]	; (8002d70 <HAL_NVIC_EnableIRQ+0x14>)
 8002d6a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d6c:	4770      	bx	lr
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	1e43      	subs	r3, r0, #1
 8002d78:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d20e      	bcs.n	8002d9e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d80:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d84:	4807      	ldr	r0, [pc, #28]	; (8002da4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d88:	6a03      	ldr	r3, [r0, #32]
 8002d8a:	0609      	lsls	r1, r1, #24
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d94:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d96:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9a:	3307      	adds	r3, #7
 8002d9c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d9e:	4770      	bx	lr
 8002da0:	e000e010 	.word	0xe000e010
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002da8:	4770      	bx	lr
 8002daa:	46c0      	nop			; (mov r8, r8)

08002dac <HAL_SYSTICK_IRQHandler>:
{
 8002dac:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8002dae:	f7ff fffb 	bl	8002da8 <HAL_SYSTICK_Callback>
}
 8002db2:	bd10      	pop	{r4, pc}

08002db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002db8:	d027      	beq.n	8002e0a <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dba:	2521      	movs	r5, #33	; 0x21
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dc0:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8002dc4:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dc6:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002dc8:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002dca:	6863      	ldr	r3, [r4, #4]
 8002dcc:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dce:	68e1      	ldr	r1, [r4, #12]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6921      	ldr	r1, [r4, #16]
 8002dd4:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd6:	6961      	ldr	r1, [r4, #20]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	69a1      	ldr	r1, [r4, #24]
 8002ddc:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dde:	69e1      	ldr	r1, [r4, #28]
 8002de0:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002de2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002de4:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_DMA_Init+0x60>)
 8002de8:	2114      	movs	r1, #20
 8002dea:	469c      	mov	ip, r3
 8002dec:	4460      	add	r0, ip
 8002dee:	f7fd f98b 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8002df4:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8002df6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dfa:	0080      	lsls	r0, r0, #2
 8002dfc:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002dfe:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e00:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002e02:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8002e04:	321f      	adds	r2, #31
 8002e06:	54a3      	strb	r3, [r4, r2]
}  
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e7fc      	b.n	8002e08 <HAL_DMA_Init+0x54>
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	ffffc00f 	.word	0xffffc00f
 8002e14:	bffdfff8 	.word	0xbffdfff8
 8002e18:	40020000 	.word	0x40020000

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1e:	46de      	mov	lr, fp
 8002e20:	4657      	mov	r7, sl
 8002e22:	464e      	mov	r6, r9
 8002e24:	4645      	mov	r5, r8
 8002e26:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e28:	680c      	ldr	r4, [r1, #0]
{
 8002e2a:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002e2e:	2300      	movs	r3, #0
{
 8002e30:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	2c00      	cmp	r4, #0
 8002e34:	d100      	bne.n	8002e38 <HAL_GPIO_Init+0x1c>
 8002e36:	e082      	b.n	8002f3e <HAL_GPIO_Init+0x122>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e38:	4979      	ldr	r1, [pc, #484]	; (8003020 <HAL_GPIO_Init+0x204>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3a:	4f7a      	ldr	r7, [pc, #488]	; (8003024 <HAL_GPIO_Init+0x208>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3c:	468b      	mov	fp, r1
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e3e:	4661      	mov	r1, ip
 8002e40:	9103      	str	r1, [sp, #12]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e42:	2501      	movs	r5, #1
 8002e44:	0021      	movs	r1, r4
 8002e46:	409d      	lsls	r5, r3
 8002e48:	4029      	ands	r1, r5
 8002e4a:	9101      	str	r1, [sp, #4]
    if (iocurrent != 0x00u)
 8002e4c:	422c      	tst	r4, r5
 8002e4e:	d070      	beq.n	8002f32 <HAL_GPIO_Init+0x116>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e50:	9903      	ldr	r1, [sp, #12]
 8002e52:	6849      	ldr	r1, [r1, #4]
 8002e54:	468a      	mov	sl, r1
 8002e56:	2103      	movs	r1, #3
 8002e58:	4656      	mov	r6, sl
 8002e5a:	4031      	ands	r1, r6
 8002e5c:	468c      	mov	ip, r1
 8002e5e:	3901      	subs	r1, #1
 8002e60:	2901      	cmp	r1, #1
 8002e62:	d800      	bhi.n	8002e66 <HAL_GPIO_Init+0x4a>
 8002e64:	e072      	b.n	8002f4c <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e66:	4661      	mov	r1, ip
 8002e68:	2903      	cmp	r1, #3
 8002e6a:	d000      	beq.n	8002e6e <HAL_GPIO_Init+0x52>
 8002e6c:	e0b7      	b.n	8002fde <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e6e:	4665      	mov	r5, ip
 8002e70:	4095      	lsls	r5, r2
 8002e72:	43e9      	mvns	r1, r5
 8002e74:	9102      	str	r1, [sp, #8]
      temp = GPIOx->MODER;
 8002e76:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e78:	9902      	ldr	r1, [sp, #8]
 8002e7a:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e7c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e7e:	25c0      	movs	r5, #192	; 0xc0
      GPIOx->MODER = temp;
 8002e80:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e82:	4651      	mov	r1, sl
 8002e84:	02ad      	lsls	r5, r5, #10
 8002e86:	4229      	tst	r1, r5
 8002e88:	d053      	beq.n	8002f32 <HAL_GPIO_Init+0x116>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	4659      	mov	r1, fp
 8002e8c:	2501      	movs	r5, #1
 8002e8e:	465e      	mov	r6, fp
 8002e90:	6989      	ldr	r1, [r1, #24]
 8002e92:	4329      	orrs	r1, r5
 8002e94:	61b1      	str	r1, [r6, #24]
 8002e96:	69b1      	ldr	r1, [r6, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e98:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	4029      	ands	r1, r5
 8002e9c:	4d62      	ldr	r5, [pc, #392]	; (8003028 <HAL_GPIO_Init+0x20c>)
 8002e9e:	9105      	str	r1, [sp, #20]
 8002ea0:	46ac      	mov	ip, r5
 8002ea2:	9905      	ldr	r1, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ea4:	401e      	ands	r6, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ea6:	0899      	lsrs	r1, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ea8:	00b6      	lsls	r6, r6, #2
 8002eaa:	0089      	lsls	r1, r1, #2
 8002eac:	4461      	add	r1, ip
 8002eae:	46b4      	mov	ip, r6
        temp = SYSCFG->EXTICR[position >> 2u];
 8002eb0:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb2:	260f      	movs	r6, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8002eb4:	46a9      	mov	r9, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb6:	4665      	mov	r5, ip
 8002eb8:	40ae      	lsls	r6, r5
 8002eba:	0035      	movs	r5, r6
 8002ebc:	464e      	mov	r6, r9
 8002ebe:	43ae      	bics	r6, r5
 8002ec0:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ec2:	2690      	movs	r6, #144	; 0x90
 8002ec4:	05f6      	lsls	r6, r6, #23
 8002ec6:	42b0      	cmp	r0, r6
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_GPIO_Init+0xcc>
 8002eca:	4e58      	ldr	r6, [pc, #352]	; (800302c <HAL_GPIO_Init+0x210>)
 8002ecc:	42b0      	cmp	r0, r6
 8002ece:	d100      	bne.n	8002ed2 <HAL_GPIO_Init+0xb6>
 8002ed0:	e097      	b.n	8003002 <HAL_GPIO_Init+0x1e6>
 8002ed2:	4e57      	ldr	r6, [pc, #348]	; (8003030 <HAL_GPIO_Init+0x214>)
 8002ed4:	42b0      	cmp	r0, r6
 8002ed6:	d100      	bne.n	8002eda <HAL_GPIO_Init+0xbe>
 8002ed8:	e09a      	b.n	8003010 <HAL_GPIO_Init+0x1f4>
 8002eda:	4665      	mov	r5, ip
 8002edc:	2605      	movs	r6, #5
 8002ede:	40ae      	lsls	r6, r5
 8002ee0:	0035      	movs	r5, r6
 8002ee2:	464e      	mov	r6, r9
 8002ee4:	432e      	orrs	r6, r5
 8002ee6:	46b1      	mov	r9, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ee8:	464d      	mov	r5, r9
 8002eea:	608d      	str	r5, [r1, #8]
        temp &= ~(iocurrent);
 8002eec:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eee:	2680      	movs	r6, #128	; 0x80
        temp &= ~(iocurrent);
 8002ef0:	43ed      	mvns	r5, r5
 8002ef2:	46ac      	mov	ip, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef4:	4655      	mov	r5, sl
 8002ef6:	0276      	lsls	r6, r6, #9
        temp = EXTI->IMR;
 8002ef8:	6839      	ldr	r1, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002efa:	4235      	tst	r5, r6
 8002efc:	d000      	beq.n	8002f00 <HAL_GPIO_Init+0xe4>
 8002efe:	e07d      	b.n	8002ffc <HAL_GPIO_Init+0x1e0>
        temp &= ~(iocurrent);
 8002f00:	4665      	mov	r5, ip
 8002f02:	4029      	ands	r1, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f04:	4655      	mov	r5, sl
        EXTI->IMR = temp;
 8002f06:	6039      	str	r1, [r7, #0]
        temp = EXTI->EMR;
 8002f08:	6879      	ldr	r1, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f0a:	03ad      	lsls	r5, r5, #14
 8002f0c:	d500      	bpl.n	8002f10 <HAL_GPIO_Init+0xf4>
 8002f0e:	e072      	b.n	8002ff6 <HAL_GPIO_Init+0x1da>
        temp &= ~(iocurrent);
 8002f10:	4665      	mov	r5, ip
 8002f12:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002f14:	6079      	str	r1, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f16:	4651      	mov	r1, sl
        temp = EXTI->RTSR;
 8002f18:	68bd      	ldr	r5, [r7, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f1a:	02c9      	lsls	r1, r1, #11
 8002f1c:	d468      	bmi.n	8002ff0 <HAL_GPIO_Init+0x1d4>
        temp &= ~(iocurrent);
 8002f1e:	4661      	mov	r1, ip
 8002f20:	400d      	ands	r5, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002f22:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f24:	4655      	mov	r5, sl
        temp = EXTI->FTSR;
 8002f26:	68f9      	ldr	r1, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f28:	02ad      	lsls	r5, r5, #10
 8002f2a:	d45d      	bmi.n	8002fe8 <HAL_GPIO_Init+0x1cc>
        temp &= ~(iocurrent);
 8002f2c:	4665      	mov	r5, ip
 8002f2e:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002f30:	60f9      	str	r1, [r7, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f32:	0021      	movs	r1, r4
      }
    }

    position++;
 8002f34:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f36:	40d9      	lsrs	r1, r3
 8002f38:	3202      	adds	r2, #2
 8002f3a:	2900      	cmp	r1, #0
 8002f3c:	d181      	bne.n	8002e42 <HAL_GPIO_Init+0x26>
  } 
}
 8002f3e:	b007      	add	sp, #28
 8002f40:	bcf0      	pop	{r4, r5, r6, r7}
 8002f42:	46bb      	mov	fp, r7
 8002f44:	46b2      	mov	sl, r6
 8002f46:	46a9      	mov	r9, r5
 8002f48:	46a0      	mov	r8, r4
 8002f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8002f4c:	6881      	ldr	r1, [r0, #8]
 8002f4e:	4689      	mov	r9, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f50:	2103      	movs	r1, #3
 8002f52:	4091      	lsls	r1, r2
 8002f54:	43ce      	mvns	r6, r1
 8002f56:	9602      	str	r6, [sp, #8]
 8002f58:	464e      	mov	r6, r9
 8002f5a:	438e      	bics	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f5c:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f5e:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f60:	68ce      	ldr	r6, [r1, #12]
 8002f62:	4096      	lsls	r6, r2
 8002f64:	46b0      	mov	r8, r6
 8002f66:	464e      	mov	r6, r9
 8002f68:	4641      	mov	r1, r8
 8002f6a:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8002f6c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f6e:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f70:	000e      	movs	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f72:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f74:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f76:	090d      	lsrs	r5, r1, #4
 8002f78:	2101      	movs	r1, #1
 8002f7a:	400d      	ands	r5, r1
 8002f7c:	409d      	lsls	r5, r3
 8002f7e:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002f80:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8002f82:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f84:	9902      	ldr	r1, [sp, #8]
 8002f86:	400d      	ands	r5, r1
 8002f88:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f8a:	9903      	ldr	r1, [sp, #12]
 8002f8c:	4646      	mov	r6, r8
 8002f8e:	688d      	ldr	r5, [r1, #8]
 8002f90:	4095      	lsls	r5, r2
 8002f92:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8002f94:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f96:	4666      	mov	r6, ip
 8002f98:	4665      	mov	r5, ip
 8002f9a:	4095      	lsls	r5, r2
 8002f9c:	2e02      	cmp	r6, #2
 8002f9e:	d000      	beq.n	8002fa2 <HAL_GPIO_Init+0x186>
 8002fa0:	e769      	b.n	8002e76 <HAL_GPIO_Init+0x5a>
        temp = GPIOx->AFR[position >> 3u];
 8002fa2:	08d9      	lsrs	r1, r3, #3
 8002fa4:	0089      	lsls	r1, r1, #2
 8002fa6:	468c      	mov	ip, r1
 8002fa8:	4484      	add	ip, r0
 8002faa:	4661      	mov	r1, ip
 8002fac:	6a09      	ldr	r1, [r1, #32]
 8002fae:	4689      	mov	r9, r1
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fb0:	2107      	movs	r1, #7
 8002fb2:	000e      	movs	r6, r1
 8002fb4:	401e      	ands	r6, r3
 8002fb6:	00b1      	lsls	r1, r6, #2
 8002fb8:	260f      	movs	r6, #15
 8002fba:	4688      	mov	r8, r1
 8002fbc:	408e      	lsls	r6, r1
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	43b1      	bics	r1, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fc2:	4646      	mov	r6, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fc4:	4689      	mov	r9, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fc6:	9903      	ldr	r1, [sp, #12]
 8002fc8:	6909      	ldr	r1, [r1, #16]
 8002fca:	40b1      	lsls	r1, r6
 8002fcc:	4688      	mov	r8, r1
 8002fce:	4649      	mov	r1, r9
 8002fd0:	4646      	mov	r6, r8
 8002fd2:	4331      	orrs	r1, r6
 8002fd4:	4689      	mov	r9, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002fd6:	4661      	mov	r1, ip
 8002fd8:	464e      	mov	r6, r9
 8002fda:	620e      	str	r6, [r1, #32]
 8002fdc:	e74b      	b.n	8002e76 <HAL_GPIO_Init+0x5a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fde:	2103      	movs	r1, #3
 8002fe0:	4091      	lsls	r1, r2
 8002fe2:	43c9      	mvns	r1, r1
 8002fe4:	9102      	str	r1, [sp, #8]
 8002fe6:	e7cc      	b.n	8002f82 <HAL_GPIO_Init+0x166>
          temp |= iocurrent;
 8002fe8:	9d01      	ldr	r5, [sp, #4]
 8002fea:	430d      	orrs	r5, r1
 8002fec:	0029      	movs	r1, r5
 8002fee:	e79f      	b.n	8002f30 <HAL_GPIO_Init+0x114>
          temp |= iocurrent;
 8002ff0:	9901      	ldr	r1, [sp, #4]
 8002ff2:	430d      	orrs	r5, r1
 8002ff4:	e795      	b.n	8002f22 <HAL_GPIO_Init+0x106>
          temp |= iocurrent;
 8002ff6:	9d01      	ldr	r5, [sp, #4]
 8002ff8:	4329      	orrs	r1, r5
 8002ffa:	e78b      	b.n	8002f14 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8002ffc:	9d01      	ldr	r5, [sp, #4]
 8002ffe:	4329      	orrs	r1, r5
 8003000:	e780      	b.n	8002f04 <HAL_GPIO_Init+0xe8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003002:	4666      	mov	r6, ip
 8003004:	2501      	movs	r5, #1
 8003006:	40b5      	lsls	r5, r6
 8003008:	464e      	mov	r6, r9
 800300a:	432e      	orrs	r6, r5
 800300c:	46b1      	mov	r9, r6
 800300e:	e76b      	b.n	8002ee8 <HAL_GPIO_Init+0xcc>
 8003010:	4666      	mov	r6, ip
 8003012:	2502      	movs	r5, #2
 8003014:	40b5      	lsls	r5, r6
 8003016:	464e      	mov	r6, r9
 8003018:	432e      	orrs	r6, r5
 800301a:	46b1      	mov	r9, r6
 800301c:	e764      	b.n	8002ee8 <HAL_GPIO_Init+0xcc>
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	40021000 	.word	0x40021000
 8003024:	40010400 	.word	0x40010400
 8003028:	40010000 	.word	0x40010000
 800302c:	48000400 	.word	0x48000400
 8003030:	48000800 	.word	0x48000800

08003034 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003034:	2a00      	cmp	r2, #0
 8003036:	d001      	beq.n	800303c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003038:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800303a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800303c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800303e:	e7fc      	b.n	800303a <HAL_GPIO_WritePin+0x6>

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	46ce      	mov	lr, r9
 8003044:	4647      	mov	r7, r8
 8003046:	b580      	push	{r7, lr}
 8003048:	0004      	movs	r4, r0
 800304a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800304c:	2800      	cmp	r0, #0
 800304e:	d100      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
 8003050:	e0ee      	b.n	8003230 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	6803      	ldr	r3, [r0, #0]
 8003054:	07da      	lsls	r2, r3, #31
 8003056:	d535      	bpl.n	80030c4 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003058:	210c      	movs	r1, #12
 800305a:	48c3      	ldr	r0, [pc, #780]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 800305c:	6842      	ldr	r2, [r0, #4]
 800305e:	400a      	ands	r2, r1
 8003060:	2a04      	cmp	r2, #4
 8003062:	d100      	bne.n	8003066 <HAL_RCC_OscConfig+0x26>
 8003064:	e101      	b.n	800326a <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003066:	6842      	ldr	r2, [r0, #4]
 8003068:	4011      	ands	r1, r2
 800306a:	2908      	cmp	r1, #8
 800306c:	d100      	bne.n	8003070 <HAL_RCC_OscConfig+0x30>
 800306e:	e0f8      	b.n	8003262 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003070:	6863      	ldr	r3, [r4, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d00f      	beq.n	8003096 <HAL_RCC_OscConfig+0x56>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d100      	bne.n	800307c <HAL_RCC_OscConfig+0x3c>
 800307a:	e11e      	b.n	80032ba <HAL_RCC_OscConfig+0x27a>
 800307c:	2b05      	cmp	r3, #5
 800307e:	d100      	bne.n	8003082 <HAL_RCC_OscConfig+0x42>
 8003080:	e1a7      	b.n	80033d2 <HAL_RCC_OscConfig+0x392>
 8003082:	4bb9      	ldr	r3, [pc, #740]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 8003084:	49b9      	ldr	r1, [pc, #740]	; (800336c <HAL_RCC_OscConfig+0x32c>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	49b8      	ldr	r1, [pc, #736]	; (8003370 <HAL_RCC_OscConfig+0x330>)
 8003090:	400a      	ands	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e005      	b.n	80030a2 <HAL_RCC_OscConfig+0x62>
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	4ab3      	ldr	r2, [pc, #716]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 800309a:	025b      	lsls	r3, r3, #9
 800309c:	6811      	ldr	r1, [r2, #0]
 800309e:	430b      	orrs	r3, r1
 80030a0:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7ff fce7 	bl	8002a74 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80030a8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	4faf      	ldr	r7, [pc, #700]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 80030ac:	02b6      	lsls	r6, r6, #10
 80030ae:	e005      	b.n	80030bc <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7ff fce0 	bl	8002a74 <HAL_GetTick>
 80030b4:	1b40      	subs	r0, r0, r5
 80030b6:	2864      	cmp	r0, #100	; 0x64
 80030b8:	d900      	bls.n	80030bc <HAL_RCC_OscConfig+0x7c>
 80030ba:	e0fc      	b.n	80032b6 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4233      	tst	r3, r6
 80030c0:	d0f6      	beq.n	80030b0 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	079a      	lsls	r2, r3, #30
 80030c6:	d529      	bpl.n	800311c <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030c8:	220c      	movs	r2, #12
 80030ca:	49a7      	ldr	r1, [pc, #668]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 80030cc:	6848      	ldr	r0, [r1, #4]
 80030ce:	4202      	tst	r2, r0
 80030d0:	d100      	bne.n	80030d4 <HAL_RCC_OscConfig+0x94>
 80030d2:	e0a6      	b.n	8003222 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030d4:	6848      	ldr	r0, [r1, #4]
 80030d6:	4002      	ands	r2, r0
 80030d8:	2a08      	cmp	r2, #8
 80030da:	d100      	bne.n	80030de <HAL_RCC_OscConfig+0x9e>
 80030dc:	e09d      	b.n	800321a <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030de:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e0:	4da1      	ldr	r5, [pc, #644]	; (8003368 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d100      	bne.n	80030e8 <HAL_RCC_OscConfig+0xa8>
 80030e6:	e11f      	b.n	8003328 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 80030e8:	2201      	movs	r2, #1
 80030ea:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ec:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80030ee:	4313      	orrs	r3, r2
 80030f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030f2:	f7ff fcbf 	bl	8002a74 <HAL_GetTick>
 80030f6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	e005      	b.n	8003106 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fa:	f7ff fcbb 	bl	8002a74 <HAL_GetTick>
 80030fe:	1b80      	subs	r0, r0, r6
 8003100:	2802      	cmp	r0, #2
 8003102:	d900      	bls.n	8003106 <HAL_RCC_OscConfig+0xc6>
 8003104:	e0d7      	b.n	80032b6 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	421f      	tst	r7, r3
 800310a:	d0f6      	beq.n	80030fa <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	21f8      	movs	r1, #248	; 0xf8
 800310e:	682a      	ldr	r2, [r5, #0]
 8003110:	6923      	ldr	r3, [r4, #16]
 8003112:	438a      	bics	r2, r1
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4313      	orrs	r3, r2
 8003118:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	071a      	lsls	r2, r3, #28
 800311e:	d42d      	bmi.n	800317c <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	075a      	lsls	r2, r3, #29
 8003122:	d544      	bpl.n	80031ae <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003124:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003128:	4b8f      	ldr	r3, [pc, #572]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 800312a:	0552      	lsls	r2, r2, #21
 800312c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800312e:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003130:	4211      	tst	r1, r2
 8003132:	d108      	bne.n	8003146 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	69d9      	ldr	r1, [r3, #28]
 8003136:	4311      	orrs	r1, r2
 8003138:	61d9      	str	r1, [r3, #28]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	401a      	ands	r2, r3
 800313e:	9201      	str	r2, [sp, #4]
 8003140:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	2780      	movs	r7, #128	; 0x80
 8003148:	4e8a      	ldr	r6, [pc, #552]	; (8003374 <HAL_RCC_OscConfig+0x334>)
 800314a:	007f      	lsls	r7, r7, #1
 800314c:	6833      	ldr	r3, [r6, #0]
 800314e:	423b      	tst	r3, r7
 8003150:	d100      	bne.n	8003154 <HAL_RCC_OscConfig+0x114>
 8003152:	e094      	b.n	800327e <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	68a3      	ldr	r3, [r4, #8]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d100      	bne.n	800315c <HAL_RCC_OscConfig+0x11c>
 800315a:	e0f8      	b.n	800334e <HAL_RCC_OscConfig+0x30e>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <HAL_RCC_OscConfig+0x122>
 8003160:	e0c4      	b.n	80032ec <HAL_RCC_OscConfig+0x2ac>
 8003162:	2b05      	cmp	r3, #5
 8003164:	d100      	bne.n	8003168 <HAL_RCC_OscConfig+0x128>
 8003166:	e140      	b.n	80033ea <HAL_RCC_OscConfig+0x3aa>
 8003168:	2101      	movs	r1, #1
 800316a:	4b7f      	ldr	r3, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 800316c:	6a1a      	ldr	r2, [r3, #32]
 800316e:	438a      	bics	r2, r1
 8003170:	621a      	str	r2, [r3, #32]
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	3103      	adds	r1, #3
 8003176:	438a      	bics	r2, r1
 8003178:	621a      	str	r2, [r3, #32]
 800317a:	e0ec      	b.n	8003356 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800317c:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800317e:	4d7a      	ldr	r5, [pc, #488]	; (8003368 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003184:	2201      	movs	r2, #1
 8003186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003188:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800318a:	4313      	orrs	r3, r2
 800318c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800318e:	f7ff fc71 	bl	8002a74 <HAL_GetTick>
 8003192:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003194:	e005      	b.n	80031a2 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003196:	f7ff fc6d 	bl	8002a74 <HAL_GetTick>
 800319a:	1b80      	subs	r0, r0, r6
 800319c:	2802      	cmp	r0, #2
 800319e:	d900      	bls.n	80031a2 <HAL_RCC_OscConfig+0x162>
 80031a0:	e089      	b.n	80032b6 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80031a4:	421f      	tst	r7, r3
 80031a6:	d0f6      	beq.n	8003196 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	075a      	lsls	r2, r3, #29
 80031ac:	d4ba      	bmi.n	8003124 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80031ae:	06db      	lsls	r3, r3, #27
 80031b0:	d512      	bpl.n	80031d8 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80031b2:	6963      	ldr	r3, [r4, #20]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d100      	bne.n	80031ba <HAL_RCC_OscConfig+0x17a>
 80031b8:	e13d      	b.n	8003436 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80031ba:	3305      	adds	r3, #5
 80031bc:	d000      	beq.n	80031c0 <HAL_RCC_OscConfig+0x180>
 80031be:	e0e9      	b.n	8003394 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80031c0:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031c2:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 80031c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80031c8:	438b      	bics	r3, r1
 80031ca:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031cc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80031ce:	69a3      	ldr	r3, [r4, #24]
 80031d0:	4381      	bics	r1, r0
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d8:	6a23      	ldr	r3, [r4, #32]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01b      	beq.n	8003216 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031de:	220c      	movs	r2, #12
 80031e0:	4d61      	ldr	r5, [pc, #388]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 80031e2:	6869      	ldr	r1, [r5, #4]
 80031e4:	400a      	ands	r2, r1
 80031e6:	2a08      	cmp	r2, #8
 80031e8:	d100      	bne.n	80031ec <HAL_RCC_OscConfig+0x1ac>
 80031ea:	e108      	b.n	80033fe <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d100      	bne.n	80031f2 <HAL_RCC_OscConfig+0x1b2>
 80031f0:	e13f      	b.n	8003472 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	682b      	ldr	r3, [r5, #0]
 80031f4:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80031f8:	4013      	ands	r3, r2
 80031fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80031fc:	f7ff fc3a 	bl	8002a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003202:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	e004      	b.n	8003210 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003206:	f7ff fc35 	bl	8002a74 <HAL_GetTick>
 800320a:	1b00      	subs	r0, r0, r4
 800320c:	2802      	cmp	r0, #2
 800320e:	d852      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	4233      	tst	r3, r6
 8003214:	d1f7      	bne.n	8003206 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8003216:	2000      	movs	r0, #0
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800321a:	684a      	ldr	r2, [r1, #4]
 800321c:	03d2      	lsls	r2, r2, #15
 800321e:	d500      	bpl.n	8003222 <HAL_RCC_OscConfig+0x1e2>
 8003220:	e75d      	b.n	80030de <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	4a51      	ldr	r2, [pc, #324]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	0792      	lsls	r2, r2, #30
 8003228:	d539      	bpl.n	800329e <HAL_RCC_OscConfig+0x25e>
 800322a:	68e2      	ldr	r2, [r4, #12]
 800322c:	2a01      	cmp	r2, #1
 800322e:	d036      	beq.n	800329e <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8003230:	2001      	movs	r0, #1
}
 8003232:	b003      	add	sp, #12
 8003234:	bcc0      	pop	{r6, r7}
 8003236:	46b9      	mov	r9, r7
 8003238:	46b0      	mov	r8, r6
 800323a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 800323c:	2201      	movs	r2, #1
 800323e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003242:	4393      	bics	r3, r2
 8003244:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003246:	f7ff fc15 	bl	8002a74 <HAL_GetTick>
 800324a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	e004      	b.n	8003258 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324e:	f7ff fc11 	bl	8002a74 <HAL_GetTick>
 8003252:	1b80      	subs	r0, r0, r6
 8003254:	2802      	cmp	r0, #2
 8003256:	d82e      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800325a:	421f      	tst	r7, r3
 800325c:	d1f7      	bne.n	800324e <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	e7a3      	b.n	80031aa <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003262:	6842      	ldr	r2, [r0, #4]
 8003264:	03d2      	lsls	r2, r2, #15
 8003266:	d400      	bmi.n	800326a <HAL_RCC_OscConfig+0x22a>
 8003268:	e702      	b.n	8003070 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326a:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	0392      	lsls	r2, r2, #14
 8003270:	d400      	bmi.n	8003274 <HAL_RCC_OscConfig+0x234>
 8003272:	e727      	b.n	80030c4 <HAL_RCC_OscConfig+0x84>
 8003274:	6862      	ldr	r2, [r4, #4]
 8003276:	2a00      	cmp	r2, #0
 8003278:	d000      	beq.n	800327c <HAL_RCC_OscConfig+0x23c>
 800327a:	e723      	b.n	80030c4 <HAL_RCC_OscConfig+0x84>
 800327c:	e7d8      	b.n	8003230 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327e:	6833      	ldr	r3, [r6, #0]
 8003280:	433b      	orrs	r3, r7
 8003282:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003284:	f7ff fbf6 	bl	8002a74 <HAL_GetTick>
 8003288:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	e004      	b.n	8003296 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7ff fbf2 	bl	8002a74 <HAL_GetTick>
 8003290:	1b40      	subs	r0, r0, r5
 8003292:	2864      	cmp	r0, #100	; 0x64
 8003294:	d80f      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	6833      	ldr	r3, [r6, #0]
 8003298:	423b      	tst	r3, r7
 800329a:	d0f7      	beq.n	800328c <HAL_RCC_OscConfig+0x24c>
 800329c:	e75a      	b.n	8003154 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	25f8      	movs	r5, #248	; 0xf8
 80032a0:	4831      	ldr	r0, [pc, #196]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 80032a2:	6922      	ldr	r2, [r4, #16]
 80032a4:	6801      	ldr	r1, [r0, #0]
 80032a6:	00d2      	lsls	r2, r2, #3
 80032a8:	43a9      	bics	r1, r5
 80032aa:	430a      	orrs	r2, r1
 80032ac:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	071a      	lsls	r2, r3, #28
 80032b0:	d400      	bmi.n	80032b4 <HAL_RCC_OscConfig+0x274>
 80032b2:	e735      	b.n	8003120 <HAL_RCC_OscConfig+0xe0>
 80032b4:	e762      	b.n	800317c <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 80032b6:	2003      	movs	r0, #3
 80032b8:	e7bb      	b.n	8003232 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ba:	4d2b      	ldr	r5, [pc, #172]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 80032bc:	4a2b      	ldr	r2, [pc, #172]	; (800336c <HAL_RCC_OscConfig+0x32c>)
 80032be:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c0:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	4013      	ands	r3, r2
 80032c4:	602b      	str	r3, [r5, #0]
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	4a29      	ldr	r2, [pc, #164]	; (8003370 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	4013      	ands	r3, r2
 80032ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032d0:	f7ff fbd0 	bl	8002a74 <HAL_GetTick>
 80032d4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e004      	b.n	80032e2 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d8:	f7ff fbcc 	bl	8002a74 <HAL_GetTick>
 80032dc:	1b80      	subs	r0, r0, r6
 80032de:	2864      	cmp	r0, #100	; 0x64
 80032e0:	d8e9      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	682b      	ldr	r3, [r5, #0]
 80032e4:	423b      	tst	r3, r7
 80032e6:	d1f7      	bne.n	80032d8 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	e6eb      	b.n	80030c4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	2201      	movs	r2, #1
 80032ee:	4e1e      	ldr	r6, [pc, #120]	; (8003368 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	4d22      	ldr	r5, [pc, #136]	; (800337c <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f2:	6a33      	ldr	r3, [r6, #32]
 80032f4:	4393      	bics	r3, r2
 80032f6:	6233      	str	r3, [r6, #32]
 80032f8:	6a33      	ldr	r3, [r6, #32]
 80032fa:	3203      	adds	r2, #3
 80032fc:	4393      	bics	r3, r2
 80032fe:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003300:	f7ff fbb8 	bl	8002a74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8003306:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	4698      	mov	r8, r3
 800330a:	e004      	b.n	8003316 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7ff fbb2 	bl	8002a74 <HAL_GetTick>
 8003310:	1bc0      	subs	r0, r0, r7
 8003312:	42a8      	cmp	r0, r5
 8003314:	d8cf      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003316:	4642      	mov	r2, r8
 8003318:	6a33      	ldr	r3, [r6, #32]
 800331a:	421a      	tst	r2, r3
 800331c:	d1f6      	bne.n	800330c <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 800331e:	464b      	mov	r3, r9
 8003320:	2b01      	cmp	r3, #1
 8003322:	d04f      	beq.n	80033c4 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	e742      	b.n	80031ae <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8003328:	2201      	movs	r2, #1
 800332a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800332e:	4393      	bics	r3, r2
 8003330:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003332:	f7ff fb9f 	bl	8002a74 <HAL_GetTick>
 8003336:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003338:	e004      	b.n	8003344 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333a:	f7ff fb9b 	bl	8002a74 <HAL_GetTick>
 800333e:	1b80      	subs	r0, r0, r6
 8003340:	2802      	cmp	r0, #2
 8003342:	d8b8      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	421f      	tst	r7, r3
 8003348:	d1f7      	bne.n	800333a <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	e6e6      	b.n	800311c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800334e:	4906      	ldr	r1, [pc, #24]	; (8003368 <HAL_RCC_OscConfig+0x328>)
 8003350:	6a0a      	ldr	r2, [r1, #32]
 8003352:	4313      	orrs	r3, r2
 8003354:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003356:	f7ff fb8d 	bl	8002a74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 800335c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335e:	4698      	mov	r8, r3
 8003360:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	4d06      	ldr	r5, [pc, #24]	; (800337c <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	e011      	b.n	800338a <HAL_RCC_OscConfig+0x34a>
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	40021000 	.word	0x40021000
 800336c:	fffeffff 	.word	0xfffeffff
 8003370:	fffbffff 	.word	0xfffbffff
 8003374:	40007000 	.word	0x40007000
 8003378:	feffffff 	.word	0xfeffffff
 800337c:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7ff fb78 	bl	8002a74 <HAL_GetTick>
 8003384:	1b80      	subs	r0, r0, r6
 8003386:	42a8      	cmp	r0, r5
 8003388:	d895      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4643      	mov	r3, r8
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	421f      	tst	r7, r3
 8003390:	d0f6      	beq.n	8003380 <HAL_RCC_OscConfig+0x340>
 8003392:	e7c4      	b.n	800331e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003394:	2204      	movs	r2, #4
 8003396:	4d53      	ldr	r5, [pc, #332]	; (80034e4 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003398:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800339a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800339c:	4313      	orrs	r3, r2
 800339e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80033a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80033a2:	3a03      	subs	r2, #3
 80033a4:	4393      	bics	r3, r2
 80033a6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80033a8:	f7ff fb64 	bl	8002a74 <HAL_GetTick>
 80033ac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033ae:	e005      	b.n	80033bc <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033b0:	f7ff fb60 	bl	8002a74 <HAL_GetTick>
 80033b4:	1b80      	subs	r0, r0, r6
 80033b6:	2802      	cmp	r0, #2
 80033b8:	d900      	bls.n	80033bc <HAL_RCC_OscConfig+0x37c>
 80033ba:	e77c      	b.n	80032b6 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80033be:	421f      	tst	r7, r3
 80033c0:	d1f6      	bne.n	80033b0 <HAL_RCC_OscConfig+0x370>
 80033c2:	e709      	b.n	80031d8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c4:	4a47      	ldr	r2, [pc, #284]	; (80034e4 <HAL_RCC_OscConfig+0x4a4>)
 80033c6:	4948      	ldr	r1, [pc, #288]	; (80034e8 <HAL_RCC_OscConfig+0x4a8>)
 80033c8:	69d3      	ldr	r3, [r2, #28]
 80033ca:	400b      	ands	r3, r1
 80033cc:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	e6ed      	b.n	80031ae <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <HAL_RCC_OscConfig+0x4a4>)
 80033d6:	02d2      	lsls	r2, r2, #11
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	0252      	lsls	r2, r2, #9
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e65b      	b.n	80030a2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ea:	2104      	movs	r1, #4
 80033ec:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <HAL_RCC_OscConfig+0x4a4>)
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	621a      	str	r2, [r3, #32]
 80033f4:	6a1a      	ldr	r2, [r3, #32]
 80033f6:	3903      	subs	r1, #3
 80033f8:	430a      	orrs	r2, r1
 80033fa:	621a      	str	r2, [r3, #32]
 80033fc:	e7ab      	b.n	8003356 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d100      	bne.n	8003404 <HAL_RCC_OscConfig+0x3c4>
 8003402:	e715      	b.n	8003230 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003404:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8003406:	686a      	ldr	r2, [r5, #4]
        pll_config2 = RCC->CFGR2;
 8003408:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800340c:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 800340e:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	4013      	ands	r3, r2
 8003412:	42ab      	cmp	r3, r5
 8003414:	d000      	beq.n	8003418 <HAL_RCC_OscConfig+0x3d8>
 8003416:	e70c      	b.n	8003232 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003418:	230f      	movs	r3, #15
 800341a:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800341c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800341e:	428b      	cmp	r3, r1
 8003420:	d000      	beq.n	8003424 <HAL_RCC_OscConfig+0x3e4>
 8003422:	e706      	b.n	8003232 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003424:	20f0      	movs	r0, #240	; 0xf0
 8003426:	0380      	lsls	r0, r0, #14
 8003428:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800342a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800342c:	1a10      	subs	r0, r2, r0
 800342e:	1e43      	subs	r3, r0, #1
 8003430:	4198      	sbcs	r0, r3
  return HAL_OK;
 8003432:	b2c0      	uxtb	r0, r0
 8003434:	e6fd      	b.n	8003232 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003436:	2104      	movs	r1, #4
 8003438:	4d2a      	ldr	r5, [pc, #168]	; (80034e4 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800343a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800343c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800343e:	430a      	orrs	r2, r1
 8003440:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003442:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003444:	4313      	orrs	r3, r2
 8003446:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003448:	f7ff fb14 	bl	8002a74 <HAL_GetTick>
 800344c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800344e:	e005      	b.n	800345c <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003450:	f7ff fb10 	bl	8002a74 <HAL_GetTick>
 8003454:	1b80      	subs	r0, r0, r6
 8003456:	2802      	cmp	r0, #2
 8003458:	d900      	bls.n	800345c <HAL_RCC_OscConfig+0x41c>
 800345a:	e72c      	b.n	80032b6 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800345c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800345e:	421f      	tst	r7, r3
 8003460:	d0f6      	beq.n	8003450 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003462:	21f8      	movs	r1, #248	; 0xf8
 8003464:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003466:	69a3      	ldr	r3, [r4, #24]
 8003468:	438a      	bics	r2, r1
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4313      	orrs	r3, r2
 800346e:	636b      	str	r3, [r5, #52]	; 0x34
 8003470:	e6b2      	b.n	80031d8 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8003472:	682b      	ldr	r3, [r5, #0]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003476:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003478:	4013      	ands	r3, r2
 800347a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800347c:	f7ff fafa 	bl	8002a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003482:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003484:	e005      	b.n	8003492 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003486:	f7ff faf5 	bl	8002a74 <HAL_GetTick>
 800348a:	1b80      	subs	r0, r0, r6
 800348c:	2802      	cmp	r0, #2
 800348e:	d900      	bls.n	8003492 <HAL_RCC_OscConfig+0x452>
 8003490:	e711      	b.n	80032b6 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003492:	682b      	ldr	r3, [r5, #0]
 8003494:	423b      	tst	r3, r7
 8003496:	d1f6      	bne.n	8003486 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003498:	220f      	movs	r2, #15
 800349a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800349c:	4e11      	ldr	r6, [pc, #68]	; (80034e4 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349e:	4393      	bics	r3, r2
 80034a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034a2:	4313      	orrs	r3, r2
 80034a4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80034a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034aa:	686a      	ldr	r2, [r5, #4]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	4910      	ldr	r1, [pc, #64]	; (80034f0 <HAL_RCC_OscConfig+0x4b0>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	4313      	orrs	r3, r2
 80034b4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	682a      	ldr	r2, [r5, #0]
 80034ba:	045b      	lsls	r3, r3, #17
 80034bc:	4313      	orrs	r3, r2
 80034be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034c0:	f7ff fad8 	bl	8002a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c4:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80034c6:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c8:	04ad      	lsls	r5, r5, #18
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7ff fad2 	bl	8002a74 <HAL_GetTick>
 80034d0:	1b00      	subs	r0, r0, r4
 80034d2:	2802      	cmp	r0, #2
 80034d4:	d900      	bls.n	80034d8 <HAL_RCC_OscConfig+0x498>
 80034d6:	e6ee      	b.n	80032b6 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d8:	6833      	ldr	r3, [r6, #0]
 80034da:	422b      	tst	r3, r5
 80034dc:	d0f6      	beq.n	80034cc <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 80034de:	2000      	movs	r0, #0
 80034e0:	e6a7      	b.n	8003232 <HAL_RCC_OscConfig+0x1f2>
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	40021000 	.word	0x40021000
 80034e8:	efffffff 	.word	0xefffffff
 80034ec:	feffffff 	.word	0xfeffffff
 80034f0:	ffc2ffff 	.word	0xffc2ffff

080034f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	46ce      	mov	lr, r9
 80034f8:	4647      	mov	r7, r8
 80034fa:	b580      	push	{r7, lr}
 80034fc:	0004      	movs	r4, r0
 80034fe:	000d      	movs	r5, r1
 8003500:	b089      	sub	sp, #36	; 0x24
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003502:	2800      	cmp	r0, #0
 8003504:	d00d      	beq.n	8003522 <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003506:	2301      	movs	r3, #1
 8003508:	4950      	ldr	r1, [pc, #320]	; (800364c <HAL_RCC_ClockConfig+0x158>)
 800350a:	680a      	ldr	r2, [r1, #0]
 800350c:	401a      	ands	r2, r3
 800350e:	42aa      	cmp	r2, r5
 8003510:	d20d      	bcs.n	800352e <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	680a      	ldr	r2, [r1, #0]
 8003514:	439a      	bics	r2, r3
 8003516:	432a      	orrs	r2, r5
 8003518:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	680a      	ldr	r2, [r1, #0]
 800351c:	4013      	ands	r3, r2
 800351e:	42ab      	cmp	r3, r5
 8003520:	d005      	beq.n	800352e <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8003522:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8003524:	b009      	add	sp, #36	; 0x24
 8003526:	bcc0      	pop	{r6, r7}
 8003528:	46b9      	mov	r9, r7
 800352a:	46b0      	mov	r8, r6
 800352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	079a      	lsls	r2, r3, #30
 8003532:	d50e      	bpl.n	8003552 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	075a      	lsls	r2, r3, #29
 8003536:	d505      	bpl.n	8003544 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003538:	22e0      	movs	r2, #224	; 0xe0
 800353a:	4945      	ldr	r1, [pc, #276]	; (8003650 <HAL_RCC_ClockConfig+0x15c>)
 800353c:	00d2      	lsls	r2, r2, #3
 800353e:	6848      	ldr	r0, [r1, #4]
 8003540:	4302      	orrs	r2, r0
 8003542:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	20f0      	movs	r0, #240	; 0xf0
 8003546:	4942      	ldr	r1, [pc, #264]	; (8003650 <HAL_RCC_ClockConfig+0x15c>)
 8003548:	684a      	ldr	r2, [r1, #4]
 800354a:	4382      	bics	r2, r0
 800354c:	68a0      	ldr	r0, [r4, #8]
 800354e:	4302      	orrs	r2, r0
 8003550:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003552:	07db      	lsls	r3, r3, #31
 8003554:	d522      	bpl.n	800359c <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003558:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355c:	2a01      	cmp	r2, #1
 800355e:	d067      	beq.n	8003630 <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003560:	2a02      	cmp	r2, #2
 8003562:	d062      	beq.n	800362a <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	079b      	lsls	r3, r3, #30
 8003566:	d5dc      	bpl.n	8003522 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003568:	2103      	movs	r1, #3
 800356a:	4e39      	ldr	r6, [pc, #228]	; (8003650 <HAL_RCC_ClockConfig+0x15c>)
 800356c:	6873      	ldr	r3, [r6, #4]
 800356e:	438b      	bics	r3, r1
 8003570:	4313      	orrs	r3, r2
 8003572:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003574:	f7ff fa7e 	bl	8002a74 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003578:	230c      	movs	r3, #12
 800357a:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	4b35      	ldr	r3, [pc, #212]	; (8003654 <HAL_RCC_ClockConfig+0x160>)
    tickstart = HAL_GetTick();
 800357e:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	e004      	b.n	800358e <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003584:	f7ff fa76 	bl	8002a74 <HAL_GetTick>
 8003588:	1bc0      	subs	r0, r0, r7
 800358a:	4548      	cmp	r0, r9
 800358c:	d853      	bhi.n	8003636 <HAL_RCC_ClockConfig+0x142>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	4643      	mov	r3, r8
 8003590:	6872      	ldr	r2, [r6, #4]
 8003592:	401a      	ands	r2, r3
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1f3      	bne.n	8003584 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	2101      	movs	r1, #1
 800359e:	4a2b      	ldr	r2, [pc, #172]	; (800364c <HAL_RCC_ClockConfig+0x158>)
 80035a0:	6813      	ldr	r3, [r2, #0]
 80035a2:	400b      	ands	r3, r1
 80035a4:	42ab      	cmp	r3, r5
 80035a6:	d905      	bls.n	80035b4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a8:	6813      	ldr	r3, [r2, #0]
 80035aa:	438b      	bics	r3, r1
 80035ac:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	4219      	tst	r1, r3
 80035b2:	d1b6      	bne.n	8003522 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	075b      	lsls	r3, r3, #29
 80035b8:	d506      	bpl.n	80035c8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035ba:	4a25      	ldr	r2, [pc, #148]	; (8003650 <HAL_RCC_ClockConfig+0x15c>)
 80035bc:	4926      	ldr	r1, [pc, #152]	; (8003658 <HAL_RCC_ClockConfig+0x164>)
 80035be:	6853      	ldr	r3, [r2, #4]
 80035c0:	400b      	ands	r3, r1
 80035c2:	68e1      	ldr	r1, [r4, #12]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80035c8:	4669      	mov	r1, sp
 80035ca:	000a      	movs	r2, r1
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_RCC_ClockConfig+0x168>)
 80035ce:	cb31      	ldmia	r3!, {r0, r4, r5}
 80035d0:	c231      	stmia	r2!, {r0, r4, r5}
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80035d6:	aa04      	add	r2, sp, #16
 80035d8:	0010      	movs	r0, r2
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_RCC_ClockConfig+0x16c>)
 80035dc:	cb70      	ldmia	r3!, {r4, r5, r6}
 80035de:	c070      	stmia	r0!, {r4, r5, r6}
 80035e0:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80035e2:	4d1b      	ldr	r5, [pc, #108]	; (8003650 <HAL_RCC_ClockConfig+0x15c>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80035e4:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e6:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80035e8:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80035ea:	4003      	ands	r3, r0
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d00e      	beq.n	800360e <HAL_RCC_ClockConfig+0x11a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f0:	481c      	ldr	r0, [pc, #112]	; (8003664 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <HAL_RCC_ClockConfig+0x15c>)
 80035f4:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <HAL_RCC_ClockConfig+0x174>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	0f1b      	lsrs	r3, r3, #28
 80035fc:	5cd3      	ldrb	r3, [r2, r3]
 80035fe:	40d8      	lsrs	r0, r3
 8003600:	4b1a      	ldr	r3, [pc, #104]	; (800366c <HAL_RCC_ClockConfig+0x178>)
 8003602:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003604:	2002      	movs	r0, #2
 8003606:	f7ff f9f3 	bl	80029f0 <HAL_InitTick>
  return HAL_OK;
 800360a:	2000      	movs	r0, #0
 800360c:	e78a      	b.n	8003524 <HAL_RCC_ClockConfig+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800360e:	3307      	adds	r3, #7
 8003610:	0c84      	lsrs	r4, r0, #18
 8003612:	401c      	ands	r4, r3
 8003614:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003616:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003618:	400b      	ands	r3, r1
 800361a:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800361c:	03c3      	lsls	r3, r0, #15
 800361e:	d50c      	bpl.n	800363a <HAL_RCC_ClockConfig+0x146>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003620:	4810      	ldr	r0, [pc, #64]	; (8003664 <HAL_RCC_ClockConfig+0x170>)
 8003622:	f7fc fd71 	bl	8000108 <__udivsi3>
 8003626:	4360      	muls	r0, r4
 8003628:	e7e3      	b.n	80035f2 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362a:	019b      	lsls	r3, r3, #6
 800362c:	d49c      	bmi.n	8003568 <HAL_RCC_ClockConfig+0x74>
 800362e:	e778      	b.n	8003522 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003630:	039b      	lsls	r3, r3, #14
 8003632:	d499      	bmi.n	8003568 <HAL_RCC_ClockConfig+0x74>
 8003634:	e775      	b.n	8003522 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003636:	2003      	movs	r0, #3
 8003638:	e774      	b.n	8003524 <HAL_RCC_ClockConfig+0x30>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800363a:	0163      	lsls	r3, r4, #5
 800363c:	1b1b      	subs	r3, r3, r4
 800363e:	0198      	lsls	r0, r3, #6
 8003640:	1ac0      	subs	r0, r0, r3
 8003642:	00c0      	lsls	r0, r0, #3
 8003644:	1900      	adds	r0, r0, r4
 8003646:	0200      	lsls	r0, r0, #8
 8003648:	e7d3      	b.n	80035f2 <HAL_RCC_ClockConfig+0xfe>
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	40022000 	.word	0x40022000
 8003650:	40021000 	.word	0x40021000
 8003654:	00001388 	.word	0x00001388
 8003658:	fffff8ff 	.word	0xfffff8ff
 800365c:	08007424 	.word	0x08007424
 8003660:	08007438 	.word	0x08007438
 8003664:	007a1200 	.word	0x007a1200
 8003668:	0800740c 	.word	0x0800740c
 800366c:	200006d8 	.word	0x200006d8

08003670 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	4a03      	ldr	r2, [pc, #12]	; (8003680 <HAL_RCC_EnableCSS+0x10>)
 8003674:	031b      	lsls	r3, r3, #12
 8003676:	6811      	ldr	r1, [r2, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	6013      	str	r3, [r2, #0]
}
 800367c:	4770      	bx	lr
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	40021000 	.word	0x40021000

08003684 <HAL_RCC_GetSysClockFreq>:
{
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003688:	4669      	mov	r1, sp
 800368a:	000a      	movs	r2, r1
 800368c:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x60>)
 800368e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003690:	c231      	stmia	r2!, {r0, r4, r5}
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6013      	str	r3, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003696:	aa04      	add	r2, sp, #16
 8003698:	0010      	movs	r0, r2
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x64>)
 800369c:	cb70      	ldmia	r3!, {r4, r5, r6}
 800369e:	c070      	stmia	r0!, {r4, r5, r6}
 80036a0:	681b      	ldr	r3, [r3, #0]
  tmpreg = RCC->CFGR;
 80036a2:	4d12      	ldr	r5, [pc, #72]	; (80036ec <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036a4:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 80036a6:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80036a8:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80036aa:	4003      	ands	r3, r0
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d002      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
 80036b0:	480f      	ldr	r0, [pc, #60]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80036b2:	b008      	add	sp, #32
 80036b4:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80036b6:	3307      	adds	r3, #7
 80036b8:	0c84      	lsrs	r4, r0, #18
 80036ba:	401c      	ands	r4, r3
 80036bc:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80036be:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80036c0:	400b      	ands	r3, r1
 80036c2:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036c4:	03c3      	lsls	r3, r0, #15
 80036c6:	d504      	bpl.n	80036d2 <HAL_RCC_GetSysClockFreq+0x4e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036c8:	4809      	ldr	r0, [pc, #36]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80036ca:	f7fc fd1d 	bl	8000108 <__udivsi3>
 80036ce:	4360      	muls	r0, r4
 80036d0:	e7ef      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036d2:	0163      	lsls	r3, r4, #5
 80036d4:	1b1b      	subs	r3, r3, r4
 80036d6:	0198      	lsls	r0, r3, #6
 80036d8:	1ac0      	subs	r0, r0, r3
 80036da:	00c0      	lsls	r0, r0, #3
 80036dc:	1900      	adds	r0, r0, r4
 80036de:	0200      	lsls	r0, r0, #8
 80036e0:	e7e7      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x2e>
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	08007424 	.word	0x08007424
 80036e8:	08007438 	.word	0x08007438
 80036ec:	40021000 	.word	0x40021000
 80036f0:	007a1200 	.word	0x007a1200

080036f4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80036f4:	4b01      	ldr	r3, [pc, #4]	; (80036fc <HAL_RCC_GetHCLKFreq+0x8>)
 80036f6:	6818      	ldr	r0, [r3, #0]
}
 80036f8:	4770      	bx	lr
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	200006d8 	.word	0x200006d8

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003702:	4a05      	ldr	r2, [pc, #20]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	055b      	lsls	r3, r3, #21
 8003708:	0f5b      	lsrs	r3, r3, #29
 800370a:	5cd3      	ldrb	r3, [r2, r3]
 800370c:	4a03      	ldr	r2, [pc, #12]	; (800371c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800370e:	6810      	ldr	r0, [r2, #0]
 8003710:	40d8      	lsrs	r0, r3
}    
 8003712:	4770      	bx	lr
 8003714:	40021000 	.word	0x40021000
 8003718:	0800741c 	.word	0x0800741c
 800371c:	200006d8 	.word	0x200006d8

08003720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	46ce      	mov	lr, r9
 8003724:	4647      	mov	r7, r8
 8003726:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003728:	6803      	ldr	r3, [r0, #0]
{
 800372a:	0004      	movs	r4, r0
 800372c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800372e:	03da      	lsls	r2, r3, #15
 8003730:	d530      	bpl.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003736:	0552      	lsls	r2, r2, #21
 8003738:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373c:	4211      	tst	r1, r2
 800373e:	d041      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	2680      	movs	r6, #128	; 0x80
 8003742:	4d41      	ldr	r5, [pc, #260]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003744:	0076      	lsls	r6, r6, #1
 8003746:	682b      	ldr	r3, [r5, #0]
 8003748:	4233      	tst	r3, r6
 800374a:	d049      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800374c:	4d3d      	ldr	r5, [pc, #244]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800374e:	22c0      	movs	r2, #192	; 0xc0
 8003750:	6a2b      	ldr	r3, [r5, #32]
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	0018      	movs	r0, r3
 8003756:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003758:	4213      	tst	r3, r2
 800375a:	d063      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800375c:	6861      	ldr	r1, [r4, #4]
 800375e:	400a      	ands	r2, r1
 8003760:	4282      	cmp	r2, r0
 8003762:	d00e      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003764:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003766:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003768:	6a2e      	ldr	r6, [r5, #32]
 800376a:	0252      	lsls	r2, r2, #9
 800376c:	4332      	orrs	r2, r6
 800376e:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003770:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003772:	4b36      	ldr	r3, [pc, #216]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003774:	4e36      	ldr	r6, [pc, #216]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003776:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003778:	4032      	ands	r2, r6
 800377a:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800377c:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800377e:	07c3      	lsls	r3, r0, #31
 8003780:	d43f      	bmi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003782:	4a30      	ldr	r2, [pc, #192]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003784:	4831      	ldr	r0, [pc, #196]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003786:	6a13      	ldr	r3, [r2, #32]
 8003788:	4003      	ands	r3, r0
 800378a:	430b      	orrs	r3, r1
 800378c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800378e:	2f01      	cmp	r7, #1
 8003790:	d051      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	07da      	lsls	r2, r3, #31
 8003796:	d506      	bpl.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003798:	2003      	movs	r0, #3
 800379a:	492a      	ldr	r1, [pc, #168]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800379c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800379e:	4382      	bics	r2, r0
 80037a0:	68a0      	ldr	r0, [r4, #8]
 80037a2:	4302      	orrs	r2, r0
 80037a4:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80037a6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a8:	069b      	lsls	r3, r3, #26
 80037aa:	d506      	bpl.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ac:	2110      	movs	r1, #16
 80037ae:	4a25      	ldr	r2, [pc, #148]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80037b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80037b2:	438b      	bics	r3, r1
 80037b4:	68e1      	ldr	r1, [r4, #12]
 80037b6:	430b      	orrs	r3, r1
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80037ba:	b003      	add	sp, #12
 80037bc:	bcc0      	pop	{r6, r7}
 80037be:	46b9      	mov	r9, r7
 80037c0:	46b0      	mov	r8, r6
 80037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	4d1f      	ldr	r5, [pc, #124]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4311      	orrs	r1, r2
 80037cc:	61d9      	str	r1, [r3, #28]
 80037ce:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	401a      	ands	r2, r3
 80037d4:	9201      	str	r2, [sp, #4]
 80037d6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 80037da:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	4233      	tst	r3, r6
 80037de:	d1b5      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	4333      	orrs	r3, r6
 80037e4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80037e6:	f7ff f945 	bl	8002a74 <HAL_GetTick>
 80037ea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	4233      	tst	r3, r6
 80037f0:	d1ac      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f2:	f7ff f93f 	bl	8002a74 <HAL_GetTick>
 80037f6:	4643      	mov	r3, r8
 80037f8:	1ac0      	subs	r0, r0, r3
 80037fa:	2864      	cmp	r0, #100	; 0x64
 80037fc:	d9f6      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80037fe:	2003      	movs	r0, #3
 8003800:	e7db      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003802:	f7ff f937 	bl	8002a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	2302      	movs	r3, #2
 8003808:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 800380c:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003810:	e004      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7ff f92f 	bl	8002a74 <HAL_GetTick>
 8003816:	1b80      	subs	r0, r0, r6
 8003818:	4548      	cmp	r0, r9
 800381a:	d8f0      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	4642      	mov	r2, r8
 800381e:	6a2b      	ldr	r3, [r5, #32]
 8003820:	421a      	tst	r2, r3
 8003822:	d0f6      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003824:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003826:	4809      	ldr	r0, [pc, #36]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003828:	6a13      	ldr	r3, [r2, #32]
 800382a:	6861      	ldr	r1, [r4, #4]
 800382c:	4003      	ands	r3, r0
 800382e:	430b      	orrs	r3, r1
 8003830:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8003832:	2f01      	cmp	r7, #1
 8003834:	d1ad      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003836:	69d3      	ldr	r3, [r2, #28]
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800383a:	400b      	ands	r3, r1
 800383c:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	e7a8      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	fffffcff 	.word	0xfffffcff
 8003850:	fffeffff 	.word	0xfffeffff
 8003854:	00001388 	.word	0x00001388
 8003858:	efffffff 	.word	0xefffffff

0800385c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b510      	push	{r4, lr}
 800385e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003860:	d066      	beq.n	8003930 <HAL_TIM_Base_Init+0xd4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	233d      	movs	r3, #61	; 0x3d
 8003864:	5cc3      	ldrb	r3, [r0, r3]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d041      	beq.n	80038f0 <HAL_TIM_Base_Init+0x94>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	233d      	movs	r3, #61	; 0x3d
 800386e:	2202      	movs	r2, #2
 8003870:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003874:	492f      	ldr	r1, [pc, #188]	; (8003934 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003876:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003878:	428a      	cmp	r2, r1
 800387a:	d045      	beq.n	8003908 <HAL_TIM_Base_Init+0xac>
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	05c9      	lsls	r1, r1, #23
 8003880:	428a      	cmp	r2, r1
 8003882:	d02c      	beq.n	80038de <HAL_TIM_Base_Init+0x82>
 8003884:	492c      	ldr	r1, [pc, #176]	; (8003938 <HAL_TIM_Base_Init+0xdc>)
 8003886:	428a      	cmp	r2, r1
 8003888:	d029      	beq.n	80038de <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388a:	492c      	ldr	r1, [pc, #176]	; (800393c <HAL_TIM_Base_Init+0xe0>)
 800388c:	428a      	cmp	r2, r1
 800388e:	d02a      	beq.n	80038e6 <HAL_TIM_Base_Init+0x8a>
 8003890:	492b      	ldr	r1, [pc, #172]	; (8003940 <HAL_TIM_Base_Init+0xe4>)
 8003892:	428a      	cmp	r2, r1
 8003894:	d03c      	beq.n	8003910 <HAL_TIM_Base_Init+0xb4>
 8003896:	492b      	ldr	r1, [pc, #172]	; (8003944 <HAL_TIM_Base_Init+0xe8>)
 8003898:	428a      	cmp	r2, r1
 800389a:	d039      	beq.n	8003910 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	2180      	movs	r1, #128	; 0x80
 800389e:	438b      	bics	r3, r1
 80038a0:	69a1      	ldr	r1, [r4, #24]
 80038a2:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80038a4:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ae:	2301      	movs	r3, #1
 80038b0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b2:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80038b4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	3a08      	subs	r2, #8
 80038ba:	54a3      	strb	r3, [r4, r2]
 80038bc:	3201      	adds	r2, #1
 80038be:	54a3      	strb	r3, [r4, r2]
 80038c0:	3201      	adds	r2, #1
 80038c2:	54a3      	strb	r3, [r4, r2]
 80038c4:	3201      	adds	r2, #1
 80038c6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	3201      	adds	r2, #1
 80038ca:	54a3      	strb	r3, [r4, r2]
 80038cc:	3201      	adds	r2, #1
 80038ce:	54a3      	strb	r3, [r4, r2]
 80038d0:	3201      	adds	r2, #1
 80038d2:	54a3      	strb	r3, [r4, r2]
 80038d4:	3201      	adds	r2, #1
 80038d6:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	3a08      	subs	r2, #8
 80038da:	54a3      	strb	r3, [r4, r2]
}
 80038dc:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038de:	2170      	movs	r1, #112	; 0x70
 80038e0:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80038e2:	68a1      	ldr	r1, [r4, #8]
 80038e4:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e6:	4918      	ldr	r1, [pc, #96]	; (8003948 <HAL_TIM_Base_Init+0xec>)
 80038e8:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	6921      	ldr	r1, [r4, #16]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	e7d5      	b.n	800389c <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 80038f0:	333c      	adds	r3, #60	; 0x3c
 80038f2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80038f4:	f7fe fa66 	bl	8001dc4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	233d      	movs	r3, #61	; 0x3d
 80038fa:	2202      	movs	r2, #2
 80038fc:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038fe:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003900:	490c      	ldr	r1, [pc, #48]	; (8003934 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003902:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	428a      	cmp	r2, r1
 8003906:	d1b9      	bne.n	800387c <HAL_TIM_Base_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003908:	2170      	movs	r1, #112	; 0x70
 800390a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800390c:	68a1      	ldr	r1, [r4, #8]
 800390e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003910:	490d      	ldr	r1, [pc, #52]	; (8003948 <HAL_TIM_Base_Init+0xec>)
 8003912:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003914:	6921      	ldr	r1, [r4, #16]
 8003916:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	438b      	bics	r3, r1
 800391c:	69a1      	ldr	r1, [r4, #24]
 800391e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003920:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003922:	68e3      	ldr	r3, [r4, #12]
 8003924:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003926:	6863      	ldr	r3, [r4, #4]
 8003928:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800392a:	6963      	ldr	r3, [r4, #20]
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	e7be      	b.n	80038ae <HAL_TIM_Base_Init+0x52>
    return HAL_ERROR;
 8003930:	2001      	movs	r0, #1
 8003932:	e7d3      	b.n	80038dc <HAL_TIM_Base_Init+0x80>
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40000400 	.word	0x40000400
 800393c:	40002000 	.word	0x40002000
 8003940:	40014400 	.word	0x40014400
 8003944:	40014800 	.word	0x40014800
 8003948:	fffffcff 	.word	0xfffffcff

0800394c <HAL_TIM_PWM_Init>:
{
 800394c:	b510      	push	{r4, lr}
 800394e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003950:	d066      	beq.n	8003a20 <HAL_TIM_PWM_Init+0xd4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	233d      	movs	r3, #61	; 0x3d
 8003954:	5cc3      	ldrb	r3, [r0, r3]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d041      	beq.n	80039e0 <HAL_TIM_PWM_Init+0x94>
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	233d      	movs	r3, #61	; 0x3d
 800395e:	2202      	movs	r2, #2
 8003960:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003962:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003964:	492f      	ldr	r1, [pc, #188]	; (8003a24 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003966:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	428a      	cmp	r2, r1
 800396a:	d045      	beq.n	80039f8 <HAL_TIM_PWM_Init+0xac>
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	05c9      	lsls	r1, r1, #23
 8003970:	428a      	cmp	r2, r1
 8003972:	d02c      	beq.n	80039ce <HAL_TIM_PWM_Init+0x82>
 8003974:	492c      	ldr	r1, [pc, #176]	; (8003a28 <HAL_TIM_PWM_Init+0xdc>)
 8003976:	428a      	cmp	r2, r1
 8003978:	d029      	beq.n	80039ce <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397a:	492c      	ldr	r1, [pc, #176]	; (8003a2c <HAL_TIM_PWM_Init+0xe0>)
 800397c:	428a      	cmp	r2, r1
 800397e:	d02a      	beq.n	80039d6 <HAL_TIM_PWM_Init+0x8a>
 8003980:	492b      	ldr	r1, [pc, #172]	; (8003a30 <HAL_TIM_PWM_Init+0xe4>)
 8003982:	428a      	cmp	r2, r1
 8003984:	d03c      	beq.n	8003a00 <HAL_TIM_PWM_Init+0xb4>
 8003986:	492b      	ldr	r1, [pc, #172]	; (8003a34 <HAL_TIM_PWM_Init+0xe8>)
 8003988:	428a      	cmp	r2, r1
 800398a:	d039      	beq.n	8003a00 <HAL_TIM_PWM_Init+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	2180      	movs	r1, #128	; 0x80
 800398e:	438b      	bics	r3, r1
 8003990:	69a1      	ldr	r1, [r4, #24]
 8003992:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003994:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003996:	68e3      	ldr	r3, [r4, #12]
 8003998:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800399a:	6863      	ldr	r3, [r4, #4]
 800399c:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800399e:	2301      	movs	r3, #1
 80039a0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a2:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80039a4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	3a08      	subs	r2, #8
 80039aa:	54a3      	strb	r3, [r4, r2]
 80039ac:	3201      	adds	r2, #1
 80039ae:	54a3      	strb	r3, [r4, r2]
 80039b0:	3201      	adds	r2, #1
 80039b2:	54a3      	strb	r3, [r4, r2]
 80039b4:	3201      	adds	r2, #1
 80039b6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	3201      	adds	r2, #1
 80039ba:	54a3      	strb	r3, [r4, r2]
 80039bc:	3201      	adds	r2, #1
 80039be:	54a3      	strb	r3, [r4, r2]
 80039c0:	3201      	adds	r2, #1
 80039c2:	54a3      	strb	r3, [r4, r2]
 80039c4:	3201      	adds	r2, #1
 80039c6:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	3a08      	subs	r2, #8
 80039ca:	54a3      	strb	r3, [r4, r2]
}
 80039cc:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ce:	2170      	movs	r1, #112	; 0x70
 80039d0:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80039d2:	68a1      	ldr	r1, [r4, #8]
 80039d4:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d6:	4918      	ldr	r1, [pc, #96]	; (8003a38 <HAL_TIM_PWM_Init+0xec>)
 80039d8:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039da:	6921      	ldr	r1, [r4, #16]
 80039dc:	430b      	orrs	r3, r1
 80039de:	e7d5      	b.n	800398c <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 80039e0:	333c      	adds	r3, #60	; 0x3c
 80039e2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80039e4:	f7fe f9ba 	bl	8001d5c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	233d      	movs	r3, #61	; 0x3d
 80039ea:	2202      	movs	r2, #2
 80039ec:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ee:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80039f2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f4:	428a      	cmp	r2, r1
 80039f6:	d1b9      	bne.n	800396c <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f8:	2170      	movs	r1, #112	; 0x70
 80039fa:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80039fc:	68a1      	ldr	r1, [r4, #8]
 80039fe:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a00:	490d      	ldr	r1, [pc, #52]	; (8003a38 <HAL_TIM_PWM_Init+0xec>)
 8003a02:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a04:	6921      	ldr	r1, [r4, #16]
 8003a06:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	438b      	bics	r3, r1
 8003a0c:	69a1      	ldr	r1, [r4, #24]
 8003a0e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003a10:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a12:	68e3      	ldr	r3, [r4, #12]
 8003a14:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a16:	6863      	ldr	r3, [r4, #4]
 8003a18:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003a1a:	6963      	ldr	r3, [r4, #20]
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	e7be      	b.n	800399e <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8003a20:	2001      	movs	r0, #1
 8003a22:	e7d3      	b.n	80039cc <HAL_TIM_PWM_Init+0x80>
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40002000 	.word	0x40002000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800
 8003a38:	fffffcff 	.word	0xfffffcff

08003a3c <HAL_TIM_PWM_ConfigChannel>:
{
 8003a3c:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003a3e:	203c      	movs	r0, #60	; 0x3c
{
 8003a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003a42:	5c1c      	ldrb	r4, [r3, r0]
 8003a44:	2c01      	cmp	r4, #1
 8003a46:	d100      	bne.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0xe>
 8003a48:	e0df      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8003a4a:	2401      	movs	r4, #1
 8003a4c:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8003a4e:	2a08      	cmp	r2, #8
 8003a50:	d100      	bne.n	8003a54 <HAL_TIM_PWM_ConfigChannel+0x18>
 8003a52:	e0ad      	b.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a54:	d834      	bhi.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x84>
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	d100      	bne.n	8003a5c <HAL_TIM_PWM_ConfigChannel+0x20>
 8003a5a:	e07e      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x11e>
 8003a5c:	2a04      	cmp	r2, #4
 8003a5e:	d161      	bne.n	8003b24 <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a60:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a62:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a64:	4d78      	ldr	r5, [pc, #480]	; (8003c48 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a66:	6a10      	ldr	r0, [r2, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a68:	4f78      	ldr	r7, [pc, #480]	; (8003c4c <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	43a0      	bics	r0, r4
 8003a6c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003a6e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003a70:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a72:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a74:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a76:	680d      	ldr	r5, [r1, #0]
 8003a78:	022d      	lsls	r5, r5, #8
 8003a7a:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8003a7c:	2420      	movs	r4, #32
 8003a7e:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a80:	688c      	ldr	r4, [r1, #8]
 8003a82:	0124      	lsls	r4, r4, #4
 8003a84:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a86:	42ba      	cmp	r2, r7
 8003a88:	d057      	beq.n	8003b3a <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8a:	4f71      	ldr	r7, [pc, #452]	; (8003c50 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003a8c:	42ba      	cmp	r2, r7
 8003a8e:	d05c      	beq.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003a90:	4f70      	ldr	r7, [pc, #448]	; (8003c54 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003a92:	42ba      	cmp	r2, r7
 8003a94:	d059      	beq.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x10e>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a96:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003a98:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a9a:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a9c:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a9e:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa0:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa2:	6994      	ldr	r4, [r2, #24]
 8003aa4:	0100      	lsls	r0, r0, #4
 8003aa6:	4320      	orrs	r0, r4
 8003aa8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aaa:	6990      	ldr	r0, [r2, #24]
 8003aac:	4c6a      	ldr	r4, [pc, #424]	; (8003c58 <HAL_TIM_PWM_ConfigChannel+0x21c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab0:	4020      	ands	r0, r4
 8003ab2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab4:	6990      	ldr	r0, [r2, #24]
 8003ab6:	0209      	lsls	r1, r1, #8
 8003ab8:	4301      	orrs	r1, r0
 8003aba:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003abc:	2000      	movs	r0, #0
      break;
 8003abe:	e032      	b.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003ac0:	2a0c      	cmp	r2, #12
 8003ac2:	d12f      	bne.n	8003b24 <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ac4:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ac6:	4c65      	ldr	r4, [pc, #404]	; (8003c5c <HAL_TIM_PWM_ConfigChannel+0x220>)
 8003ac8:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aca:	4d5f      	ldr	r5, [pc, #380]	; (8003c48 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003acc:	4020      	ands	r0, r4
 8003ace:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003ad0:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003ad2:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003ad4:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad6:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	680d      	ldr	r5, [r1, #0]
 8003ada:	022d      	lsls	r5, r5, #8
 8003adc:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ade:	4c60      	ldr	r4, [pc, #384]	; (8003c60 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8003ae0:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ae2:	6888      	ldr	r0, [r1, #8]
 8003ae4:	0300      	lsls	r0, r0, #12
 8003ae6:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae8:	4c58      	ldr	r4, [pc, #352]	; (8003c4c <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003aea:	42a2      	cmp	r2, r4
 8003aec:	d01f      	beq.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003aee:	4c58      	ldr	r4, [pc, #352]	; (8003c50 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003af0:	42a2      	cmp	r2, r4
 8003af2:	d01c      	beq.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003af4:	4c57      	ldr	r4, [pc, #348]	; (8003c54 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003af6:	42a2      	cmp	r2, r4
 8003af8:	d019      	beq.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003afa:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003afc:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003afe:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003b00:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b04:	2080      	movs	r0, #128	; 0x80
 8003b06:	69d4      	ldr	r4, [r2, #28]
 8003b08:	0100      	lsls	r0, r0, #4
 8003b0a:	4320      	orrs	r0, r4
 8003b0c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0e:	69d0      	ldr	r0, [r2, #28]
 8003b10:	4c51      	ldr	r4, [pc, #324]	; (8003c58 <HAL_TIM_PWM_ConfigChannel+0x21c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b12:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b14:	4020      	ands	r0, r4
 8003b16:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b18:	69d0      	ldr	r0, [r2, #28]
 8003b1a:	0209      	lsls	r1, r1, #8
 8003b1c:	4301      	orrs	r1, r0
 8003b1e:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003b20:	2000      	movs	r0, #0
      break;
 8003b22:	e000      	b.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003b24:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003b26:	223c      	movs	r2, #60	; 0x3c
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]
}
 8003b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b2e:	4c4d      	ldr	r4, [pc, #308]	; (8003c64 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8003b30:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b32:	694e      	ldr	r6, [r1, #20]
 8003b34:	01b6      	lsls	r6, r6, #6
 8003b36:	4326      	orrs	r6, r4
 8003b38:	e7df      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b3a:	2080      	movs	r0, #128	; 0x80
 8003b3c:	4384      	bics	r4, r0
 8003b3e:	0020      	movs	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b40:	68cc      	ldr	r4, [r1, #12]
 8003b42:	0124      	lsls	r4, r4, #4
 8003b44:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b46:	2040      	movs	r0, #64	; 0x40
 8003b48:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b4a:	4847      	ldr	r0, [pc, #284]	; (8003c68 <HAL_TIM_PWM_ConfigChannel+0x22c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b4c:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b4e:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b50:	698e      	ldr	r6, [r1, #24]
 8003b52:	433e      	orrs	r6, r7
 8003b54:	00b6      	lsls	r6, r6, #2
 8003b56:	4306      	orrs	r6, r0
 8003b58:	e79d      	b.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b5a:	2773      	movs	r7, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b5c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003b5e:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b60:	6a10      	ldr	r0, [r2, #32]
 8003b62:	43a0      	bics	r0, r4
 8003b64:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003b66:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003b68:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003b6a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b6c:	43bc      	bics	r4, r7
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6e:	3f71      	subs	r7, #113	; 0x71
 8003b70:	43b8      	bics	r0, r7
  tmpccmrx |= OC_Config->OCMode;
 8003b72:	432c      	orrs	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b74:	4f35      	ldr	r7, [pc, #212]	; (8003c4c <HAL_TIM_PWM_ConfigChannel+0x210>)
  tmpccer |= OC_Config->OCPolarity;
 8003b76:	688d      	ldr	r5, [r1, #8]
 8003b78:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b7a:	42ba      	cmp	r2, r7
 8003b7c:	d047      	beq.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8003b7e:	4d34      	ldr	r5, [pc, #208]	; (8003c50 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003b80:	42aa      	cmp	r2, r5
 8003b82:	d044      	beq.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8003b84:	4d33      	ldr	r5, [pc, #204]	; (8003c54 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003b86:	42aa      	cmp	r2, r5
 8003b88:	d041      	beq.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x1d2>
  TIMx->CR2 = tmpcr2;
 8003b8a:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b8c:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003b8e:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b90:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8003b92:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b94:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8003b96:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b98:	6990      	ldr	r0, [r2, #24]
 8003b9a:	4320      	orrs	r0, r4
 8003b9c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b9e:	6990      	ldr	r0, [r2, #24]
 8003ba0:	3c04      	subs	r4, #4
 8003ba2:	43a0      	bics	r0, r4
 8003ba4:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ba6:	6990      	ldr	r0, [r2, #24]
 8003ba8:	4301      	orrs	r1, r0
 8003baa:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2000      	movs	r0, #0
      break;
 8003bae:	e7ba      	b.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bb0:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bb2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bb4:	4c2d      	ldr	r4, [pc, #180]	; (8003c6c <HAL_TIM_PWM_ConfigChannel+0x230>)
 8003bb6:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003bb8:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bba:	4020      	ands	r0, r4
 8003bbc:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003bbe:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003bc0:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003bc2:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc4:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8003bc6:	4327      	orrs	r7, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8003bc8:	4c29      	ldr	r4, [pc, #164]	; (8003c70 <HAL_TIM_PWM_ConfigChannel+0x234>)
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bca:	4e20      	ldr	r6, [pc, #128]	; (8003c4c <HAL_TIM_PWM_ConfigChannel+0x210>)
  tmpccer &= ~TIM_CCER_CC3P;
 8003bcc:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bce:	688c      	ldr	r4, [r1, #8]
 8003bd0:	0224      	lsls	r4, r4, #8
 8003bd2:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bd4:	42b2      	cmp	r2, r6
 8003bd6:	d027      	beq.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd8:	4e1d      	ldr	r6, [pc, #116]	; (8003c50 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003bda:	42b2      	cmp	r2, r6
 8003bdc:	d02b      	beq.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x1fa>
 8003bde:	481d      	ldr	r0, [pc, #116]	; (8003c54 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003be0:	4282      	cmp	r2, r0
 8003be2:	d028      	beq.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x1fa>
  TIMx->CCR3 = OC_Config->Pulse;
 8003be4:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003be6:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003be8:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003bea:	63d0      	str	r0, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003bec:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bee:	2408      	movs	r4, #8
 8003bf0:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bf4:	4320      	orrs	r0, r4
 8003bf6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bf8:	69d0      	ldr	r0, [r2, #28]
 8003bfa:	3c04      	subs	r4, #4
 8003bfc:	43a0      	bics	r0, r4
 8003bfe:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c00:	69d0      	ldr	r0, [r2, #28]
 8003c02:	4301      	orrs	r1, r0
 8003c04:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2000      	movs	r0, #0
      break;
 8003c08:	e78d      	b.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	e78e      	b.n	8003b2c <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c0e:	2508      	movs	r5, #8
 8003c10:	43a8      	bics	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8003c12:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c14:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8003c16:	4328      	orrs	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c18:	2504      	movs	r5, #4
 8003c1a:	43a8      	bics	r0, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c1c:	4d15      	ldr	r5, [pc, #84]	; (8003c74 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003c1e:	4035      	ands	r5, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c20:	694e      	ldr	r6, [r1, #20]
 8003c22:	433e      	orrs	r6, r7
 8003c24:	432e      	orrs	r6, r5
 8003c26:	e7b0      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x14e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c28:	4813      	ldr	r0, [pc, #76]	; (8003c78 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8003c2a:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2c:	68cc      	ldr	r4, [r1, #12]
 8003c2e:	0224      	lsls	r4, r4, #8
 8003c30:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c32:	4809      	ldr	r0, [pc, #36]	; (8003c58 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8003c34:	4004      	ands	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c36:	4811      	ldr	r0, [pc, #68]	; (8003c7c <HAL_TIM_PWM_ConfigChannel+0x240>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c38:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c3a:	4028      	ands	r0, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c3c:	698d      	ldr	r5, [r1, #24]
 8003c3e:	4335      	orrs	r5, r6
 8003c40:	012d      	lsls	r5, r5, #4
 8003c42:	4305      	orrs	r5, r0
 8003c44:	e7ce      	b.n	8003be4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	ffff8cff 	.word	0xffff8cff
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800
 8003c58:	fffffbff 	.word	0xfffffbff
 8003c5c:	ffffefff 	.word	0xffffefff
 8003c60:	ffffdfff 	.word	0xffffdfff
 8003c64:	ffffbfff 	.word	0xffffbfff
 8003c68:	fffff3ff 	.word	0xfffff3ff
 8003c6c:	fffffeff 	.word	0xfffffeff
 8003c70:	fffffdff 	.word	0xfffffdff
 8003c74:	fffffcff 	.word	0xfffffcff
 8003c78:	fffff7ff 	.word	0xfffff7ff
 8003c7c:	ffffcfff 	.word	0xffffcfff

08003c80 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003c80:	233c      	movs	r3, #60	; 0x3c
{
 8003c82:	b570      	push	{r4, r5, r6, lr}
 8003c84:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8003c86:	5cc0      	ldrb	r0, [r0, r3]
 8003c88:	2801      	cmp	r0, #1
 8003c8a:	d100      	bne.n	8003c8e <HAL_TIM_ConfigClockSource+0xe>
 8003c8c:	e077      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0xfe>
 8003c8e:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003c92:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	3301      	adds	r3, #1
 8003c96:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003c98:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9a:	4d54      	ldr	r5, [pc, #336]	; (8003dec <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 8003c9c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003ca0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003ca2:	680b      	ldr	r3, [r1, #0]
 8003ca4:	2b60      	cmp	r3, #96	; 0x60
 8003ca6:	d100      	bne.n	8003caa <HAL_TIM_ConfigClockSource+0x2a>
 8003ca8:	e06b      	b.n	8003d82 <HAL_TIM_ConfigClockSource+0x102>
 8003caa:	d825      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x78>
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d100      	bne.n	8003cb2 <HAL_TIM_ConfigClockSource+0x32>
 8003cb0:	e082      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x138>
 8003cb2:	d954      	bls.n	8003d5e <HAL_TIM_ConfigClockSource+0xde>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d13d      	bne.n	8003d34 <HAL_TIM_ConfigClockSource+0xb4>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cb8:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cba:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cbe:	43a3      	bics	r3, r4
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cc0:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cc8:	43a3      	bics	r3, r4
 8003cca:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ccc:	010b      	lsls	r3, r1, #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cce:	210a      	movs	r1, #10
 8003cd0:	438e      	bics	r6, r1
 8003cd2:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cd4:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 8003cd6:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003cda:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cdc:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003cde:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce0:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce2:	3919      	subs	r1, #25
 8003ce4:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003cea:	233d      	movs	r3, #61	; 0x3d
 8003cec:	2101      	movs	r1, #1
 8003cee:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	54d1      	strb	r1, [r2, r3]
}
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003cf8:	2480      	movs	r4, #128	; 0x80
 8003cfa:	0164      	lsls	r4, r4, #5
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	d03c      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xfa>
 8003d00:	2480      	movs	r4, #128	; 0x80
 8003d02:	01a4      	lsls	r4, r4, #6
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d117      	bne.n	8003d38 <HAL_TIM_ConfigClockSource+0xb8>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d08:	6883      	ldr	r3, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0a:	4c39      	ldr	r4, [pc, #228]	; (8003df0 <HAL_TIM_ConfigClockSource+0x170>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d0c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d10:	688b      	ldr	r3, [r1, #8]
 8003d12:	68c9      	ldr	r1, [r1, #12]
 8003d14:	432b      	orrs	r3, r5
 8003d16:	0209      	lsls	r1, r1, #8
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1c:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	6881      	ldr	r1, [r0, #8]
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2000      	movs	r0, #0
      break;
 8003d2a:	e7de      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003d2c:	2110      	movs	r1, #16
 8003d2e:	001c      	movs	r4, r3
 8003d30:	438c      	bics	r4, r1
 8003d32:	d019      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0xe8>
 8003d34:	2001      	movs	r0, #1
 8003d36:	e7d8      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x6a>
 8003d38:	2b70      	cmp	r3, #112	; 0x70
 8003d3a:	d1fb      	bne.n	8003d34 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr = TIMx->SMCR;
 8003d3c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3e:	4c2c      	ldr	r4, [pc, #176]	; (8003df0 <HAL_TIM_ConfigClockSource+0x170>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d40:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d42:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d44:	688b      	ldr	r3, [r1, #8]
 8003d46:	68c9      	ldr	r1, [r1, #12]
 8003d48:	432b      	orrs	r3, r5
 8003d4a:	0209      	lsls	r1, r1, #8
 8003d4c:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4e:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d50:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8003d52:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003d54:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d56:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8003d58:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2000      	movs	r0, #0
      break;
 8003d5c:	e7c5      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d002      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0xe8>
 8003d62:	d9e3      	bls.n	8003d2c <HAL_TIM_ConfigClockSource+0xac>
 8003d64:	2b30      	cmp	r3, #48	; 0x30
 8003d66:	d1e5      	bne.n	8003d34 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d68:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003d6a:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d6c:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	2107      	movs	r1, #7
 8003d72:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003d74:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2000      	movs	r0, #0
}
 8003d78:	e7b7      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e7b5      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 8003d7e:	2002      	movs	r0, #2
 8003d80:	e7b9      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x76>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d82:	68cd      	ldr	r5, [r1, #12]
 8003d84:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d86:	2110      	movs	r1, #16
 8003d88:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8a:	4e1a      	ldr	r6, [pc, #104]	; (8003df4 <HAL_TIM_ConfigClockSource+0x174>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8c:	438b      	bics	r3, r1
 8003d8e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d90:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8003d92:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d94:	400e      	ands	r6, r1
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d96:	0329      	lsls	r1, r5, #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d98:	25a0      	movs	r5, #160	; 0xa0
 8003d9a:	43ab      	bics	r3, r5
 8003d9c:	001d      	movs	r5, r3
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d9e:	4331      	orrs	r1, r6
  TIMx->CCMR1 = tmpccmr1 ;
 8003da0:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003da2:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da4:	0123      	lsls	r3, r4, #4
 8003da6:	432b      	orrs	r3, r5
  TIMx->CCER = tmpccer;
 8003da8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003daa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dac:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dae:	3909      	subs	r1, #9
 8003db0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003db2:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2000      	movs	r0, #0
}
 8003db6:	e798      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x6a>
  tmpccer = TIMx->CCER;
 8003db8:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dba:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dbe:	43a3      	bics	r3, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc0:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc8:	43a3      	bics	r3, r4
 8003dca:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dcc:	010b      	lsls	r3, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dce:	210a      	movs	r1, #10
 8003dd0:	438e      	bics	r6, r1
 8003dd2:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd4:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 8003dd6:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003dd8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003dda:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ddc:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003dde:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de0:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de2:	3929      	subs	r1, #41	; 0x29
 8003de4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003de6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2000      	movs	r0, #0
}
 8003dea:	e77e      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x6a>
 8003dec:	ffff0088 	.word	0xffff0088
 8003df0:	ffff00ff 	.word	0xffff00ff
 8003df4:	ffff0fff 	.word	0xffff0fff

08003df8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df8:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8003dfa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfc:	4290      	cmp	r0, r2
 8003dfe:	d033      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	05d2      	lsls	r2, r2, #23
 8003e04:	4290      	cmp	r0, r2
 8003e06:	d01b      	beq.n	8003e40 <TIM_Base_SetConfig+0x48>
 8003e08:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <TIM_Base_SetConfig+0x80>)
 8003e0a:	4290      	cmp	r0, r2
 8003e0c:	d018      	beq.n	8003e40 <TIM_Base_SetConfig+0x48>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <TIM_Base_SetConfig+0x84>)
 8003e10:	4290      	cmp	r0, r2
 8003e12:	d019      	beq.n	8003e48 <TIM_Base_SetConfig+0x50>
 8003e14:	4a1a      	ldr	r2, [pc, #104]	; (8003e80 <TIM_Base_SetConfig+0x88>)
 8003e16:	4290      	cmp	r0, r2
 8003e18:	d002      	beq.n	8003e20 <TIM_Base_SetConfig+0x28>
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <TIM_Base_SetConfig+0x8c>)
 8003e1c:	4290      	cmp	r0, r2
 8003e1e:	d117      	bne.n	8003e50 <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e20:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <TIM_Base_SetConfig+0x90>)
 8003e22:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e24:	68ca      	ldr	r2, [r1, #12]
 8003e26:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e28:	2280      	movs	r2, #128	; 0x80
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	694a      	ldr	r2, [r1, #20]
 8003e2e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003e30:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e32:	688b      	ldr	r3, [r1, #8]
 8003e34:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e36:	680b      	ldr	r3, [r1, #0]
 8003e38:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3a:	690b      	ldr	r3, [r1, #16]
 8003e3c:	6303      	str	r3, [r0, #48]	; 0x30
 8003e3e:	e010      	b.n	8003e62 <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e40:	2270      	movs	r2, #112	; 0x70
 8003e42:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003e44:	684a      	ldr	r2, [r1, #4]
 8003e46:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e48:	4a0f      	ldr	r2, [pc, #60]	; (8003e88 <TIM_Base_SetConfig+0x90>)
 8003e4a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4c:	68ca      	ldr	r2, [r1, #12]
 8003e4e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	4393      	bics	r3, r2
 8003e54:	694a      	ldr	r2, [r1, #20]
 8003e56:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003e58:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5a:	688b      	ldr	r3, [r1, #8]
 8003e5c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e5e:	680b      	ldr	r3, [r1, #0]
 8003e60:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003e62:	2301      	movs	r3, #1
 8003e64:	6143      	str	r3, [r0, #20]
}
 8003e66:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e68:	2270      	movs	r2, #112	; 0x70
 8003e6a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003e6c:	684a      	ldr	r2, [r1, #4]
 8003e6e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e70:	e7d6      	b.n	8003e20 <TIM_Base_SetConfig+0x28>
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40002000 	.word	0x40002000
 8003e80:	40014400 	.word	0x40014400
 8003e84:	40014800 	.word	0x40014800
 8003e88:	fffffcff 	.word	0xfffffcff

08003e8c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	6a03      	ldr	r3, [r0, #32]
{
 8003e90:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e92:	4393      	bics	r3, r2
 8003e94:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003e96:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e98:	4c15      	ldr	r4, [pc, #84]	; (8003ef0 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8003e9a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e9c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e9e:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea0:	680c      	ldr	r4, [r1, #0]
 8003ea2:	0224      	lsls	r4, r4, #8
 8003ea4:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea6:	2420      	movs	r4, #32
 8003ea8:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eaa:	688c      	ldr	r4, [r1, #8]
 8003eac:	0124      	lsls	r4, r4, #4
 8003eae:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb0:	4c10      	ldr	r4, [pc, #64]	; (8003ef4 <TIM_OC2_SetConfig+0x68>)
 8003eb2:	42a0      	cmp	r0, r4
 8003eb4:	d012      	beq.n	8003edc <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	4c10      	ldr	r4, [pc, #64]	; (8003ef8 <TIM_OC2_SetConfig+0x6c>)
 8003eb8:	42a0      	cmp	r0, r4
 8003eba:	d002      	beq.n	8003ec2 <TIM_OC2_SetConfig+0x36>
 8003ebc:	4c0f      	ldr	r4, [pc, #60]	; (8003efc <TIM_OC2_SetConfig+0x70>)
 8003ebe:	42a0      	cmp	r0, r4
 8003ec0:	d106      	bne.n	8003ed0 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec2:	4e0f      	ldr	r6, [pc, #60]	; (8003f00 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec6:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec8:	698b      	ldr	r3, [r1, #24]
 8003eca:	4323      	orrs	r3, r4
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4333      	orrs	r3, r6
  TIMx->CR2 = tmpcr2;
 8003ed0:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ed2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ed4:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ed6:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ed8:	6202      	str	r2, [r0, #32]
}
 8003eda:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8003edc:	2480      	movs	r4, #128	; 0x80
 8003ede:	43a2      	bics	r2, r4
 8003ee0:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee2:	68ca      	ldr	r2, [r1, #12]
 8003ee4:	0112      	lsls	r2, r2, #4
 8003ee6:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ee8:	2440      	movs	r4, #64	; 0x40
 8003eea:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eec:	e7e9      	b.n	8003ec2 <TIM_OC2_SetConfig+0x36>
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	ffff8cff 	.word	0xffff8cff
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800
 8003f00:	fffff3ff 	.word	0xfffff3ff

08003f04 <TIM_TI1_SetConfig>:
{
 8003f04:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f06:	2401      	movs	r4, #1
{
 8003f08:	001d      	movs	r5, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f0a:	6a03      	ldr	r3, [r0, #32]
{
 8003f0c:	0017      	movs	r7, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f0e:	43a3      	bics	r3, r4
 8003f10:	6203      	str	r3, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <TIM_TI1_SetConfig+0x4c>)
  tmpccmr1 = TIMx->CCMR1;
 8003f14:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003f16:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f18:	4298      	cmp	r0, r3
 8003f1a:	d008      	beq.n	8003f2e <TIM_TI1_SetConfig+0x2a>
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	05db      	lsls	r3, r3, #23
 8003f20:	4298      	cmp	r0, r3
 8003f22:	d004      	beq.n	8003f2e <TIM_TI1_SetConfig+0x2a>
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <TIM_TI1_SetConfig+0x50>)
 8003f26:	4298      	cmp	r0, r3
 8003f28:	d001      	beq.n	8003f2e <TIM_TI1_SetConfig+0x2a>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f2a:	4322      	orrs	r2, r4
 8003f2c:	e002      	b.n	8003f34 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	439a      	bics	r2, r3
    tmpccmr1 |= TIM_ICSelection;
 8003f32:	433a      	orrs	r2, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f34:	23f0      	movs	r3, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f36:	24ff      	movs	r4, #255	; 0xff
 8003f38:	012d      	lsls	r5, r5, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f3a:	439a      	bics	r2, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3c:	3be6      	subs	r3, #230	; 0xe6
 8003f3e:	439e      	bics	r6, r3
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f40:	402c      	ands	r4, r5
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f42:	400b      	ands	r3, r1
 8003f44:	4333      	orrs	r3, r6
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f46:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 8003f48:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f4a:	6203      	str	r3, [r0, #32]
}
 8003f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40000400 	.word	0x40000400

08003f58 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8003f58:	4770      	bx	lr
 8003f5a:	46c0      	nop			; (mov r8, r8)

08003f5c <HAL_TIMEx_HallSensor_Init>:
{
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	0004      	movs	r4, r0
 8003f60:	000d      	movs	r5, r1
 8003f62:	b08b      	sub	sp, #44	; 0x2c
  if (htim == NULL)
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d057      	beq.n	8004018 <HAL_TIMEx_HallSensor_Init+0xbc>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f68:	233d      	movs	r3, #61	; 0x3d
 8003f6a:	5cc3      	ldrb	r3, [r0, r3]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04d      	beq.n	800400e <HAL_TIMEx_HallSensor_Init+0xb2>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f72:	2302      	movs	r3, #2
 8003f74:	263d      	movs	r6, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f76:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	55a3      	strb	r3, [r4, r6]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f7a:	c901      	ldmia	r1!, {r0}
 8003f7c:	f7ff ff3c 	bl	8003df8 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8003f80:	2203      	movs	r2, #3
 8003f82:	68ab      	ldr	r3, [r5, #8]
 8003f84:	6829      	ldr	r1, [r5, #0]
 8003f86:	6820      	ldr	r0, [r4, #0]
 8003f88:	f7ff ffbc 	bl	8003f04 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f8c:	220c      	movs	r2, #12
 8003f8e:	6820      	ldr	r0, [r4, #0]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003f90:	2770      	movs	r7, #112	; 0x70
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f92:	6983      	ldr	r3, [r0, #24]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003f94:	a903      	add	r1, sp, #12
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f96:	4393      	bics	r3, r2
 8003f98:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003f9a:	6983      	ldr	r3, [r0, #24]
 8003f9c:	686a      	ldr	r2, [r5, #4]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003f9e:	9703      	str	r7, [sp, #12]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003fa0:	4313      	orrs	r3, r2
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003fa2:	2280      	movs	r2, #128	; 0x80
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003fa4:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003fa6:	6843      	ldr	r3, [r0, #4]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003fac:	6883      	ldr	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003fae:	3a40      	subs	r2, #64	; 0x40
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003fb0:	43bb      	bics	r3, r7
 8003fb2:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003fb4:	6883      	ldr	r3, [r0, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003fba:	6883      	ldr	r3, [r0, #8]
 8003fbc:	3a39      	subs	r2, #57	; 0x39
 8003fbe:	4393      	bics	r3, r2
 8003fc0:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003fc2:	6883      	ldr	r3, [r0, #8]
 8003fc4:	3a03      	subs	r2, #3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9307      	str	r3, [sp, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fce:	9308      	str	r3, [sp, #32]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fd0:	9309      	str	r3, [sp, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fd2:	9306      	str	r3, [sp, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fd4:	9305      	str	r3, [sp, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003fd6:	68eb      	ldr	r3, [r5, #12]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	9304      	str	r3, [sp, #16]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003fdc:	f7ff ff56 	bl	8003e8c <TIM_OC2_SetConfig>
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003fe0:	2150      	movs	r1, #80	; 0x50
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003fe2:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8003fe4:	2000      	movs	r0, #0
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	43ba      	bics	r2, r7
 8003fea:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	2246      	movs	r2, #70	; 0x46
 8003ff6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	3a08      	subs	r2, #8
 8003ffa:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	3201      	adds	r2, #1
 8003ffe:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	3203      	adds	r2, #3
 8004002:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	3201      	adds	r2, #1
 8004006:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004008:	55a3      	strb	r3, [r4, r6]
}
 800400a:	b00b      	add	sp, #44	; 0x2c
 800400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800400e:	333c      	adds	r3, #60	; 0x3c
 8004010:	54c2      	strb	r2, [r0, r3]
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004012:	f7ff ffa1 	bl	8003f58 <HAL_TIMEx_HallSensor_MspInit>
 8004016:	e7ac      	b.n	8003f72 <HAL_TIMEx_HallSensor_Init+0x16>
    return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
 800401a:	e7f6      	b.n	800400a <HAL_TIMEx_HallSensor_Init+0xae>

0800401c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401c:	233c      	movs	r3, #60	; 0x3c
{
 800401e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004020:	5cc3      	ldrb	r3, [r0, r3]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d021      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004026:	233d      	movs	r3, #61	; 0x3d
 8004028:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800402a:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800402e:	6803      	ldr	r3, [r0, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004032:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004034:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004036:	680d      	ldr	r5, [r1, #0]
 8004038:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403c:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d006      	beq.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	05d2      	lsls	r2, r2, #23
 8004046:	4293      	cmp	r3, r2
 8004048:	d002      	beq.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d104      	bne.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004050:	2280      	movs	r2, #128	; 0x80
 8004052:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004054:	684a      	ldr	r2, [r1, #4]
 8004056:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004058:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800405a:	233d      	movs	r3, #61	; 0x3d
 800405c:	2201      	movs	r2, #1
 800405e:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004060:	2200      	movs	r2, #0
 8004062:	3b01      	subs	r3, #1
 8004064:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004066:	2000      	movs	r0, #0
}
 8004068:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800406a:	2002      	movs	r0, #2
 800406c:	e7fc      	b.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400

08004078 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004078:	223c      	movs	r2, #60	; 0x3c
{
 800407a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800407c:	5c83      	ldrb	r3, [r0, r2]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d01e      	beq.n	80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004082:	68cc      	ldr	r4, [r1, #12]
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8004086:	4023      	ands	r3, r4
 8004088:	688c      	ldr	r4, [r1, #8]
 800408a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800408c:	4c0e      	ldr	r4, [pc, #56]	; (80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 800408e:	4023      	ands	r3, r4
 8004090:	684c      	ldr	r4, [r1, #4]
 8004092:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004094:	4c0d      	ldr	r4, [pc, #52]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8004096:	4023      	ands	r3, r4
 8004098:	680c      	ldr	r4, [r1, #0]
 800409a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800409c:	4c0c      	ldr	r4, [pc, #48]	; (80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 800409e:	4023      	ands	r3, r4
 80040a0:	690c      	ldr	r4, [r1, #16]
 80040a2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040a4:	4c0b      	ldr	r4, [pc, #44]	; (80040d4 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80040a6:	4023      	ands	r3, r4
 80040a8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040aa:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040ac:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040ae:	4c0a      	ldr	r4, [pc, #40]	; (80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80040b0:	4023      	ands	r3, r4
 80040b2:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040b4:	6801      	ldr	r1, [r0, #0]
 80040b6:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040b8:	2300      	movs	r3, #0
 80040ba:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80040bc:	2000      	movs	r0, #0
}
 80040be:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80040c0:	2002      	movs	r0, #2
 80040c2:	e7fc      	b.n	80040be <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 80040c4:	fffffcff 	.word	0xfffffcff
 80040c8:	fffffbff 	.word	0xfffffbff
 80040cc:	fffff7ff 	.word	0xfffff7ff
 80040d0:	ffffefff 	.word	0xffffefff
 80040d4:	ffffdfff 	.word	0xffffdfff
 80040d8:	ffffbfff 	.word	0xffffbfff

080040dc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80040de:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e0:	07da      	lsls	r2, r3, #31
 80040e2:	d506      	bpl.n	80040f2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040e4:	6801      	ldr	r1, [r0, #0]
 80040e6:	4c28      	ldr	r4, [pc, #160]	; (8004188 <UART_AdvFeatureConfig+0xac>)
 80040e8:	684a      	ldr	r2, [r1, #4]
 80040ea:	4022      	ands	r2, r4
 80040ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80040ee:	4322      	orrs	r2, r4
 80040f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f2:	079a      	lsls	r2, r3, #30
 80040f4:	d506      	bpl.n	8004104 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040f6:	6801      	ldr	r1, [r0, #0]
 80040f8:	4c24      	ldr	r4, [pc, #144]	; (800418c <UART_AdvFeatureConfig+0xb0>)
 80040fa:	684a      	ldr	r2, [r1, #4]
 80040fc:	4022      	ands	r2, r4
 80040fe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004100:	4322      	orrs	r2, r4
 8004102:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004104:	075a      	lsls	r2, r3, #29
 8004106:	d506      	bpl.n	8004116 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004108:	6801      	ldr	r1, [r0, #0]
 800410a:	4c21      	ldr	r4, [pc, #132]	; (8004190 <UART_AdvFeatureConfig+0xb4>)
 800410c:	684a      	ldr	r2, [r1, #4]
 800410e:	4022      	ands	r2, r4
 8004110:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004112:	4322      	orrs	r2, r4
 8004114:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004116:	071a      	lsls	r2, r3, #28
 8004118:	d506      	bpl.n	8004128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800411a:	6801      	ldr	r1, [r0, #0]
 800411c:	4c1d      	ldr	r4, [pc, #116]	; (8004194 <UART_AdvFeatureConfig+0xb8>)
 800411e:	684a      	ldr	r2, [r1, #4]
 8004120:	4022      	ands	r2, r4
 8004122:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004124:	4322      	orrs	r2, r4
 8004126:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004128:	06da      	lsls	r2, r3, #27
 800412a:	d506      	bpl.n	800413a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412c:	6801      	ldr	r1, [r0, #0]
 800412e:	4c1a      	ldr	r4, [pc, #104]	; (8004198 <UART_AdvFeatureConfig+0xbc>)
 8004130:	688a      	ldr	r2, [r1, #8]
 8004132:	4022      	ands	r2, r4
 8004134:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004136:	4322      	orrs	r2, r4
 8004138:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800413a:	069a      	lsls	r2, r3, #26
 800413c:	d506      	bpl.n	800414c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800413e:	6801      	ldr	r1, [r0, #0]
 8004140:	4c16      	ldr	r4, [pc, #88]	; (800419c <UART_AdvFeatureConfig+0xc0>)
 8004142:	688a      	ldr	r2, [r1, #8]
 8004144:	4022      	ands	r2, r4
 8004146:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004148:	4322      	orrs	r2, r4
 800414a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800414c:	065a      	lsls	r2, r3, #25
 800414e:	d50a      	bpl.n	8004166 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004150:	6801      	ldr	r1, [r0, #0]
 8004152:	4d13      	ldr	r5, [pc, #76]	; (80041a0 <UART_AdvFeatureConfig+0xc4>)
 8004154:	684a      	ldr	r2, [r1, #4]
 8004156:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004158:	402a      	ands	r2, r5
 800415a:	4322      	orrs	r2, r4
 800415c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	0352      	lsls	r2, r2, #13
 8004162:	4294      	cmp	r4, r2
 8004164:	d009      	beq.n	800417a <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	d506      	bpl.n	8004178 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800416a:	6802      	ldr	r2, [r0, #0]
 800416c:	490d      	ldr	r1, [pc, #52]	; (80041a4 <UART_AdvFeatureConfig+0xc8>)
 800416e:	6853      	ldr	r3, [r2, #4]
 8004170:	400b      	ands	r3, r1
 8004172:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004174:	430b      	orrs	r3, r1
 8004176:	6053      	str	r3, [r2, #4]
  }
}
 8004178:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800417a:	684a      	ldr	r2, [r1, #4]
 800417c:	4c0a      	ldr	r4, [pc, #40]	; (80041a8 <UART_AdvFeatureConfig+0xcc>)
 800417e:	4022      	ands	r2, r4
 8004180:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004182:	4322      	orrs	r2, r4
 8004184:	604a      	str	r2, [r1, #4]
 8004186:	e7ee      	b.n	8004166 <UART_AdvFeatureConfig+0x8a>
 8004188:	fffdffff 	.word	0xfffdffff
 800418c:	fffeffff 	.word	0xfffeffff
 8004190:	fffbffff 	.word	0xfffbffff
 8004194:	ffff7fff 	.word	0xffff7fff
 8004198:	ffffefff 	.word	0xffffefff
 800419c:	ffffdfff 	.word	0xffffdfff
 80041a0:	ffefffff 	.word	0xffefffff
 80041a4:	fff7ffff 	.word	0xfff7ffff
 80041a8:	ff9fffff 	.word	0xff9fffff

080041ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ae:	4646      	mov	r6, r8
 80041b0:	4698      	mov	r8, r3
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041b2:	2304      	movs	r3, #4
{
 80041b4:	464f      	mov	r7, r9
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041b6:	4699      	mov	r9, r3
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b8:	2380      	movs	r3, #128	; 0x80
{
 80041ba:	46d6      	mov	lr, sl
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041bc:	011b      	lsls	r3, r3, #4
{
 80041be:	b5c0      	push	{r6, r7, lr}
 80041c0:	0015      	movs	r5, r2
 80041c2:	0007      	movs	r7, r0
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041c4:	469a      	mov	sl, r3
{
 80041c6:	000c      	movs	r4, r1
 80041c8:	9e08      	ldr	r6, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ca:	6801      	ldr	r1, [r0, #0]
 80041cc:	1c73      	adds	r3, r6, #1
 80041ce:	d10c      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x3e>
 80041d0:	69cb      	ldr	r3, [r1, #28]
 80041d2:	4023      	ands	r3, r4
 80041d4:	1b1b      	subs	r3, r3, r4
 80041d6:	425a      	negs	r2, r3
 80041d8:	4153      	adcs	r3, r2
 80041da:	42ab      	cmp	r3, r5
 80041dc:	d0f8      	beq.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2000      	movs	r0, #0
}
 80041e0:	bce0      	pop	{r5, r6, r7}
 80041e2:	46ba      	mov	sl, r7
 80041e4:	46b1      	mov	r9, r6
 80041e6:	46a8      	mov	r8, r5
 80041e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ea:	69cb      	ldr	r3, [r1, #28]
 80041ec:	4023      	ands	r3, r4
 80041ee:	1b1b      	subs	r3, r3, r4
 80041f0:	425a      	negs	r2, r3
 80041f2:	4153      	adcs	r3, r2
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	d1f2      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f8:	f7fe fc3c 	bl	8002a74 <HAL_GetTick>
 80041fc:	4643      	mov	r3, r8
 80041fe:	1ac0      	subs	r0, r0, r3
 8004200:	42b0      	cmp	r0, r6
 8004202:	d82b      	bhi.n	800425c <UART_WaitOnFlagUntilTimeout+0xb0>
 8004204:	2e00      	cmp	r6, #0
 8004206:	d029      	beq.n	800425c <UART_WaitOnFlagUntilTimeout+0xb0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004208:	464a      	mov	r2, r9
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	680b      	ldr	r3, [r1, #0]
 800420e:	421a      	tst	r2, r3
 8004210:	d0dc      	beq.n	80041cc <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004212:	4652      	mov	r2, sl
 8004214:	69cb      	ldr	r3, [r1, #28]
 8004216:	4213      	tst	r3, r2
 8004218:	d0d8      	beq.n	80041cc <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800421a:	620a      	str	r2, [r1, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421c:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004220:	2201      	movs	r2, #1
 8004222:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	4c1b      	ldr	r4, [pc, #108]	; (8004298 <UART_WaitOnFlagUntilTimeout+0xec>)
 800422a:	680b      	ldr	r3, [r1, #0]
 800422c:	4023      	ands	r3, r4
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004234:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	688b      	ldr	r3, [r1, #8]
 8004240:	4393      	bics	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
 8004244:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8004248:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800424a:	327f      	adds	r2, #127	; 0x7f
          huart->gState = HAL_UART_STATE_READY;
 800424c:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800424e:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004250:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 8004252:	2200      	movs	r2, #0
 8004254:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 8004256:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004258:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 800425a:	e7c1      	b.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	2201      	movs	r2, #1
 8004262:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	4c0b      	ldr	r4, [pc, #44]	; (8004298 <UART_WaitOnFlagUntilTimeout+0xec>)
 800426a:	680b      	ldr	r3, [r1, #0]
 800426c:	4023      	ands	r3, r4
 800426e:	600b      	str	r3, [r1, #0]
 8004270:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004278:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427c:	6839      	ldr	r1, [r7, #0]
 800427e:	688b      	ldr	r3, [r1, #8]
 8004280:	4393      	bics	r3, r2
 8004282:	608b      	str	r3, [r1, #8]
 8004284:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8004288:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 800428a:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 800428c:	67bb      	str	r3, [r7, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800428e:	67fb      	str	r3, [r7, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8004290:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 8004292:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8004294:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8004296:	e7a3      	b.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x34>
 8004298:	fffffe5f 	.word	0xfffffe5f

0800429c <HAL_UART_Init>:
{
 800429c:	b530      	push	{r4, r5, lr}
 800429e:	0004      	movs	r4, r0
 80042a0:	b083      	sub	sp, #12
  if (huart == NULL)
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d100      	bne.n	80042a8 <HAL_UART_Init+0xc>
 80042a6:	e0af      	b.n	8004408 <HAL_UART_Init+0x16c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80042a8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d100      	bne.n	80042b0 <HAL_UART_Init+0x14>
 80042ae:	e08a      	b.n	80043c6 <HAL_UART_Init+0x12a>
  huart->gState = HAL_UART_STATE_BUSY;
 80042b0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80042b2:	2101      	movs	r1, #1
 80042b4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80042b8:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ba:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80042bc:	438b      	bics	r3, r1
 80042be:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042c0:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c2:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042c4:	432b      	orrs	r3, r5
 80042c6:	6965      	ldr	r5, [r4, #20]
 80042c8:	69e1      	ldr	r1, [r4, #28]
 80042ca:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042cc:	4d68      	ldr	r5, [pc, #416]	; (8004470 <HAL_UART_Init+0x1d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ce:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042d0:	4028      	ands	r0, r5
 80042d2:	4303      	orrs	r3, r0
 80042d4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d6:	6853      	ldr	r3, [r2, #4]
 80042d8:	4866      	ldr	r0, [pc, #408]	; (8004474 <HAL_UART_Init+0x1d8>)
  tmpreg |= huart->Init.OneBitSampling;
 80042da:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042dc:	4003      	ands	r3, r0
 80042de:	68e0      	ldr	r0, [r4, #12]
 80042e0:	4303      	orrs	r3, r0
 80042e2:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80042e4:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042e6:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80042e8:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ea:	4d63      	ldr	r5, [pc, #396]	; (8004478 <HAL_UART_Init+0x1dc>)
 80042ec:	4028      	ands	r0, r5
 80042ee:	4303      	orrs	r3, r0
 80042f0:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042f2:	4b62      	ldr	r3, [pc, #392]	; (800447c <HAL_UART_Init+0x1e0>)
 80042f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f6:	2303      	movs	r3, #3
 80042f8:	4013      	ands	r3, r2
 80042fa:	3b01      	subs	r3, #1
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d912      	bls.n	8004326 <HAL_UART_Init+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	4299      	cmp	r1, r3
 8004306:	d100      	bne.n	800430a <HAL_UART_Init+0x6e>
 8004308:	e0ae      	b.n	8004468 <HAL_UART_Init+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800430a:	f7ff f9f9 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800430e:	2800      	cmp	r0, #0
 8004310:	d119      	bne.n	8004346 <HAL_UART_Init+0xaa>
  huart->RxISR = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8004316:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800431a:	2b00      	cmp	r3, #0
 800431c:	d028      	beq.n	8004370 <HAL_UART_Init+0xd4>
    UART_AdvFeatureConfig(huart);
 800431e:	0020      	movs	r0, r4
 8004320:	f7ff fedc 	bl	80040dc <UART_AdvFeatureConfig>
 8004324:	e024      	b.n	8004370 <HAL_UART_Init+0xd4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	2080      	movs	r0, #128	; 0x80
 8004328:	4a55      	ldr	r2, [pc, #340]	; (8004480 <HAL_UART_Init+0x1e4>)
 800432a:	0200      	lsls	r0, r0, #8
 800432c:	5cd3      	ldrb	r3, [r2, r3]
 800432e:	4281      	cmp	r1, r0
 8004330:	d100      	bne.n	8004334 <HAL_UART_Init+0x98>
 8004332:	e06b      	b.n	800440c <HAL_UART_Init+0x170>
    switch (clocksource)
 8004334:	2b04      	cmp	r3, #4
 8004336:	d100      	bne.n	800433a <HAL_UART_Init+0x9e>
 8004338:	e08c      	b.n	8004454 <HAL_UART_Init+0x1b8>
 800433a:	d83c      	bhi.n	80043b6 <HAL_UART_Init+0x11a>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0e4      	beq.n	800430a <HAL_UART_Init+0x6e>
 8004340:	2b02      	cmp	r3, #2
 8004342:	d13a      	bne.n	80043ba <HAL_UART_Init+0x11e>
        pclk = (uint32_t) HSI_VALUE;
 8004344:	484f      	ldr	r0, [pc, #316]	; (8004484 <HAL_UART_Init+0x1e8>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004346:	6863      	ldr	r3, [r4, #4]
 8004348:	6861      	ldr	r1, [r4, #4]
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	1818      	adds	r0, r3, r0
 800434e:	f7fb fedb 	bl	8000108 <__udivsi3>
 8004352:	0400      	lsls	r0, r0, #16
 8004354:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004356:	0002      	movs	r2, r0
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <HAL_UART_Init+0x1ec>)
 800435a:	3a10      	subs	r2, #16
 800435c:	429a      	cmp	r2, r3
 800435e:	d82c      	bhi.n	80043ba <HAL_UART_Init+0x11e>
        huart->Instance->BRR = usartdiv;
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8004368:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800436a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1d6      	bne.n	800431e <HAL_UART_Init+0x82>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	4946      	ldr	r1, [pc, #280]	; (800448c <HAL_UART_Init+0x1f0>)
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004378:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	438a      	bics	r2, r1
 8004380:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	3929      	subs	r1, #41	; 0x29
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	2200      	movs	r2, #0
 800438e:	50e2      	str	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8004390:	f7fe fb70 	bl	8002a74 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004394:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004396:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	0712      	lsls	r2, r2, #28
 800439c:	d418      	bmi.n	80043d0 <HAL_UART_Init+0x134>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	075b      	lsls	r3, r3, #29
 80043a2:	d424      	bmi.n	80043ee <HAL_UART_Init+0x152>
  huart->gState = HAL_UART_STATE_READY;
 80043a4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80043a6:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 80043a8:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043aa:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	2300      	movs	r3, #0
  return HAL_OK;
 80043ae:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b0:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80043b2:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80043b4:	e005      	b.n	80043c2 <HAL_UART_Init+0x126>
    switch (clocksource)
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d0c5      	beq.n	8004346 <HAL_UART_Init+0xaa>
  huart->RxISR = NULL;
 80043ba:	2300      	movs	r3, #0
    return HAL_ERROR;
 80043bc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80043be:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80043c0:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80043c2:	b003      	add	sp, #12
 80043c4:	bd30      	pop	{r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80043c6:	2274      	movs	r2, #116	; 0x74
 80043c8:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80043ca:	f7fd fd71 	bl	8001eb0 <HAL_UART_MspInit>
 80043ce:	e76f      	b.n	80042b0 <HAL_UART_Init+0x14>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d0:	2180      	movs	r1, #128	; 0x80
 80043d2:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <HAL_UART_Init+0x1f4>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	0389      	lsls	r1, r1, #14
 80043da:	0003      	movs	r3, r0
 80043dc:	0020      	movs	r0, r4
 80043de:	f7ff fee5 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d10e      	bne.n	8004404 <HAL_UART_Init+0x168>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	075b      	lsls	r3, r3, #29
 80043ec:	d5da      	bpl.n	80043a4 <HAL_UART_Init+0x108>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	4b27      	ldr	r3, [pc, #156]	; (8004490 <HAL_UART_Init+0x1f4>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	0020      	movs	r0, r4
 80043f8:	002b      	movs	r3, r5
 80043fa:	03c9      	lsls	r1, r1, #15
 80043fc:	f7ff fed6 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004400:	2800      	cmp	r0, #0
 8004402:	d0cf      	beq.n	80043a4 <HAL_UART_Init+0x108>
      return HAL_TIMEOUT;
 8004404:	2003      	movs	r0, #3
 8004406:	e7dc      	b.n	80043c2 <HAL_UART_Init+0x126>
    return HAL_ERROR;
 8004408:	2001      	movs	r0, #1
 800440a:	e7da      	b.n	80043c2 <HAL_UART_Init+0x126>
    switch (clocksource)
 800440c:	2b04      	cmp	r3, #4
 800440e:	d024      	beq.n	800445a <HAL_UART_Init+0x1be>
 8004410:	d81b      	bhi.n	800444a <HAL_UART_Init+0x1ae>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d028      	beq.n	8004468 <HAL_UART_Init+0x1cc>
 8004416:	2b02      	cmp	r3, #2
 8004418:	d1cf      	bne.n	80043ba <HAL_UART_Init+0x11e>
 800441a:	481e      	ldr	r0, [pc, #120]	; (8004494 <HAL_UART_Init+0x1f8>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	6861      	ldr	r1, [r4, #4]
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	1818      	adds	r0, r3, r0
 8004424:	f7fb fe70 	bl	8000108 <__udivsi3>
 8004428:	0403      	lsls	r3, r0, #16
 800442a:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800442c:	4916      	ldr	r1, [pc, #88]	; (8004488 <HAL_UART_Init+0x1ec>)
 800442e:	3a10      	subs	r2, #16
 8004430:	428a      	cmp	r2, r1
 8004432:	d8c2      	bhi.n	80043ba <HAL_UART_Init+0x11e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004434:	4a18      	ldr	r2, [pc, #96]	; (8004498 <HAL_UART_Init+0x1fc>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004436:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004438:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800443a:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800443c:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 800443e:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8004444:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8004446:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 8004448:	e78f      	b.n	800436a <HAL_UART_Init+0xce>
    switch (clocksource)
 800444a:	2b08      	cmp	r3, #8
 800444c:	d1b5      	bne.n	80043ba <HAL_UART_Init+0x11e>
 800444e:	2080      	movs	r0, #128	; 0x80
 8004450:	0240      	lsls	r0, r0, #9
 8004452:	e7e3      	b.n	800441c <HAL_UART_Init+0x180>
        pclk = HAL_RCC_GetSysClockFreq();
 8004454:	f7ff f916 	bl	8003684 <HAL_RCC_GetSysClockFreq>
        break;
 8004458:	e759      	b.n	800430e <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetSysClockFreq();
 800445a:	f7ff f913 	bl	8003684 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800445e:	2800      	cmp	r0, #0
 8004460:	d100      	bne.n	8004464 <HAL_UART_Init+0x1c8>
 8004462:	e756      	b.n	8004312 <HAL_UART_Init+0x76>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	e7d9      	b.n	800441c <HAL_UART_Init+0x180>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7ff f94a 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
        break;
 800446c:	e7f7      	b.n	800445e <HAL_UART_Init+0x1c2>
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	ffff69f3 	.word	0xffff69f3
 8004474:	ffffcfff 	.word	0xffffcfff
 8004478:	fffff4ff 	.word	0xfffff4ff
 800447c:	40021000 	.word	0x40021000
 8004480:	0800744c 	.word	0x0800744c
 8004484:	007a1200 	.word	0x007a1200
 8004488:	0000ffef 	.word	0x0000ffef
 800448c:	ffffb7ff 	.word	0xffffb7ff
 8004490:	01ffffff 	.word	0x01ffffff
 8004494:	00f42400 	.word	0x00f42400
 8004498:	0000fff0 	.word	0x0000fff0

0800449c <VBS_GetAvBusVoltage_d>:
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
 800449c:	88c0      	ldrh	r0, [r0, #6]
}
 800449e:	4770      	bx	lr

080044a0 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 80044a0:	0003      	movs	r3, r0
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80044a2:	88c0      	ldrh	r0, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80044a4:	885b      	ldrh	r3, [r3, #2]
 80044a6:	4358      	muls	r0, r3
  temp /= 65536u;

  return ( ( uint16_t )temp );
 80044a8:	0c00      	lsrs	r0, r0, #16
}
 80044aa:	4770      	bx	lr

080044ac <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80044ac:	b510      	push	{r4, lr}
 80044ae:	140a      	asrs	r2, r1, #16
 80044b0:	b20b      	sxth	r3, r1
 80044b2:	b084      	sub	sp, #16
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
            ( int32_t )( Vqd.d ) * Vqd.d;
 80044b4:	0014      	movs	r4, r2
{
 80044b6:	9101      	str	r1, [sp, #4]
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80044b8:	0019      	movs	r1, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 80044ba:	4354      	muls	r4, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80044bc:	4359      	muls	r1, r3
 80044be:	1909      	adds	r1, r1, r4

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80044c0:	8804      	ldrh	r4, [r0, #0]
 80044c2:	4364      	muls	r4, r4
 80044c4:	428c      	cmp	r4, r1
 80044c6:	d217      	bcs.n	80044f8 <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80044c8:	24b2      	movs	r4, #178	; 0xb2
 80044ca:	5d04      	ldrb	r4, [r0, r4]
    uw_temp /= ( uint32_t )( 16777216 );
 80044cc:	0e09      	lsrs	r1, r1, #24
    uw_temp -= pHandle->Start_index;
 80044ce:	1b09      	subs	r1, r1, r4

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80044d0:	24ff      	movs	r4, #255	; 0xff
 80044d2:	4021      	ands	r1, r4
 80044d4:	0049      	lsls	r1, r1, #1
 80044d6:	1840      	adds	r0, r0, r1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80044d8:	8881      	ldrh	r1, [r0, #4]
 80044da:	434b      	muls	r3, r1
 80044dc:	0018      	movs	r0, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80044de:	4351      	muls	r1, r2
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80044e0:	17dc      	asrs	r4, r3, #31
 80044e2:	0464      	lsls	r4, r4, #17
 80044e4:	0c63      	lsrs	r3, r4, #17
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80044e6:	17cc      	asrs	r4, r1, #31
 80044e8:	0464      	lsls	r4, r4, #17
 80044ea:	0c62      	lsrs	r2, r4, #17
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80044ec:	181b      	adds	r3, r3, r0
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80044ee:	1852      	adds	r2, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80044f0:	13db      	asrs	r3, r3, #15
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80044f2:	13d2      	asrs	r2, r2, #15
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80044f4:	b21b      	sxth	r3, r3
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80044f6:	b212      	sxth	r2, r2
  }

  return ( local_vqd );
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	0412      	lsls	r2, r2, #16
 80044fc:	0c18      	lsrs	r0, r3, #16
 80044fe:	4310      	orrs	r0, r2
}
 8004500:	b004      	add	sp, #16
 8004502:	bd10      	pop	{r4, pc}

08004504 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004504:	2300      	movs	r3, #0

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8004506:	2196      	movs	r1, #150	; 0x96
  pHandle->RxTimeoutCountdown = 0;
 8004508:	2200      	movs	r2, #0
 800450a:	8243      	strh	r3, [r0, #18]
  pHandle->TxFrame.Code = 0x0;
 800450c:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.FrameCRC = 0;
 800450e:	5243      	strh	r3, [r0, r1]
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;
 8004510:	3102      	adds	r1, #2
 8004512:	5243      	strh	r3, [r0, r1]

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8004514:	3102      	adds	r1, #2
 8004516:	5442      	strb	r2, [r0, r1]
  pHandle->RxFrame.FrameCRC = 0;
 8004518:	211c      	movs	r1, #28
 800451a:	31ff      	adds	r1, #255	; 0xff
 800451c:	5442      	strb	r2, [r0, r1]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800451e:	228e      	movs	r2, #142	; 0x8e
 8004520:	0052      	lsls	r2, r2, #1
 8004522:	5283      	strh	r3, [r0, r2]
  pHandle->RxFrameLevel = 0;
}
 8004524:	4770      	bx	lr
 8004526:	46c0      	nop			; (mov r8, r8)

08004528 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004528:	2800      	cmp	r0, #0
 800452a:	d004      	beq.n	8004536 <FCP_SetClient+0xe>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800452c:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800452e:	9b00      	ldr	r3, [sp, #0]
    pHandle->ClientEntity = pClient;
 8004530:	6001      	str	r1, [r0, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8004532:	6042      	str	r2, [r0, #4]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004534:	60c3      	str	r3, [r0, #12]
  }
}
 8004536:	4770      	bx	lr

08004538 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 8004538:	b510      	push	{r4, lr}
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 800453a:	2800      	cmp	r0, #0
 800453c:	d011      	beq.n	8004562 <FCP_CalcCRC+0x2a>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800453e:	7844      	ldrb	r4, [r0, #1]
    nSum += pFrame->Code;
 8004540:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8004542:	191b      	adds	r3, r3, r4

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004544:	2c00      	cmp	r4, #0
 8004546:	d008      	beq.n	800455a <FCP_CalcCRC+0x22>
 8004548:	2200      	movs	r2, #0
 800454a:	3002      	adds	r0, #2
    {
      nSum += pFrame->Buffer[idx];
 800454c:	5c81      	ldrb	r1, [r0, r2]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800454e:	3201      	adds	r2, #1
      nSum += pFrame->Buffer[idx];
 8004550:	185b      	adds	r3, r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004552:	b2d1      	uxtb	r1, r2
      nSum += pFrame->Buffer[idx];
 8004554:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004556:	428c      	cmp	r4, r1
 8004558:	d8f8      	bhi.n	800454c <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800455a:	0a18      	lsrs	r0, r3, #8
 800455c:	1818      	adds	r0, r3, r0
 800455e:	b2c0      	uxtb	r0, r0
  }

  return nCRC ;
}
 8004560:	bd10      	pop	{r4, pc}
  uint8_t nCRC = 0;
 8004562:	2000      	movs	r0, #0
 8004564:	e7fc      	b.n	8004560 <FCP_CalcCRC+0x28>
 8004566:	46c0      	nop			; (mov r8, r8)

08004568 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8004568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456a:	4646      	mov	r6, r8
 800456c:	464f      	mov	r7, r9
 800456e:	46d6      	mov	lr, sl
 8004570:	b5c0      	push	{r6, r7, lr}

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004572:	6a87      	ldr	r7, [r0, #40]	; 0x28
                                     pHandle->_Super.bElToMecRatio;
 8004574:	7842      	ldrb	r2, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004576:	8ac3      	ldrh	r3, [r0, #22]
  hMaxReliableElSpeedUnit *= 2u;
 8004578:	8a86      	ldrh	r6, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800457a:	4353      	muls	r3, r2
  hMaxReliableElSpeedUnit *= 2u;
 800457c:	4356      	muls	r6, r2
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800457e:	0c3a      	lsrs	r2, r7, #16
 8004580:	4690      	mov	r8, r2
 8004582:	22c2      	movs	r2, #194	; 0xc2
 8004584:	4641      	mov	r1, r8
  hMaxReliableElSpeedUnit *= 2u;
 8004586:	0076      	lsls	r6, r6, #1
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004588:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800458a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
 800458c:	0004      	movs	r4, r0
  hMaxReliableElSpeedUnit *= 2u;
 800458e:	b2b6      	uxth	r6, r6
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004590:	5281      	strh	r1, [r0, r2]

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8004592:	2b03      	cmp	r3, #3
 8004594:	d800      	bhi.n	8004598 <HALL_Init+0x30>
 8004596:	e06e      	b.n	8004676 <HALL_Init+0x10e>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8004598:	0899      	lsrs	r1, r3, #2
 800459a:	004b      	lsls	r3, r1, #1
 800459c:	1859      	adds	r1, r3, r1
 800459e:	4837      	ldr	r0, [pc, #220]	; (800467c <HALL_Init+0x114>)
 80045a0:	0049      	lsls	r1, r1, #1
 80045a2:	f7fb fdb1 	bl	8000108 <__udivsi3>
 80045a6:	b282      	uxth	r2, r0
 80045a8:	23c0      	movs	r3, #192	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80045aa:	21fa      	movs	r1, #250	; 0xfa
 80045ac:	52e2      	strh	r2, [r4, r3]
 80045ae:	4643      	mov	r3, r8
 80045b0:	0089      	lsls	r1, r1, #2
 80045b2:	4358      	muls	r0, r3
 80045b4:	f7fb fe32 	bl	800021c <__divsi3>
 80045b8:	23ae      	movs	r3, #174	; 0xae
 80045ba:	52e0      	strh	r0, [r4, r3]

  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80045bc:	0400      	lsls	r0, r0, #16
 80045be:	0c03      	lsrs	r3, r0, #16
 80045c0:	4699      	mov	r9, r3
 80045c2:	23b8      	movs	r3, #184	; 0xb8
 80045c4:	50e0      	str	r0, [r4, r3]
 80045c6:	4698      	mov	r8, r3

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 80045c8:	3b08      	subs	r3, #8
 80045ca:	52e6      	strh	r6, [r4, r3]

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80045cc:	2106      	movs	r1, #6
 80045ce:	0038      	movs	r0, r7
 80045d0:	f7fb fd9a 	bl	8000108 <__udivsi3>
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80045d4:	8b67      	ldrh	r7, [r4, #26]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80045d6:	4682      	mov	sl, r0
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80045d8:	0039      	movs	r1, r7
 80045da:	f7fb fd95 	bl	8000108 <__udivsi3>
 80045de:	69e3      	ldr	r3, [r4, #28]

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
                       / hMaxReliableElSpeedUnit);
 80045e0:	0031      	movs	r1, r6
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80045e2:	4358      	muls	r0, r3
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80045e4:	23b4      	movs	r3, #180	; 0xb4
 80045e6:	50e0      	str	r0, [r4, r3]
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80045e8:	4653      	mov	r3, sl
 80045ea:	0098      	lsls	r0, r3, #2
 80045ec:	4450      	add	r0, sl
 80045ee:	0040      	lsls	r0, r0, #1
                       / hMaxReliableElSpeedUnit);
 80045f0:	f7fb fd8a 	bl	8000108 <__udivsi3>
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80045f4:	23bc      	movs	r3, #188	; 0xbc
 80045f6:	50e0      	str	r0, [r4, r3]

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80045f8:	330a      	adds	r3, #10
 80045fa:	5ce0      	ldrb	r0, [r4, r3]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80045fc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80045fe:	4378      	muls	r0, r7
 8004600:	f7fb fe0c 	bl	800021c <__divsi3>
 8004604:	23c4      	movs	r3, #196	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 8004606:	2249      	movs	r2, #73	; 0x49
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004608:	21f0      	movs	r1, #240	; 0xf0
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800460a:	3801      	subs	r0, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800460c:	52e0      	strh	r0, [r4, r3]
  pHandle->SensorIsReliable = true;
 800460e:	3bc3      	subs	r3, #195	; 0xc3
 8004610:	54a3      	strb	r3, [r4, r2]

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8004612:	3a01      	subs	r2, #1
 8004614:	69a8      	ldr	r0, [r5, #24]
 8004616:	5ca2      	ldrb	r2, [r4, r2]
 8004618:	4388      	bics	r0, r1
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	4302      	orrs	r2, r0
 800461e:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004620:	464a      	mov	r2, r9
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8004622:	2100      	movs	r1, #0
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8004624:	2004      	movs	r0, #4
  WRITE_REG(TIMx->PSC, Prescaler);
 8004626:	62aa      	str	r2, [r5, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004628:	696a      	ldr	r2, [r5, #20]
 800462a:	431a      	orrs	r2, r3
 800462c:	616a      	str	r2, [r5, #20]
 800462e:	6129      	str	r1, [r5, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8004630:	682a      	ldr	r2, [r5, #0]
 8004632:	4302      	orrs	r2, r0
 8004634:	602a      	str	r2, [r5, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004636:	68ea      	ldr	r2, [r5, #12]
 8004638:	3802      	subs	r0, #2
 800463a:	4302      	orrs	r2, r0
 800463c:	60ea      	str	r2, [r5, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800463e:	68ea      	ldr	r2, [r5, #12]
 8004640:	431a      	orrs	r2, r3
 8004642:	60ea      	str	r2, [r5, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8004644:	6269      	str	r1, [r5, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8004646:	6a2a      	ldr	r2, [r5, #32]
 8004648:	431a      	orrs	r2, r3
 800464a:	622a      	str	r2, [r5, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800464c:	682a      	ldr	r2, [r5, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	602b      	str	r3, [r5, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8004652:	2326      	movs	r3, #38	; 0x26
 8004654:	5ce2      	ldrb	r2, [r4, r3]

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8004656:	2a00      	cmp	r2, #0
 8004658:	d008      	beq.n	800466c <HALL_Init+0x104>
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800465a:	4643      	mov	r3, r8
 800465c:	58e1      	ldr	r1, [r4, r3]
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800465e:	2300      	movs	r3, #0
 8004660:	3450      	adds	r4, #80	; 0x50
 8004662:	3301      	adds	r3, #1
 8004664:	b2db      	uxtb	r3, r3
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004666:	c402      	stmia	r4!, {r1}
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8004668:	429a      	cmp	r2, r3
 800466a:	d1fa      	bne.n	8004662 <HALL_Init+0xfa>
  }
}
 800466c:	bce0      	pop	{r5, r6, r7}
 800466e:	46ba      	mov	sl, r7
 8004670:	46b1      	mov	r9, r6
 8004672:	46a8      	mov	r8, r5
 8004674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004676:	2096      	movs	r0, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8004678:	2296      	movs	r2, #150	; 0x96
 800467a:	e795      	b.n	80045a8 <HALL_Init+0x40>
 800467c:	00002710 	.word	0x00002710

08004680 <HALL_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
 8004680:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004682:	2502      	movs	r5, #2
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004684:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8004686:	2200      	movs	r2, #0
 8004688:	68d9      	ldr	r1, [r3, #12]
  pHandle->RatioInc = false;

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 800468a:	2401      	movs	r4, #1
 800468c:	43a9      	bics	r1, r5
 800468e:	60d9      	str	r1, [r3, #12]
  pHandle->RatioDec = false;
 8004690:	214a      	movs	r1, #74	; 0x4a
 8004692:	5442      	strb	r2, [r0, r1]
  pHandle->RatioInc = false;
 8004694:	3101      	adds	r1, #1
 8004696:	5442      	strb	r2, [r0, r1]
  pHandle->SensorIsReliable = true;
 8004698:	3902      	subs	r1, #2
 800469a:	5444      	strb	r4, [r0, r1]

  /* Acceleration measurement not implemented.*/
  pHandle->_Super.hMecAccelUnitP = 0;

  pHandle->FirstCapt = 0u;
 800469c:	264c      	movs	r6, #76	; 0x4c
  pHandle->_Super.hMecAccelUnitP = 0;
 800469e:	2100      	movs	r1, #0
 80046a0:	8242      	strh	r2, [r0, #18]
  pHandle->FirstCapt = 0u;
 80046a2:	5581      	strb	r1, [r0, r6]
  pHandle->BufferFilled = 0u;
 80046a4:	3601      	adds	r6, #1
 80046a6:	5581      	strb	r1, [r0, r6]
  pHandle->OVFCounter = 0u;
 80046a8:	3601      	adds	r6, #1
 80046aa:	5581      	strb	r1, [r0, r6]

  pHandle->CompSpeed = 0;
 80046ac:	365e      	adds	r6, #94	; 0x5e
 80046ae:	5382      	strh	r2, [r0, r6]

  pHandle->Direction = POSITIVE;
 80046b0:	3e0a      	subs	r6, #10
 80046b2:	5584      	strb	r4, [r0, r6]

  /* Initialize speed buffer index */
  pHandle->SpeedFIFOIdx = 0u;
 80046b4:	3e0a      	subs	r6, #10
 80046b6:	5581      	strb	r1, [r0, r6]


  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
 80046b8:	7001      	strb	r1, [r0, #0]
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 80046ba:	21ae      	movs	r1, #174	; 0xae
 80046bc:	5a41      	ldrh	r1, [r0, r1]
  WRITE_REG(TIMx->PSC, Prescaler);
 80046be:	6299      	str	r1, [r3, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	4321      	orrs	r1, r4
 80046c6:	6019      	str	r1, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	432a      	orrs	r2, r5
 80046cc:	60da      	str	r2, [r3, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 80046ce:	2320      	movs	r3, #32
 80046d0:	5cc3      	ldrb	r3, [r0, r3]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d120      	bne.n	8004718 <HALL_Clear+0x98>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80046d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80046d8:	6c46      	ldr	r6, [r0, #68]	; 0x44
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80046da:	691a      	ldr	r2, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80046dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80046de:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80046e0:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80046e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80046e4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80046e6:	4032      	ands	r2, r6
 80046e8:	4025      	ands	r5, r4
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	1b92      	subs	r2, r2, r6
 80046ee:	1b2c      	subs	r4, r5, r4
 80046f0:	400b      	ands	r3, r1
 80046f2:	4256      	negs	r6, r2
 80046f4:	4172      	adcs	r2, r6
 80046f6:	4265      	negs	r5, r4
 80046f8:	416c      	adcs	r4, r5
 80046fa:	1a5b      	subs	r3, r3, r1
 80046fc:	4259      	negs	r1, r3
 80046fe:	414b      	adcs	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004700:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004702:	0064      	lsls	r4, r4, #1
 8004704:	4322      	orrs	r2, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004706:	4313      	orrs	r3, r2
 8004708:	22a6      	movs	r2, #166	; 0xa6
 800470a:	5483      	strb	r3, [r0, r2]
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 800470c:	2b06      	cmp	r3, #6
 800470e:	d84c      	bhi.n	80047aa <HALL_Clear+0x12a>
 8004710:	4a29      	ldr	r2, [pc, #164]	; (80047b8 <HALL_Clear+0x138>)
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	58d3      	ldr	r3, [r2, r3]
 8004716:	469f      	mov	pc, r3
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004718:	6b83      	ldr	r3, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800471a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800471c:	691c      	ldr	r4, [r3, #16]
 800471e:	6c03      	ldr	r3, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004720:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	6912      	ldr	r2, [r2, #16]
 8004726:	402b      	ands	r3, r5
 8004728:	1b5b      	subs	r3, r3, r5
 800472a:	425d      	negs	r5, r3
 800472c:	416b      	adcs	r3, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800472e:	005d      	lsls	r5, r3, #1
 8004730:	6b43      	ldr	r3, [r0, #52]	; 0x34
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004732:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004734:	401a      	ands	r2, r3
 8004736:	400c      	ands	r4, r1
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	425a      	negs	r2, r3
 800473c:	4153      	adcs	r3, r2
 800473e:	1a62      	subs	r2, r4, r1
 8004740:	4251      	negs	r1, r2
 8004742:	414a      	adcs	r2, r1
 8004744:	2104      	movs	r1, #4
 8004746:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004748:	432b      	orrs	r3, r5
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800474a:	404a      	eors	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800474c:	4313      	orrs	r3, r2
 800474e:	b2db      	uxtb	r3, r3
 8004750:	e7da      	b.n	8004708 <HALL_Clear+0x88>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HALL_Clear+0x13c>)
 8004754:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004756:	4694      	mov	ip, r2
 8004758:	4463      	add	r3, ip
 800475a:	b21b      	sxth	r3, r3
 800475c:	8083      	strh	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800475e:	22aa      	movs	r2, #170	; 0xaa
 8004760:	5283      	strh	r3, [r0, r2]
}
 8004762:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004764:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <HALL_Clear+0x140>)
 8004766:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004768:	4694      	mov	ip, r2
 800476a:	4463      	add	r3, ip
 800476c:	b21b      	sxth	r3, r3
 800476e:	8083      	strh	r3, [r0, #4]
      break;
 8004770:	e7f5      	b.n	800475e <HALL_Clear+0xde>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004772:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <HALL_Clear+0x144>)
 8004774:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004776:	4694      	mov	ip, r2
 8004778:	4463      	add	r3, ip
 800477a:	b21b      	sxth	r3, r3
 800477c:	8083      	strh	r3, [r0, #4]
      break;
 800477e:	e7ee      	b.n	800475e <HALL_Clear+0xde>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004780:	4a11      	ldr	r2, [pc, #68]	; (80047c8 <HALL_Clear+0x148>)
 8004782:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004784:	4694      	mov	ip, r2
 8004786:	4463      	add	r3, ip
 8004788:	b21b      	sxth	r3, r3
 800478a:	8083      	strh	r3, [r0, #4]
      break;
 800478c:	e7e7      	b.n	800475e <HALL_Clear+0xde>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 800478e:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <HALL_Clear+0x14c>)
 8004790:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004792:	4694      	mov	ip, r2
 8004794:	4463      	add	r3, ip
 8004796:	b21b      	sxth	r3, r3
 8004798:	8083      	strh	r3, [r0, #4]
      break;
 800479a:	e7e0      	b.n	800475e <HALL_Clear+0xde>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800479c:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <HALL_Clear+0x150>)
 800479e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80047a0:	4694      	mov	ip, r2
 80047a2:	4463      	add	r3, ip
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	8083      	strh	r3, [r0, #4]
      break;
 80047a8:	e7d9      	b.n	800475e <HALL_Clear+0xde>
      pHandle->SensorIsReliable = false;
 80047aa:	2349      	movs	r3, #73	; 0x49
 80047ac:	2200      	movs	r2, #0
 80047ae:	54c2      	strb	r2, [r0, r3]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80047b0:	2204      	movs	r2, #4
 80047b2:	5e83      	ldrsh	r3, [r0, r2]
      break;
 80047b4:	e7d3      	b.n	800475e <HALL_Clear+0xde>
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	08007450 	.word	0x08007450
 80047bc:	ffffc001 	.word	0xffffc001
 80047c0:	00003fff 	.word	0x00003fff
 80047c4:	ffff9556 	.word	0xffff9556
 80047c8:	00006aaa 	.word	0x00006aaa
 80047cc:	ffffeaab 	.word	0xffffeaab
 80047d0:	00001555 	.word	0x00001555

080047d4 <HALL_CalcElAngle>:
{
 80047d4:	b510      	push	{r4, lr}
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80047d6:	230e      	movs	r3, #14
 80047d8:	5ec1      	ldrsh	r1, [r0, r3]
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <HALL_CalcElAngle+0x38>)
{
 80047dc:	0002      	movs	r2, r0
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80047de:	4299      	cmp	r1, r3
 80047e0:	d00e      	beq.n	8004800 <HALL_CalcElAngle+0x2c>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80047e2:	24aa      	movs	r4, #170	; 0xaa
 80047e4:	5b00      	ldrh	r0, [r0, r4]
 80047e6:	b28b      	uxth	r3, r1
 80047e8:	1818      	adds	r0, r3, r0
 80047ea:	5310      	strh	r0, [r2, r4]
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80047ec:	8890      	ldrh	r0, [r2, #4]
 80047ee:	181b      	adds	r3, r3, r0
 80047f0:	20ac      	movs	r0, #172	; 0xac
 80047f2:	5a10      	ldrh	r0, [r2, r0]
 80047f4:	1818      	adds	r0, r3, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80047f6:	23a0      	movs	r3, #160	; 0xa0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80047f8:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80047fa:	52d1      	strh	r1, [r2, r3]
 80047fc:	8090      	strh	r0, [r2, #4]
}
 80047fe:	bd10      	pop	{r4, pc}
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8004800:	21a0      	movs	r1, #160	; 0xa0
 8004802:	8883      	ldrh	r3, [r0, #4]
 8004804:	5a40      	ldrh	r0, [r0, r1]
 8004806:	1818      	adds	r0, r3, r0
 8004808:	b200      	sxth	r0, r0
 800480a:	e7f7      	b.n	80047fc <HALL_CalcElAngle+0x28>
 800480c:	00007fff 	.word	0x00007fff

08004810 <HALL_CalcAvrgMecSpeedUnit>:
  if ( pHandle->SensorIsReliable )
 8004810:	2349      	movs	r3, #73	; 0x49
{
 8004812:	b570      	push	{r4, r5, r6, lr}
 8004814:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 8004816:	5cc0      	ldrb	r0, [r0, r3]
{
 8004818:	000d      	movs	r5, r1
  if ( pHandle->SensorIsReliable )
 800481a:	2800      	cmp	r0, #0
 800481c:	d00f      	beq.n	800483e <HALL_CalcAvrgMecSpeedUnit+0x2e>
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 800481e:	22ae      	movs	r2, #174	; 0xae
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8004822:	5aa2      	ldrh	r2, [r4, r2]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	429a      	cmp	r2, r3
 8004828:	d810      	bhi.n	800484c <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 800482e:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8004830:	0029      	movs	r1, r5
 8004832:	0020      	movs	r0, r4
 8004834:	f001 f942 	bl	8005abc <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004838:	2200      	movs	r2, #0
 800483a:	5eab      	ldrsh	r3, [r5, r2]
 800483c:	e004      	b.n	8004848 <HALL_CalcAvrgMecSpeedUnit+0x38>
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800483e:	78e3      	ldrb	r3, [r4, #3]
    pHandle->_Super.hElSpeedDpp = 0;
 8004840:	81e0      	strh	r0, [r4, #14]
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8004842:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004848:	81a3      	strh	r3, [r4, #12]
}
 800484a:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 800484c:	23a4      	movs	r3, #164	; 0xa4
 800484e:	5ee6      	ldrsh	r6, [r4, r3]
 8004850:	81e6      	strh	r6, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8004852:	2e00      	cmp	r6, #0
 8004854:	d015      	beq.n	8004882 <HALL_CalcAvrgMecSpeedUnit+0x72>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HALL_CalcAvrgMecSpeedUnit+0x98>)
 8004858:	429e      	cmp	r6, r3
 800485a:	d021      	beq.n	80048a0 <HALL_CalcAvrgMecSpeedUnit+0x90>
          if (pHandle->HallMtpa == true)
 800485c:	23c7      	movs	r3, #199	; 0xc7
 800485e:	5ce3      	ldrb	r3, [r4, r3]
            pHandle->CompSpeed = 0;
 8004860:	2000      	movs	r0, #0
          if (pHandle->HallMtpa == true)
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00f      	beq.n	8004886 <HALL_CalcAvrgMecSpeedUnit+0x76>
 8004866:	23ac      	movs	r3, #172	; 0xac
 8004868:	52e0      	strh	r0, [r4, r3]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800486a:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800486c:	69e3      	ldr	r3, [r4, #28]
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800486e:	4346      	muls	r6, r0
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004870:	7861      	ldrb	r1, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004872:	00b0      	lsls	r0, r6, #2
 8004874:	1980      	adds	r0, r0, r6
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004876:	4359      	muls	r1, r3
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004878:	0040      	lsls	r0, r0, #1
 800487a:	f7fb fccf 	bl	800021c <__divsi3>
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800487e:	8028      	strh	r0, [r5, #0]
 8004880:	e7d6      	b.n	8004830 <HALL_CalcAvrgMecSpeedUnit+0x20>
        *hMecSpeedUnit = 0;
 8004882:	800e      	strh	r6, [r1, #0]
 8004884:	e7d4      	b.n	8004830 <HALL_CalcAvrgMecSpeedUnit+0x20>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8004886:	33aa      	adds	r3, #170	; 0xaa
 8004888:	5ae0      	ldrh	r0, [r4, r3]
 800488a:	88a3      	ldrh	r3, [r4, #4]
 800488c:	1ac0      	subs	r0, r0, r3
 800488e:	23a8      	movs	r3, #168	; 0xa8
 8004890:	b200      	sxth	r0, r0
 8004892:	52e0      	strh	r0, [r4, r3]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8004894:	331c      	adds	r3, #28
 8004896:	5ae1      	ldrh	r1, [r4, r3]
            ( ( int32_t )( pHandle->DeltaAngle ) /
 8004898:	f7fb fcc0 	bl	800021c <__divsi3>
            pHandle->CompSpeed = ( int16_t )
 800489c:	b200      	sxth	r0, r0
 800489e:	e7e2      	b.n	8004866 <HALL_CalcAvrgMecSpeedUnit+0x56>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80048a0:	23b0      	movs	r3, #176	; 0xb0
 80048a2:	5ae3      	ldrh	r3, [r4, r3]
 80048a4:	800b      	strh	r3, [r1, #0]
 80048a6:	e7c3      	b.n	8004830 <HALL_CalcAvrgMecSpeedUnit+0x20>
 80048a8:	00007fff 	.word	0x00007fff

080048ac <HALL_TIMx_CC_IRQHandler>:
{
 80048ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ae:	46c6      	mov	lr, r8
  if ( pHandle->SensorIsReliable )
 80048b0:	2349      	movs	r3, #73	; 0x49
{
 80048b2:	b500      	push	{lr}
  if ( pHandle->SensorIsReliable )
 80048b4:	5cc3      	ldrb	r3, [r0, r3]
{
 80048b6:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d041      	beq.n	8004940 <HALL_TIMx_CC_IRQHandler+0x94>
    bPrevHallState = pHandle->HallState;
 80048bc:	23a6      	movs	r3, #166	; 0xa6
 80048be:	5cc1      	ldrb	r1, [r0, r3]
    PrevDirection = pHandle->Direction;
 80048c0:	3b04      	subs	r3, #4
 80048c2:	56c5      	ldrsb	r5, [r0, r3]
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80048c4:	3b82      	subs	r3, #130	; 0x82
 80048c6:	5cc3      	ldrb	r3, [r0, r3]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d03d      	beq.n	8004948 <HALL_TIMx_CC_IRQHandler+0x9c>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80048cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80048ce:	6c67      	ldr	r7, [r4, #68]	; 0x44
 80048d0:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80048d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80048d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048d6:	691b      	ldr	r3, [r3, #16]
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80048d8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80048da:	403b      	ands	r3, r7
 80048dc:	1bdb      	subs	r3, r3, r7
 80048de:	425f      	negs	r7, r3
 80048e0:	417b      	adcs	r3, r7
 80048e2:	6912      	ldr	r2, [r2, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80048e4:	005f      	lsls	r7, r3, #1
 80048e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048e8:	4006      	ands	r6, r0
 80048ea:	401a      	ands	r2, r3
 80048ec:	1a30      	subs	r0, r6, r0
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	4242      	negs	r2, r0
 80048f2:	4150      	adcs	r0, r2
 80048f4:	425a      	negs	r2, r3
 80048f6:	4153      	adcs	r3, r2
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80048f8:	2204      	movs	r2, #4
 80048fa:	0080      	lsls	r0, r0, #2
 80048fc:	433b      	orrs	r3, r7
 80048fe:	4050      	eors	r0, r2
 8004900:	4303      	orrs	r3, r0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	22a6      	movs	r2, #166	; 0xa6
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004906:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004908:	54a3      	strb	r3, [r4, r2]
    switch ( pHandle->HallState )
 800490a:	2b06      	cmp	r3, #6
 800490c:	d803      	bhi.n	8004916 <HALL_TIMx_CC_IRQHandler+0x6a>
 800490e:	4aa6      	ldr	r2, [pc, #664]	; (8004ba8 <HALL_TIMx_CC_IRQHandler+0x2fc>)
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	58d3      	ldr	r3, [r2, r3]
 8004914:	469f      	mov	pc, r3
        pHandle->SensorIsReliable = false;
 8004916:	2349      	movs	r3, #73	; 0x49
 8004918:	2200      	movs	r2, #0
 800491a:	54e2      	strb	r2, [r4, r3]
    PrevDirection = pHandle->Direction;
 800491c:	002e      	movs	r6, r5
    if (pHandle->HallMtpa == true)
 800491e:	23c7      	movs	r3, #199	; 0xc7
 8004920:	5ce3      	ldrb	r3, [r4, r3]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HALL_TIMx_CC_IRQHandler+0x80>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8004926:	23aa      	movs	r3, #170	; 0xaa
 8004928:	5ae3      	ldrh	r3, [r4, r3]
 800492a:	80a3      	strh	r3, [r4, #4]
    if ( pHandle->FirstCapt == 0u )
 800492c:	234c      	movs	r3, #76	; 0x4c
 800492e:	5ce2      	ldrb	r2, [r4, r3]
 8004930:	2a00      	cmp	r2, #0
 8004932:	d000      	beq.n	8004936 <HALL_TIMx_CC_IRQHandler+0x8a>
 8004934:	e076      	b.n	8004a24 <HALL_TIMx_CC_IRQHandler+0x178>
      pHandle->FirstCapt++;
 8004936:	5ce2      	ldrb	r2, [r4, r3]
 8004938:	3201      	adds	r2, #1
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	54e2      	strb	r2, [r4, r3]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800493e:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004940:	2000      	movs	r0, #0
 8004942:	bc80      	pop	{r7}
 8004944:	46b8      	mov	r8, r7
 8004946:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004948:	6c03      	ldr	r3, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800494a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004950:	691f      	ldr	r7, [r3, #16]
 8004952:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004954:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8004956:	4037      	ands	r7, r6
 8004958:	4002      	ands	r2, r0
 800495a:	1a12      	subs	r2, r2, r0
 800495c:	4250      	negs	r0, r2
 800495e:	4142      	adcs	r2, r0
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004964:	1bbe      	subs	r6, r7, r6
 8004966:	4003      	ands	r3, r0
 8004968:	4277      	negs	r7, r6
 800496a:	417e      	adcs	r6, r7
 800496c:	1a1b      	subs	r3, r3, r0
 800496e:	4258      	negs	r0, r3
 8004970:	4143      	adcs	r3, r0
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004972:	0092      	lsls	r2, r2, #2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8004974:	0076      	lsls	r6, r6, #1
 8004976:	4332      	orrs	r2, r6
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004978:	4313      	orrs	r3, r2
 800497a:	e7c3      	b.n	8004904 <HALL_TIMx_CC_IRQHandler+0x58>
        if ( bPrevHallState == STATE_2 )
 800497c:	2902      	cmp	r1, #2
 800497e:	d100      	bne.n	8004982 <HALL_TIMx_CC_IRQHandler+0xd6>
 8004980:	e0eb      	b.n	8004b5a <HALL_TIMx_CC_IRQHandler+0x2ae>
        else if ( bPrevHallState == STATE_4 )
 8004982:	2904      	cmp	r1, #4
 8004984:	d1ca      	bne.n	800491c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 8004986:	23a2      	movs	r3, #162	; 0xa2
 8004988:	22ff      	movs	r2, #255	; 0xff
 800498a:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800498c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800498e:	4a87      	ldr	r2, [pc, #540]	; (8004bac <HALL_TIMx_CC_IRQHandler+0x300>)
 8004990:	e039      	b.n	8004a06 <HALL_TIMx_CC_IRQHandler+0x15a>
        if ( bPrevHallState == STATE_4 )
 8004992:	2904      	cmp	r1, #4
 8004994:	d100      	bne.n	8004998 <HALL_TIMx_CC_IRQHandler+0xec>
 8004996:	e0d8      	b.n	8004b4a <HALL_TIMx_CC_IRQHandler+0x29e>
        else if ( bPrevHallState == STATE_1 )
 8004998:	2901      	cmp	r1, #1
 800499a:	d1bf      	bne.n	800491c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 800499c:	23a2      	movs	r3, #162	; 0xa2
 800499e:	22ff      	movs	r2, #255	; 0xff
 80049a0:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80049a2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80049a4:	4a82      	ldr	r2, [pc, #520]	; (8004bb0 <HALL_TIMx_CC_IRQHandler+0x304>)
 80049a6:	e02e      	b.n	8004a06 <HALL_TIMx_CC_IRQHandler+0x15a>
        if ( bPrevHallState == STATE_6 )
 80049a8:	2906      	cmp	r1, #6
 80049aa:	d100      	bne.n	80049ae <HALL_TIMx_CC_IRQHandler+0x102>
 80049ac:	e0e5      	b.n	8004b7a <HALL_TIMx_CC_IRQHandler+0x2ce>
        else if ( bPrevHallState == STATE_5 )
 80049ae:	2905      	cmp	r1, #5
 80049b0:	d1b4      	bne.n	800491c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 80049b2:	23a2      	movs	r3, #162	; 0xa2
 80049b4:	22ff      	movs	r2, #255	; 0xff
 80049b6:	2601      	movs	r6, #1
 80049b8:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 80049ba:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80049bc:	3308      	adds	r3, #8
 80049be:	52e2      	strh	r2, [r4, r3]
 80049c0:	4276      	negs	r6, r6
 80049c2:	e026      	b.n	8004a12 <HALL_TIMx_CC_IRQHandler+0x166>
        if ( bPrevHallState == STATE_1 )
 80049c4:	2901      	cmp	r1, #1
 80049c6:	d100      	bne.n	80049ca <HALL_TIMx_CC_IRQHandler+0x11e>
 80049c8:	e0d2      	b.n	8004b70 <HALL_TIMx_CC_IRQHandler+0x2c4>
        else if ( bPrevHallState == STATE_2 )
 80049ca:	2902      	cmp	r1, #2
 80049cc:	d1a6      	bne.n	800491c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 80049ce:	23a2      	movs	r3, #162	; 0xa2
 80049d0:	22ff      	movs	r2, #255	; 0xff
 80049d2:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80049d4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80049d6:	4a77      	ldr	r2, [pc, #476]	; (8004bb4 <HALL_TIMx_CC_IRQHandler+0x308>)
 80049d8:	e015      	b.n	8004a06 <HALL_TIMx_CC_IRQHandler+0x15a>
        if ( bPrevHallState == STATE_3 )
 80049da:	2903      	cmp	r1, #3
 80049dc:	d100      	bne.n	80049e0 <HALL_TIMx_CC_IRQHandler+0x134>
 80049de:	e0d8      	b.n	8004b92 <HALL_TIMx_CC_IRQHandler+0x2e6>
        else if ( bPrevHallState == STATE_6 )
 80049e0:	2906      	cmp	r1, #6
 80049e2:	d19b      	bne.n	800491c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 80049e4:	23a2      	movs	r3, #162	; 0xa2
 80049e6:	22ff      	movs	r2, #255	; 0xff
 80049e8:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80049ea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80049ec:	4a72      	ldr	r2, [pc, #456]	; (8004bb8 <HALL_TIMx_CC_IRQHandler+0x30c>)
 80049ee:	e00a      	b.n	8004a06 <HALL_TIMx_CC_IRQHandler+0x15a>
        if ( bPrevHallState == STATE_5 )
 80049f0:	2905      	cmp	r1, #5
 80049f2:	d100      	bne.n	80049f6 <HALL_TIMx_CC_IRQHandler+0x14a>
 80049f4:	e0c7      	b.n	8004b86 <HALL_TIMx_CC_IRQHandler+0x2da>
        else if ( bPrevHallState == STATE_3 )
 80049f6:	2903      	cmp	r1, #3
 80049f8:	d000      	beq.n	80049fc <HALL_TIMx_CC_IRQHandler+0x150>
 80049fa:	e78f      	b.n	800491c <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 80049fc:	23a2      	movs	r3, #162	; 0xa2
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004a02:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004a04:	4a6d      	ldr	r2, [pc, #436]	; (8004bbc <HALL_TIMx_CC_IRQHandler+0x310>)
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004a06:	4694      	mov	ip, r2
 8004a08:	2601      	movs	r6, #1
 8004a0a:	22aa      	movs	r2, #170	; 0xaa
 8004a0c:	4463      	add	r3, ip
 8004a0e:	52a3      	strh	r3, [r4, r2]
 8004a10:	4276      	negs	r6, r6
    if (pHandle->Direction != PrevDirection)
 8004a12:	42b5      	cmp	r5, r6
 8004a14:	d100      	bne.n	8004a18 <HALL_TIMx_CC_IRQHandler+0x16c>
 8004a16:	e782      	b.n	800491e <HALL_TIMx_CC_IRQHandler+0x72>
      pHandle->BufferFilled = 0 ;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	224d      	movs	r2, #77	; 0x4d
 8004a1c:	54a3      	strb	r3, [r4, r2]
      pHandle->SpeedFIFOIdx = 0;
 8004a1e:	324b      	adds	r2, #75	; 0x4b
 8004a20:	54a3      	strb	r3, [r4, r2]
 8004a22:	e77c      	b.n	800491e <HALL_TIMx_CC_IRQHandler+0x72>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8004a24:	234d      	movs	r3, #77	; 0x4d
 8004a26:	2126      	movs	r1, #38	; 0x26
 8004a28:	5ce2      	ldrb	r2, [r4, r3]
 8004a2a:	5c61      	ldrb	r1, [r4, r1]
 8004a2c:	428a      	cmp	r2, r1
 8004a2e:	d203      	bcs.n	8004a38 <HALL_TIMx_CC_IRQHandler+0x18c>
        pHandle->BufferFilled++;
 8004a30:	5ce2      	ldrb	r2, [r4, r3]
 8004a32:	3201      	adds	r2, #1
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	54e2      	strb	r2, [r4, r3]
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004a38:	254e      	movs	r5, #78	; 0x4e
 8004a3a:	6b47      	ldr	r7, [r0, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004a3c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8004a3e:	b293      	uxth	r3, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004a40:	5d62      	ldrb	r2, [r4, r5]
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8004a42:	469c      	mov	ip, r3
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004a44:	043b      	lsls	r3, r7, #16
 8004a46:	0412      	lsls	r2, r2, #16
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	189b      	adds	r3, r3, r2
      if ( pHandle->OVFCounter != 0u )
 8004a4c:	5d62      	ldrb	r2, [r4, r5]
 8004a4e:	b2d5      	uxtb	r5, r2
 8004a50:	46a8      	mov	r8, r5
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	d03b      	beq.n	8004ace <HALL_TIMx_CC_IRQHandler+0x222>
        hAux = hPrscBuf + 1u;
 8004a56:	4662      	mov	r2, ip
 8004a58:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 8004a5a:	b292      	uxth	r2, r2
 8004a5c:	4353      	muls	r3, r2
        if ( pHandle->RatioInc )
 8004a5e:	224b      	movs	r2, #75	; 0x4b
 8004a60:	5ca5      	ldrb	r5, [r4, r2]
 8004a62:	2d00      	cmp	r5, #0
 8004a64:	d03e      	beq.n	8004ae4 <HALL_TIMx_CC_IRQHandler+0x238>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8004a66:	2000      	movs	r0, #0
 8004a68:	54a0      	strb	r0, [r4, r2]
        if ( wCaptBuf < pHandle->MinPeriod )
 8004a6a:	22bc      	movs	r2, #188	; 0xbc
 8004a6c:	58a2      	ldr	r2, [r4, r2]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d829      	bhi.n	8004ac6 <HALL_TIMx_CC_IRQHandler+0x21a>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004a72:	209c      	movs	r0, #156	; 0x9c
 8004a74:	2298      	movs	r2, #152	; 0x98
 8004a76:	4684      	mov	ip, r0
 8004a78:	5ca2      	ldrb	r2, [r4, r2]
 8004a7a:	5820      	ldr	r0, [r4, r0]
 8004a7c:	0095      	lsls	r5, r2, #2
 8004a7e:	1965      	adds	r5, r4, r5
 8004a80:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8004a82:	1bc0      	subs	r0, r0, r7
 8004a84:	4667      	mov	r7, ip
 8004a86:	51e0      	str	r0, [r4, r7]
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8004a88:	371c      	adds	r7, #28
 8004a8a:	59e7      	ldr	r7, [r4, r7]
 8004a8c:	429f      	cmp	r7, r3
 8004a8e:	d849      	bhi.n	8004b24 <HALL_TIMx_CC_IRQHandler+0x278>
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8004a90:	4377      	muls	r7, r6
 8004a92:	46b8      	mov	r8, r7
 8004a94:	4640      	mov	r0, r8
          pHandle->SpeedFIFOIdx++;
 8004a96:	3201      	adds	r2, #1
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	6528      	str	r0, [r5, #80]	; 0x50
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 8004a9c:	4291      	cmp	r1, r2
 8004a9e:	d100      	bne.n	8004aa2 <HALL_TIMx_CC_IRQHandler+0x1f6>
 8004aa0:	e07d      	b.n	8004b9e <HALL_TIMx_CC_IRQHandler+0x2f2>
          pHandle->SpeedFIFOIdx++;
 8004aa2:	2098      	movs	r0, #152	; 0x98
 8004aa4:	5422      	strb	r2, [r4, r0]
          if ( pHandle->SensorIsReliable) 
 8004aa6:	2249      	movs	r2, #73	; 0x49
 8004aa8:	5ca2      	ldrb	r2, [r4, r2]
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	d037      	beq.n	8004b1e <HALL_TIMx_CC_IRQHandler+0x272>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8004aae:	224d      	movs	r2, #77	; 0x4d
 8004ab0:	5ca2      	ldrb	r2, [r4, r2]
 8004ab2:	4291      	cmp	r1, r2
 8004ab4:	d93d      	bls.n	8004b32 <HALL_TIMx_CC_IRQHandler+0x286>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	23b4      	movs	r3, #180	; 0xb4
 8004aba:	58e0      	ldr	r0, [r4, r3]
 8004abc:	f7fb fb24 	bl	8000108 <__udivsi3>
 8004ac0:	23a4      	movs	r3, #164	; 0xa4
 8004ac2:	4346      	muls	r6, r0
 8004ac4:	52e6      	strh	r6, [r4, r3]
      pHandle->OVFCounter = 0u;
 8004ac6:	234e      	movs	r3, #78	; 0x4e
 8004ac8:	2200      	movs	r2, #0
 8004aca:	54e2      	strb	r2, [r4, r3]
  return MC_NULL;
 8004acc:	e738      	b.n	8004940 <HALL_TIMx_CC_IRQHandler+0x94>
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 8004ace:	254a      	movs	r5, #74	; 0x4a
 8004ad0:	5d62      	ldrb	r2, [r4, r5]
 8004ad2:	2a00      	cmp	r2, #0
 8004ad4:	d011      	beq.n	8004afa <HALL_TIMx_CC_IRQHandler+0x24e>
          hAux = hPrscBuf + 2u;
 8004ad6:	4662      	mov	r2, ip
 8004ad8:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 8004ada:	b292      	uxth	r2, r2
 8004adc:	4353      	muls	r3, r2
          pHandle->RatioDec = false;
 8004ade:	4642      	mov	r2, r8
 8004ae0:	5562      	strb	r2, [r4, r5]
 8004ae2:	e7c2      	b.n	8004a6a <HALL_TIMx_CC_IRQHandler+0x1be>
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8004ae4:	27ae      	movs	r7, #174	; 0xae
 8004ae6:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004ae8:	5be7      	ldrh	r7, [r4, r7]
 8004aea:	42af      	cmp	r7, r5
 8004aec:	d9bd      	bls.n	8004a6a <HALL_TIMx_CC_IRQHandler+0x1be>
 8004aee:	6a85      	ldr	r5, [r0, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8004af0:	3501      	adds	r5, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004af2:	6285      	str	r5, [r0, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8004af4:	2001      	movs	r0, #1
 8004af6:	54a0      	strb	r0, [r4, r2]
 8004af8:	e7b7      	b.n	8004a6a <HALL_TIMx_CC_IRQHandler+0x1be>
          uint16_t hAux = hPrscBuf + 1u;
 8004afa:	4662      	mov	r2, ip
 8004afc:	3201      	adds	r2, #1
          wCaptBuf *= hAux;
 8004afe:	b292      	uxth	r2, r2
 8004b00:	4353      	muls	r3, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004b02:	22aa      	movs	r2, #170	; 0xaa
 8004b04:	b2bf      	uxth	r7, r7
 8004b06:	01d2      	lsls	r2, r2, #7
 8004b08:	4297      	cmp	r7, r2
 8004b0a:	d2ae      	bcs.n	8004a6a <HALL_TIMx_CC_IRQHandler+0x1be>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004b0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	d0ab      	beq.n	8004a6a <HALL_TIMx_CC_IRQHandler+0x1be>
 8004b12:	6a82      	ldr	r2, [r0, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8004b14:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004b16:	6282      	str	r2, [r0, #40]	; 0x28
              pHandle->RatioDec = true;
 8004b18:	2201      	movs	r2, #1
 8004b1a:	5562      	strb	r2, [r4, r5]
 8004b1c:	e7a5      	b.n	8004a6a <HALL_TIMx_CC_IRQHandler+0x1be>
            pHandle->AvrElSpeedDpp = 0;
 8004b1e:	23a4      	movs	r3, #164	; 0xa4
 8004b20:	52e2      	strh	r2, [r4, r3]
 8004b22:	e7d0      	b.n	8004ac6 <HALL_TIMx_CC_IRQHandler+0x21a>
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8004b24:	0037      	movs	r7, r6
 8004b26:	435f      	muls	r7, r3
 8004b28:	46b8      	mov	r8, r7
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8004b2a:	4667      	mov	r7, ip
 8004b2c:	4440      	add	r0, r8
 8004b2e:	51e0      	str	r0, [r4, r7]
 8004b30:	e7b0      	b.n	8004a94 <HALL_TIMx_CC_IRQHandler+0x1e8>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8004b32:	239c      	movs	r3, #156	; 0x9c
 8004b34:	58e0      	ldr	r0, [r4, r3]
 8004b36:	f7fb fb71 	bl	800021c <__divsi3>
 8004b3a:	23b4      	movs	r3, #180	; 0xb4
 8004b3c:	0001      	movs	r1, r0
 8004b3e:	58e0      	ldr	r0, [r4, r3]
 8004b40:	f7fb fb6c 	bl	800021c <__divsi3>
 8004b44:	23a4      	movs	r3, #164	; 0xa4
 8004b46:	52e0      	strh	r0, [r4, r3]
 8004b48:	e7bd      	b.n	8004ac6 <HALL_TIMx_CC_IRQHandler+0x21a>
          pHandle->Direction = POSITIVE;
 8004b4a:	23a2      	movs	r3, #162	; 0xa2
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8004b50:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004b52:	3308      	adds	r3, #8
 8004b54:	2601      	movs	r6, #1
 8004b56:	52e2      	strh	r2, [r4, r3]
 8004b58:	e75b      	b.n	8004a12 <HALL_TIMx_CC_IRQHandler+0x166>
          pHandle->Direction = POSITIVE;
 8004b5a:	23a2      	movs	r3, #162	; 0xa2
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004b60:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <HALL_TIMx_CC_IRQHandler+0x30c>)
                                                  + S16_60_PHASE_SHIFT );
 8004b64:	4694      	mov	ip, r2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8004b66:	22aa      	movs	r2, #170	; 0xaa
                                                  + S16_60_PHASE_SHIFT );
 8004b68:	4463      	add	r3, ip
 8004b6a:	2601      	movs	r6, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8004b6c:	52a3      	strh	r3, [r4, r2]
 8004b6e:	e750      	b.n	8004a12 <HALL_TIMx_CC_IRQHandler+0x166>
          pHandle->Direction = POSITIVE;
 8004b70:	23a2      	movs	r3, #162	; 0xa2
 8004b72:	54e1      	strb	r1, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004b74:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004b76:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <HALL_TIMx_CC_IRQHandler+0x310>)
 8004b78:	e7f4      	b.n	8004b64 <HALL_TIMx_CC_IRQHandler+0x2b8>
          pHandle->Direction = POSITIVE;
 8004b7a:	23a2      	movs	r3, #162	; 0xa2
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004b80:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <HALL_TIMx_CC_IRQHandler+0x300>)
 8004b84:	e7ee      	b.n	8004b64 <HALL_TIMx_CC_IRQHandler+0x2b8>
          pHandle->Direction = POSITIVE;
 8004b86:	23a2      	movs	r3, #162	; 0xa2
 8004b88:	2201      	movs	r2, #1
 8004b8a:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004b8c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004b8e:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <HALL_TIMx_CC_IRQHandler+0x304>)
 8004b90:	e7e8      	b.n	8004b64 <HALL_TIMx_CC_IRQHandler+0x2b8>
          pHandle->Direction = POSITIVE;
 8004b92:	23a2      	movs	r3, #162	; 0xa2
 8004b94:	2201      	movs	r2, #1
 8004b96:	54e2      	strb	r2, [r4, r3]
                                                  + S16_60_PHASE_SHIFT );
 8004b98:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004b9a:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <HALL_TIMx_CC_IRQHandler+0x308>)
 8004b9c:	e7e2      	b.n	8004b64 <HALL_TIMx_CC_IRQHandler+0x2b8>
            pHandle->SpeedFIFOIdx = 0u;
 8004b9e:	2298      	movs	r2, #152	; 0x98
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	54a0      	strb	r0, [r4, r2]
 8004ba4:	e77f      	b.n	8004aa6 <HALL_TIMx_CC_IRQHandler+0x1fa>
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	0800746c 	.word	0x0800746c
 8004bac:	ffffd556 	.word	0xffffd556
 8004bb0:	00002aaa 	.word	0x00002aaa
 8004bb4:	00007fff 	.word	0x00007fff
 8004bb8:	ffffaaab 	.word	0xffffaaab
 8004bbc:	00005555 	.word	0x00005555

08004bc0 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8004bc0:	2349      	movs	r3, #73	; 0x49
{
 8004bc2:	b570      	push	{r4, r5, r6, lr}
  if ( pHandle->SensorIsReliable )
 8004bc4:	5cc3      	ldrb	r3, [r0, r3]
{
 8004bc6:	0004      	movs	r4, r0
  if ( pHandle->SensorIsReliable )
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d018      	beq.n	8004bfe <HALL_TIMx_UP_IRQHandler+0x3e>
    pHandle->OVFCounter++;
 8004bcc:	224e      	movs	r2, #78	; 0x4e
 8004bce:	5c83      	ldrb	r3, [r0, r2]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004bd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	5483      	strb	r3, [r0, r2]
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004bd8:	23c0      	movs	r3, #192	; 0xc0
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004bda:	6a89      	ldr	r1, [r1, #40]	; 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004bdc:	5c85      	ldrb	r5, [r0, r2]
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004bde:	3274      	adds	r2, #116	; 0x74
 8004be0:	5ac3      	ldrh	r3, [r0, r3]
 8004be2:	5a80      	ldrh	r0, [r0, r2]
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004be4:	1c4a      	adds	r2, r1, #1
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004be6:	4358      	muls	r0, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004be8:	0153      	lsls	r3, r2, #5
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	0099      	lsls	r1, r3, #2
 8004bee:	1889      	adds	r1, r1, r2
 8004bf0:	00c9      	lsls	r1, r1, #3
 8004bf2:	f7fb fa89 	bl	8000108 <__udivsi3>
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004bf6:	b2ed      	uxtb	r5, r5
 8004bf8:	b280      	uxth	r0, r0
 8004bfa:	4285      	cmp	r5, r0
 8004bfc:	d201      	bcs.n	8004c02 <HALL_TIMx_UP_IRQHandler+0x42>
}
 8004bfe:	2000      	movs	r0, #0
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->_Super.hElSpeedDpp = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	81e3      	strh	r3, [r4, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004c06:	3320      	adds	r3, #32
 8004c08:	5ce3      	ldrb	r3, [r4, r3]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d120      	bne.n	8004c50 <HALL_TIMx_UP_IRQHandler+0x90>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c10:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8004c12:	691a      	ldr	r2, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c18:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c1e:	4032      	ands	r2, r6
 8004c20:	4005      	ands	r5, r0
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	1b92      	subs	r2, r2, r6
 8004c26:	1a28      	subs	r0, r5, r0
 8004c28:	400b      	ands	r3, r1
 8004c2a:	4256      	negs	r6, r2
 8004c2c:	4172      	adcs	r2, r6
 8004c2e:	4245      	negs	r5, r0
 8004c30:	4168      	adcs	r0, r5
 8004c32:	1a5b      	subs	r3, r3, r1
 8004c34:	4259      	negs	r1, r3
 8004c36:	414b      	adcs	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004c38:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004c3a:	0040      	lsls	r0, r0, #1
 8004c3c:	4302      	orrs	r2, r0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	22a6      	movs	r2, #166	; 0xa6
 8004c42:	54a3      	strb	r3, [r4, r2]
  switch ( pHandle->HallState )
 8004c44:	2b06      	cmp	r3, #6
 8004c46:	d86a      	bhi.n	8004d1e <HALL_TIMx_UP_IRQHandler+0x15e>
 8004c48:	4a39      	ldr	r2, [pc, #228]	; (8004d30 <HALL_TIMx_UP_IRQHandler+0x170>)
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	58d3      	ldr	r3, [r2, r3]
 8004c4e:	469f      	mov	pc, r3
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004c50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004c52:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8004c54:	6918      	ldr	r0, [r3, #16]
 8004c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004c58:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	6912      	ldr	r2, [r2, #16]
 8004c5e:	402b      	ands	r3, r5
 8004c60:	1b5b      	subs	r3, r3, r5
 8004c62:	425d      	negs	r5, r3
 8004c64:	416b      	adcs	r3, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004c66:	005d      	lsls	r5, r3, #1
 8004c68:	6b63      	ldr	r3, [r4, #52]	; 0x34
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004c6a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004c6c:	401a      	ands	r2, r3
 8004c6e:	4008      	ands	r0, r1
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	425a      	negs	r2, r3
 8004c74:	4153      	adcs	r3, r2
 8004c76:	1a42      	subs	r2, r0, r1
 8004c78:	4251      	negs	r1, r2
 8004c7a:	414a      	adcs	r2, r1
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004c80:	432b      	orrs	r3, r5
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004c82:	404a      	eors	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e7da      	b.n	8004c40 <HALL_TIMx_UP_IRQHandler+0x80>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004c8a:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <HALL_TIMx_UP_IRQHandler+0x174>)
 8004c8c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004c8e:	4694      	mov	ip, r2
 8004c90:	4463      	add	r3, ip
 8004c92:	b21b      	sxth	r3, r3
 8004c94:	80a3      	strh	r3, [r4, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004c96:	22aa      	movs	r2, #170	; 0xaa
 8004c98:	52a3      	strh	r3, [r4, r2]
      pHandle->OVFCounter = 0u;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	3a5c      	subs	r2, #92	; 0x5c
 8004c9e:	54a3      	strb	r3, [r4, r2]
      pHandle->FirstCapt = 0u;
 8004ca0:	3a02      	subs	r2, #2
 8004ca2:	54a3      	strb	r3, [r4, r2]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004ca4:	3326      	adds	r3, #38	; 0x26
 8004ca6:	5ce0      	ldrb	r0, [r4, r3]
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d03e      	beq.n	8004d2a <HALL_TIMx_UP_IRQHandler+0x16a>
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004cac:	3392      	adds	r3, #146	; 0x92
 8004cae:	0022      	movs	r2, r4
 8004cb0:	58e1      	ldr	r1, [r4, r3]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	3250      	adds	r2, #80	; 0x50
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004cba:	c202      	stmia	r2!, {r1}
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	d1fa      	bne.n	8004cb6 <HALL_TIMx_UP_IRQHandler+0xf6>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004cc0:	434b      	muls	r3, r1
      pHandle->BufferFilled = 0 ;
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	214d      	movs	r1, #77	; 0x4d
 8004cc6:	5462      	strb	r2, [r4, r1]
      pHandle->AvrElSpeedDpp = 0;
 8004cc8:	3157      	adds	r1, #87	; 0x57
 8004cca:	5262      	strh	r2, [r4, r1]
      pHandle->SpeedFIFOIdx = 0;
 8004ccc:	2100      	movs	r1, #0
 8004cce:	3298      	adds	r2, #152	; 0x98
 8004cd0:	54a1      	strb	r1, [r4, r2]
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004cd2:	3204      	adds	r2, #4
 8004cd4:	50a3      	str	r3, [r4, r2]
 8004cd6:	e792      	b.n	8004bfe <HALL_TIMx_UP_IRQHandler+0x3e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <HALL_TIMx_UP_IRQHandler+0x178>)
 8004cda:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004cdc:	4694      	mov	ip, r2
 8004cde:	4463      	add	r3, ip
 8004ce0:	b21b      	sxth	r3, r3
 8004ce2:	80a3      	strh	r3, [r4, #4]
      break;
 8004ce4:	e7d7      	b.n	8004c96 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004ce6:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <HALL_TIMx_UP_IRQHandler+0x17c>)
 8004ce8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004cea:	4694      	mov	ip, r2
 8004cec:	4463      	add	r3, ip
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	80a3      	strh	r3, [r4, #4]
      break;
 8004cf2:	e7d0      	b.n	8004c96 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004cf4:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <HALL_TIMx_UP_IRQHandler+0x180>)
 8004cf6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004cf8:	4694      	mov	ip, r2
 8004cfa:	4463      	add	r3, ip
 8004cfc:	b21b      	sxth	r3, r3
 8004cfe:	80a3      	strh	r3, [r4, #4]
      break;
 8004d00:	e7c9      	b.n	8004c96 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <HALL_TIMx_UP_IRQHandler+0x184>)
 8004d04:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004d06:	4694      	mov	ip, r2
 8004d08:	4463      	add	r3, ip
 8004d0a:	b21b      	sxth	r3, r3
 8004d0c:	80a3      	strh	r3, [r4, #4]
      break;
 8004d0e:	e7c2      	b.n	8004c96 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004d10:	4a0d      	ldr	r2, [pc, #52]	; (8004d48 <HALL_TIMx_UP_IRQHandler+0x188>)
 8004d12:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004d14:	4694      	mov	ip, r2
 8004d16:	4463      	add	r3, ip
 8004d18:	b21b      	sxth	r3, r3
 8004d1a:	80a3      	strh	r3, [r4, #4]
      break;
 8004d1c:	e7bb      	b.n	8004c96 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 8004d1e:	2349      	movs	r3, #73	; 0x49
 8004d20:	2200      	movs	r2, #0
 8004d22:	54e2      	strb	r2, [r4, r3]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004d24:	2204      	movs	r2, #4
 8004d26:	5ea3      	ldrsh	r3, [r4, r2]
      break;
 8004d28:	e7b5      	b.n	8004c96 <HALL_TIMx_UP_IRQHandler+0xd6>
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e7c9      	b.n	8004cc2 <HALL_TIMx_UP_IRQHandler+0x102>
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	08007488 	.word	0x08007488
 8004d34:	ffffc001 	.word	0xffffc001
 8004d38:	00001555 	.word	0x00001555
 8004d3c:	ffffeaab 	.word	0xffffeaab
 8004d40:	00006aaa 	.word	0x00006aaa
 8004d44:	ffff9556 	.word	0xffff9556
 8004d48:	00003fff 	.word	0x00003fff

08004d4c <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8004d4c:	b570      	push	{r4, r5, r6, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8004d4e:	2580      	movs	r5, #128	; 0x80
 8004d50:	006d      	lsls	r5, r5, #1
 8004d52:	002a      	movs	r2, r5
 8004d54:	2100      	movs	r1, #0
{
 8004d56:	0004      	movs	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8004d58:	f001 fca7 	bl	80066aa <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
  pHandle->hLastMeasBufferIndex = 0u;
 8004d5c:	2281      	movs	r2, #129	; 0x81
  pHandle->hNextMeasBufferIndex = 0u;
 8004d5e:	2300      	movs	r3, #0
  pHandle->hLastMeasBufferIndex = 0u;
 8004d60:	0052      	lsls	r2, r2, #1
  pHandle->hNextMeasBufferIndex = 0u;
 8004d62:	5363      	strh	r3, [r4, r5]
  pHandle->hLastMeasBufferIndex = 0u;
 8004d64:	52a3      	strh	r3, [r4, r2]

}
 8004d66:	bd70      	pop	{r4, r5, r6, pc}

08004d68 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004d68:	2280      	movs	r2, #128	; 0x80
{
 8004d6a:	b570      	push	{r4, r5, r6, lr}
 8004d6c:	0005      	movs	r5, r0
 8004d6e:	0008      	movs	r0, r1
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004d70:	0052      	lsls	r2, r2, #1
 8004d72:	5aab      	ldrh	r3, [r5, r2]
 8004d74:	0059      	lsls	r1, r3, #1
 8004d76:	5348      	strh	r0, [r1, r5]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8004d78:	2181      	movs	r1, #129	; 0x81
 8004d7a:	0049      	lsls	r1, r1, #1
 8004d7c:	526b      	strh	r3, [r5, r1]
  pHandle->hNextMeasBufferIndex++;
 8004d7e:	3301      	adds	r3, #1
 8004d80:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8004d82:	2b7f      	cmp	r3, #127	; 0x7f
 8004d84:	d900      	bls.n	8004d88 <MPM_CalcElMotorPower+0x20>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004d86:	2300      	movs	r3, #0
 8004d88:	52ab      	strh	r3, [r5, r2]
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004d8a:	002b      	movs	r3, r5
  int32_t wAux = 0;
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	1c6c      	adds	r4, r5, #1
 8004d90:	34ff      	adds	r4, #255	; 0xff
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004d92:	2600      	movs	r6, #0
 8004d94:	5f99      	ldrsh	r1, [r3, r6]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004d96:	3302      	adds	r3, #2
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004d98:	1852      	adds	r2, r2, r1
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	d1f9      	bne.n	8004d92 <MPM_CalcElMotorPower+0x2a>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004d9e:	237f      	movs	r3, #127	; 0x7f
 8004da0:	17d1      	asrs	r1, r2, #31
 8004da2:	400b      	ands	r3, r1
 8004da4:	189a      	adds	r2, r3, r2
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8004da6:	2382      	movs	r3, #130	; 0x82
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004da8:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	52ea      	strh	r2, [r5, r3]
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8004dae:	bd70      	pop	{r4, r5, r6, pc}

08004db0 <MPM_GetAvrgElMotorPowerW>:
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
 8004db0:	2382      	movs	r3, #130	; 0x82
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004db6:	4770      	bx	lr

08004db8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004db8:	8a02      	ldrh	r2, [r0, #16]
 8004dba:	8b41      	ldrh	r1, [r0, #26]
{
 8004dbc:	0003      	movs	r3, r0
  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004dbe:	4291      	cmp	r1, r2
 8004dc0:	d306      	bcc.n	8004dd0 <NTC_SetFaultState+0x18>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004dc2:	8b81      	ldrh	r1, [r0, #28]
  {
    hFault = MC_NO_ERROR;
 8004dc4:	2000      	movs	r0, #0
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004dc6:	4291      	cmp	r1, r2
 8004dc8:	d900      	bls.n	8004dcc <NTC_SetFaultState+0x14>
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8004dca:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8004dcc:	8ad8      	ldrh	r0, [r3, #22]
 8004dce:	e7fc      	b.n	8004dca <NTC_SetFaultState+0x12>
    hFault = MC_OVER_TEMP;
 8004dd0:	2008      	movs	r0, #8
 8004dd2:	e7fa      	b.n	8004dca <NTC_SetFaultState+0x12>

08004dd4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	8203      	strh	r3, [r0, #16]
}
 8004dd8:	4770      	bx	lr
 8004dda:	46c0      	nop			; (mov r8, r8)

08004ddc <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004ddc:	7803      	ldrb	r3, [r0, #0]
{
 8004dde:	b510      	push	{r4, lr}
 8004de0:	0004      	movs	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <NTC_Init+0x14>
    pHandle->hFaultState = MC_NO_ERROR;
 8004de6:	2300      	movs	r3, #0
 8004de8:	82c3      	strh	r3, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004dea:	8a43      	ldrh	r3, [r0, #18]
 8004dec:	8203      	strh	r3, [r0, #16]
}
 8004dee:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004df0:	3004      	adds	r0, #4
 8004df2:	f7fc fd49 	bl	8001888 <RCM_RegisterRegConv>
 8004df6:	2326      	movs	r3, #38	; 0x26
 8004df8:	54e0      	strb	r0, [r4, r3]
    NTC_Clear( pHandle );
 8004dfa:	0020      	movs	r0, r4
 8004dfc:	f7ff ffea 	bl	8004dd4 <NTC_Clear>
 8004e00:	e7f5      	b.n	8004dee <NTC_Init+0x12>
 8004e02:	46c0      	nop			; (mov r8, r8)

08004e04 <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004e04:	7803      	ldrb	r3, [r0, #0]
{
 8004e06:	b510      	push	{r4, lr}
 8004e08:	0004      	movs	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <NTC_CalcAvTemp+0x12>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	82c3      	strh	r3, [r0, #22]
 8004e12:	2000      	movs	r0, #0
  }

  return ( pHandle->hFaultState );
}
 8004e14:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004e16:	3326      	adds	r3, #38	; 0x26
 8004e18:	5cc0      	ldrb	r0, [r0, r3]
 8004e1a:	f7fc fdcf 	bl	80019bc <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <NTC_CalcAvTemp+0x3c>)
 8004e20:	4298      	cmp	r0, r3
 8004e22:	d007      	beq.n	8004e34 <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004e24:	8b21      	ldrh	r1, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004e26:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004e28:	1e4b      	subs	r3, r1, #1
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004e2a:	4353      	muls	r3, r2
      wtemp += hAux;
 8004e2c:	18c0      	adds	r0, r0, r3
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004e2e:	f7fb f96b 	bl	8000108 <__udivsi3>
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004e32:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004e34:	0020      	movs	r0, r4
 8004e36:	f7ff ffbf 	bl	8004db8 <NTC_SetFaultState>
 8004e3a:	82e0      	strh	r0, [r4, #22]
 8004e3c:	e7ea      	b.n	8004e14 <NTC_CalcAvTemp+0x10>
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	0000ffff 	.word	0x0000ffff

08004e44 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004e44:	7803      	ldrb	r3, [r0, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10e      	bne.n	8004e68 <NTC_GetAvTemp_C+0x24>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004e4a:	6a02      	ldr	r2, [r0, #32]
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004e4c:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004e4e:	1a9b      	subs	r3, r3, r2
    wTemp *= pHandle->hSensitivity;
 8004e50:	221e      	movs	r2, #30
 8004e52:	5e81      	ldrsh	r1, [r0, r2]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004e54:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp *= pHandle->hSensitivity;
 8004e56:	4359      	muls	r1, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004e58:	17ca      	asrs	r2, r1, #31
 8004e5a:	0412      	lsls	r2, r2, #16
 8004e5c:	0c13      	lsrs	r3, r2, #16
 8004e5e:	185b      	adds	r3, r3, r1
 8004e60:	141b      	asrs	r3, r3, #16
 8004e62:	18c0      	adds	r0, r0, r3
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
 8004e64:	b200      	sxth	r0, r0
}
 8004e66:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8004e68:	8a80      	ldrh	r0, [r0, #20]
 8004e6a:	e7fb      	b.n	8004e64 <NTC_GetAvTemp_C+0x20>

08004e6c <PID_HandleInit>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004e6c:	6803      	ldr	r3, [r0, #0]
 8004e6e:	6043      	str	r3, [r0, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004e70:	8c03      	ldrh	r3, [r0, #32]
 8004e72:	8443      	strh	r3, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8004e78:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004e7a:	4770      	bx	lr

08004e7c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004e7c:	8081      	strh	r1, [r0, #4]
}
 8004e7e:	4770      	bx	lr

08004e80 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004e80:	80c1      	strh	r1, [r0, #6]
}
 8004e82:	4770      	bx	lr

08004e84 <PID_GetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
 8004e84:	2304      	movs	r3, #4
 8004e86:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004e88:	4770      	bx	lr
 8004e8a:	46c0      	nop			; (mov r8, r8)

08004e8c <PID_GetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
 8004e8c:	2306      	movs	r3, #6
 8004e8e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004e90:	4770      	bx	lr
 8004e92:	46c0      	nop			; (mov r8, r8)

08004e94 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004e94:	6081      	str	r1, [r0, #8]

  return;
}
 8004e96:	4770      	bx	lr

08004e98 <PID_GetKPDivisor>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
 8004e98:	8b00      	ldrh	r0, [r0, #24]
}
 8004e9a:	4770      	bx	lr

08004e9c <PID_GetKIDivisor>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
 8004e9c:	8b40      	ldrh	r0, [r0, #26]
}
 8004e9e:	4770      	bx	lr

08004ea0 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004ea0:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8004ea2:	4770      	bx	lr

08004ea4 <PID_GetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
 8004ea4:	2322      	movs	r3, #34	; 0x22
 8004ea6:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004ea8:	4770      	bx	lr
 8004eaa:	46c0      	nop			; (mov r8, r8)

08004eac <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 8004eac:	0003      	movs	r3, r0
 8004eae:	b570      	push	{r4, r5, r6, lr}
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004eb0:	2216      	movs	r2, #22
 8004eb2:	5e9e      	ldrsh	r6, [r3, r2]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004eb4:	2214      	movs	r2, #20
 8004eb6:	5e80      	ldrsh	r0, [r0, r2]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004eb8:	2406      	movs	r4, #6
 8004eba:	5f1d      	ldrsh	r5, [r3, r4]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004ebc:	2404      	movs	r4, #4
 8004ebe:	5f1a      	ldrsh	r2, [r3, r4]
 8004ec0:	2400      	movs	r4, #0
 8004ec2:	434a      	muls	r2, r1
  if ( pHandle->hKiGain == 0 )
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	d00b      	beq.n	8004ee0 <PI_Controller+0x34>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004ec8:	4369      	muls	r1, r5
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004eca:	689c      	ldr	r4, [r3, #8]

    if ( wIntegral_sum_temp < 0 )
 8004ecc:	1865      	adds	r5, r4, r1
 8004ece:	d41b      	bmi.n	8004f08 <PI_Controller+0x5c>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8004ed0:	2c00      	cmp	r4, #0
 8004ed2:	db24      	blt.n	8004f1e <PI_Controller+0x72>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004ed4:	68dc      	ldr	r4, [r3, #12]
 8004ed6:	42ac      	cmp	r4, r5
 8004ed8:	db02      	blt.n	8004ee0 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004eda:	691c      	ldr	r4, [r3, #16]
 8004edc:	42ac      	cmp	r4, r5
 8004ede:	dd1c      	ble.n	8004f1a <PI_Controller+0x6e>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004ee0:	0025      	movs	r5, r4
 8004ee2:	8b99      	ldrh	r1, [r3, #28]
 8004ee4:	410a      	asrs	r2, r1
 8004ee6:	8bd9      	ldrh	r1, [r3, #30]
 8004ee8:	410d      	asrs	r5, r1
 8004eea:	1952      	adds	r2, r2, r5
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004eec:	4290      	cmp	r0, r2
 8004eee:	da03      	bge.n	8004ef8 <PI_Controller+0x4c>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8004ef0:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004ef2:	18a4      	adds	r4, r4, r2
 8004ef4:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8004ef8:	4296      	cmp	r6, r2
 8004efa:	dd03      	ble.n	8004f04 <PI_Controller+0x58>
    wDischarge = hLowerOutputLimit - wOutput_32;
 8004efc:	1ab2      	subs	r2, r6, r2
 8004efe:	0030      	movs	r0, r6
  pHandle->wIntegralTerm += wDischarge;
 8004f00:	18a4      	adds	r4, r4, r2
 8004f02:	e7f7      	b.n	8004ef4 <PI_Controller+0x48>
  return ( ( int16_t )( wOutput_32 ) );
 8004f04:	b210      	sxth	r0, r2
 8004f06:	e7f5      	b.n	8004ef4 <PI_Controller+0x48>
      if ( pHandle->wIntegralTerm > 0 )
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	dde3      	ble.n	8004ed4 <PI_Controller+0x28>
        if ( wIntegral_Term > 0 )
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	dde1      	ble.n	8004ed4 <PI_Controller+0x28>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004f10:	68dc      	ldr	r4, [r3, #12]
 8004f12:	4905      	ldr	r1, [pc, #20]	; (8004f28 <PI_Controller+0x7c>)
          wIntegral_sum_temp = INT32_MAX;
 8004f14:	0025      	movs	r5, r4
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004f16:	428c      	cmp	r4, r1
 8004f18:	d1e2      	bne.n	8004ee0 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8004f1a:	002c      	movs	r4, r5
 8004f1c:	e7e0      	b.n	8004ee0 <PI_Controller+0x34>
        if ( wIntegral_Term < 0 )
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	dad8      	bge.n	8004ed4 <PI_Controller+0x28>
          wIntegral_sum_temp = -INT32_MAX;
 8004f22:	4d02      	ldr	r5, [pc, #8]	; (8004f2c <PI_Controller+0x80>)
 8004f24:	e7d6      	b.n	8004ed4 <PI_Controller+0x28>
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	7fffffff 	.word	0x7fffffff
 8004f2c:	80000001 	.word	0x80000001

08004f30 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004f30:	2386      	movs	r3, #134	; 0x86
{
 8004f32:	b570      	push	{r4, r5, r6, lr}
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	58c3      	ldr	r3, [r0, r3]
{
 8004f38:	0005      	movs	r5, r0
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004f3a:	220c      	movs	r2, #12
 8004f3c:	5e9e      	ldrsh	r6, [r3, r2]
 8004f3e:	2216      	movs	r2, #22
 8004f40:	5e9c      	ldrsh	r4, [r3, r2]
 8004f42:	4374      	muls	r4, r6
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004f44:	220e      	movs	r2, #14
 8004f46:	5e9e      	ldrsh	r6, [r3, r2]
 8004f48:	2218      	movs	r2, #24
 8004f4a:	5e9b      	ldrsh	r3, [r3, r2]
 8004f4c:	435e      	muls	r6, r3
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004f4e:	2384      	movs	r3, #132	; 0x84
 8004f50:	005b      	lsls	r3, r3, #1
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004f52:	19a6      	adds	r6, r4, r6
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004f54:	58c4      	ldr	r4, [r0, r3]
 8004f56:	3308      	adds	r3, #8
 8004f58:	58c0      	ldr	r0, [r0, r3]
 8004f5a:	f7ff faa1 	bl	80044a0 <VBS_GetAvBusVoltage_V>
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004f5e:	2196      	movs	r1, #150	; 0x96
  wAux /= 65536;
 8004f60:	17f3      	asrs	r3, r6, #31
 8004f62:	041b      	lsls	r3, r3, #16
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004f64:	4360      	muls	r0, r4
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004f66:	0089      	lsls	r1, r1, #2
  wAux /= 65536;
 8004f68:	0c1c      	lsrs	r4, r3, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004f6a:	f7fb f957 	bl	800021c <__divsi3>

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004f6e:	21a0      	movs	r1, #160	; 0xa0
  wAux /= 65536;
 8004f70:	19a4      	adds	r4, r4, r6
 8004f72:	1424      	asrs	r4, r4, #16
  wAux3 = wAux * wAux2;
 8004f74:	4344      	muls	r4, r0
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004f76:	0060      	lsls	r0, r4, #1
 8004f78:	1900      	adds	r0, r0, r4
  wAux3 /= 65536;
 8004f7a:	0309      	lsls	r1, r1, #12
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004f7c:	0040      	lsls	r0, r0, #1
  wAux3 /= 65536;
 8004f7e:	f7fb f94d 	bl	800021c <__divsi3>

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004f82:	b201      	sxth	r1, r0
 8004f84:	0028      	movs	r0, r5
 8004f86:	f7ff feef 	bl	8004d68 <MPM_CalcElMotorPower>

}
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}

08004f8c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8004f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8004f8e:	2560      	movs	r5, #96	; 0x60
 8004f90:	002e      	movs	r6, r5
 8004f92:	6804      	ldr	r4, [r0, #0]
 8004f94:	4026      	ands	r6, r4
  if (counter_mode == 0U)
 8004f96:	4225      	tst	r5, r4
 8004f98:	d119      	bne.n	8004fce <waitForPolarizationEnd+0x42>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004f9a:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004f9c:	3201      	adds	r2, #1
 8004f9e:	0855      	lsrs	r5, r2, #1
 8004fa0:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004fa2:	2703      	movs	r7, #3
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004fa4:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004fa6:	2602      	movs	r6, #2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004fa8:	427f      	negs	r7, r7
 8004faa:	6107      	str	r7, [r0, #16]
  while (*cnt < NB_CONVERSIONS)
 8004fac:	781c      	ldrb	r4, [r3, #0]
 8004fae:	2c0f      	cmp	r4, #15
 8004fb0:	d80c      	bhi.n	8004fcc <waitForPolarizationEnd+0x40>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004fb2:	6904      	ldr	r4, [r0, #16]
 8004fb4:	4226      	tst	r6, r4
 8004fb6:	d0f9      	beq.n	8004fac <waitForPolarizationEnd+0x20>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8004fb8:	3201      	adds	r2, #1
 8004fba:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004fbc:	6107      	str	r7, [r0, #16]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004fbe:	4295      	cmp	r5, r2
 8004fc0:	d8f4      	bhi.n	8004fac <waitForPolarizationEnd+0x20>
      {
        if (*cnt < NB_CONVERSIONS)
 8004fc2:	781c      	ldrb	r4, [r3, #0]
 8004fc4:	2c0f      	cmp	r4, #15
 8004fc6:	d8f1      	bhi.n	8004fac <waitForPolarizationEnd+0x20>
        {
          *SWerror = 1u;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8004fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004fce:	2e60      	cmp	r6, #96	; 0x60
 8004fd0:	d1e4      	bne.n	8004f9c <waitForPolarizationEnd+0x10>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004fd2:	3201      	adds	r2, #1
 8004fd4:	0155      	lsls	r5, r2, #5
 8004fd6:	e7e4      	b.n	8004fa2 <waitForPolarizationEnd+0x16>

08004fd8 <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 8004fd8:	b510      	push	{r4, lr}
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8004fda:	6843      	ldr	r3, [r0, #4]
 8004fdc:	4798      	blx	r3
}
 8004fde:	bd10      	pop	{r4, pc}

08004fe0 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8004fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	9101      	str	r1, [sp, #4]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004fe6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8004fe8:	b20b      	sxth	r3, r1
 8004fea:	435a      	muls	r2, r3
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004fec:	2350      	movs	r3, #80	; 0x50
 8004fee:	5ac6      	ldrh	r6, [r0, r3]
 8004ff0:	1409      	asrs	r1, r1, #16
 8004ff2:	4371      	muls	r1, r6
 8004ff4:	0049      	lsls	r1, r1, #1
 8004ff6:	424f      	negs	r7, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8004ff8:	1a51      	subs	r1, r2, r1
 8004ffa:	0fcc      	lsrs	r4, r1, #31
 8004ffc:	1864      	adds	r4, r4, r1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004ffe:	1aba      	subs	r2, r7, r2
  wY = ( wUBeta + wUAlpha ) / 2;
 8005000:	1063      	asrs	r3, r4, #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005002:	0fd4      	lsrs	r4, r2, #31
 8005004:	18a4      	adds	r4, r4, r2
 8005006:	1064      	asrs	r4, r4, #1

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005008:	1c4d      	adds	r5, r1, #1
 800500a:	db51      	blt.n	80050b0 <PWMC_SetPhaseVoltage+0xd0>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800500c:	1c55      	adds	r5, r2, #1
 800500e:	db31      	blt.n	8005074 <PWMC_SetPhaseVoltage+0x94>
    {
      pHandle->Sector = SECTOR_2;
 8005010:	253a      	movs	r5, #58	; 0x3a
 8005012:	2701      	movs	r7, #1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005014:	1b1c      	subs	r4, r3, r4
      pHandle->Sector = SECTOR_2;
 8005016:	5547      	strb	r7, [r0, r5]
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005018:	17e5      	asrs	r5, r4, #31
 800501a:	03ad      	lsls	r5, r5, #14
 800501c:	0bab      	lsrs	r3, r5, #14
      wTimePhB = wTimePhA + wZ / 131072;
      wTimePhC = wTimePhA - wY / 131072;
 800501e:	17cd      	asrs	r5, r1, #31
 8005020:	03ad      	lsls	r5, r5, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005022:	191b      	adds	r3, r3, r4
      wTimePhC = wTimePhA - wY / 131072;
 8005024:	0bad      	lsrs	r5, r5, #14
 8005026:	1869      	adds	r1, r5, r1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005028:	149b      	asrs	r3, r3, #18
 800502a:	08b6      	lsrs	r6, r6, #2
 800502c:	199b      	adds	r3, r3, r6
      wTimePhC = wTimePhA - wY / 131072;
 800502e:	1489      	asrs	r1, r1, #18
 8005030:	1a5d      	subs	r5, r3, r1
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8005032:	2140      	movs	r1, #64	; 0x40
      wTimePhB = wTimePhA + wZ / 131072;
 8005034:	17d4      	asrs	r4, r2, #31
 8005036:	03a4      	lsls	r4, r4, #14
 8005038:	0ba4      	lsrs	r4, r4, #14
 800503a:	18a2      	adds	r2, r4, r2
 800503c:	1492      	asrs	r2, r2, #18
 800503e:	18d2      	adds	r2, r2, r3
      pHandle->lowDuty = wTimePhB;
 8005040:	8782      	strh	r2, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005042:	87c3      	strh	r3, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8005044:	5245      	strh	r5, [r0, r1]
        pHandle->midDuty = wTimePhB;
        pHandle->highDuty = wTimePhC;
      }
  }

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005046:	43dc      	mvns	r4, r3
 8005048:	17e4      	asrs	r4, r4, #31
 800504a:	4023      	ands	r3, r4
 800504c:	43d4      	mvns	r4, r2
 800504e:	43e9      	mvns	r1, r5
 8005050:	17e4      	asrs	r4, r4, #31
 8005052:	4022      	ands	r2, r4
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8005054:	244e      	movs	r4, #78	; 0x4e
 8005056:	17c9      	asrs	r1, r1, #31
 8005058:	4029      	ands	r1, r5
 800505a:	b29b      	uxth	r3, r3
 800505c:	b292      	uxth	r2, r2
 800505e:	b289      	uxth	r1, r1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005060:	8643      	strh	r3, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005062:	8682      	strh	r2, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8005064:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8005066:	5b04      	ldrh	r4, [r0, r4]
 8005068:	2c01      	cmp	r4, #1
 800506a:	d03d      	beq.n	80050e8 <PWMC_SetPhaseVoltage+0x108>
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800506c:	6983      	ldr	r3, [r0, #24]
 800506e:	4798      	blx	r3
}
 8005070:	b003      	add	sp, #12
 8005072:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( wX <= 0 )
 8005074:	2f00      	cmp	r7, #0
 8005076:	dd6a      	ble.n	800514e <PWMC_SetPhaseVoltage+0x16e>
        pHandle->Sector = SECTOR_1;
 8005078:	233a      	movs	r3, #58	; 0x3a
 800507a:	2100      	movs	r1, #0
 800507c:	54c1      	strb	r1, [r0, r3]
        wTimePhB = wTimePhA + wZ / 131072;
 800507e:	17d1      	asrs	r1, r2, #31
 8005080:	0389      	lsls	r1, r1, #14
 8005082:	0b89      	lsrs	r1, r1, #14
 8005084:	188a      	adds	r2, r1, r2
        wTimePhC = wTimePhB - wX / 131072;
 8005086:	17f9      	asrs	r1, r7, #31
 8005088:	03c9      	lsls	r1, r1, #15
 800508a:	0bc9      	lsrs	r1, r1, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800508c:	1b3c      	subs	r4, r7, r4
        wTimePhC = wTimePhB - wX / 131072;
 800508e:	19cf      	adds	r7, r1, r7
        pHandle->highDuty = wTimePhC;
 8005090:	2140      	movs	r1, #64	; 0x40
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005092:	17e3      	asrs	r3, r4, #31
 8005094:	039b      	lsls	r3, r3, #14
 8005096:	0b9b      	lsrs	r3, r3, #14
 8005098:	191c      	adds	r4, r3, r4
 800509a:	14a4      	asrs	r4, r4, #18
 800509c:	08b3      	lsrs	r3, r6, #2
 800509e:	18e3      	adds	r3, r4, r3
        wTimePhB = wTimePhA + wZ / 131072;
 80050a0:	1492      	asrs	r2, r2, #18
 80050a2:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhB - wX / 131072;
 80050a4:	147d      	asrs	r5, r7, #17
 80050a6:	1b55      	subs	r5, r2, r5
        pHandle->lowDuty = wTimePhA;
 80050a8:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80050aa:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 80050ac:	5245      	strh	r5, [r0, r1]
 80050ae:	e7ca      	b.n	8005046 <PWMC_SetPhaseVoltage+0x66>
    if ( wZ < 0 )
 80050b0:	1c55      	adds	r5, r2, #1
 80050b2:	db68      	blt.n	8005186 <PWMC_SetPhaseVoltage+0x1a6>
      if ( wX <= 0 )
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	dd2e      	ble.n	8005116 <PWMC_SetPhaseVoltage+0x136>
        pHandle->Sector = SECTOR_3;
 80050b8:	223a      	movs	r2, #58	; 0x3a
 80050ba:	2402      	movs	r4, #2
 80050bc:	5484      	strb	r4, [r0, r2]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80050be:	1bdc      	subs	r4, r3, r7
 80050c0:	17e2      	asrs	r2, r4, #31
 80050c2:	0392      	lsls	r2, r2, #14
        wTimePhC = wTimePhA - wY / 131072;
 80050c4:	17cd      	asrs	r5, r1, #31
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80050c6:	0b93      	lsrs	r3, r2, #14
        wTimePhC = wTimePhA - wY / 131072;
 80050c8:	03ad      	lsls	r5, r5, #14
 80050ca:	0bad      	lsrs	r5, r5, #14
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80050cc:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhA - wY / 131072;
 80050ce:	1869      	adds	r1, r5, r1
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80050d0:	149b      	asrs	r3, r3, #18
 80050d2:	08b6      	lsrs	r6, r6, #2
 80050d4:	199b      	adds	r3, r3, r6
        wTimePhC = wTimePhA - wY / 131072;
 80050d6:	1489      	asrs	r1, r1, #18
 80050d8:	1a5d      	subs	r5, r3, r1
        pHandle->highDuty = wTimePhA;
 80050da:	2140      	movs	r1, #64	; 0x40
        wTimePhB = wTimePhC + wX / 131072;
 80050dc:	147a      	asrs	r2, r7, #17
 80050de:	1952      	adds	r2, r2, r5
        pHandle->lowDuty = wTimePhB;
 80050e0:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80050e2:	87c5      	strh	r5, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80050e4:	5243      	strh	r3, [r0, r1]
 80050e6:	e7ae      	b.n	8005046 <PWMC_SetPhaseVoltage+0x66>
    if ( pHandle->Ia > 0 )
 80050e8:	3447      	adds	r4, #71	; 0x47
 80050ea:	5f04      	ldrsh	r4, [r0, r4]
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	dd6c      	ble.n	80051ca <PWMC_SetPhaseVoltage+0x1ea>
      pHandle->CntPhA += pHandle->DTCompCnt;
 80050f0:	2454      	movs	r4, #84	; 0x54
 80050f2:	5b04      	ldrh	r4, [r0, r4]
 80050f4:	18e3      	adds	r3, r4, r3
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8643      	strh	r3, [r0, #50]	; 0x32
    if ( pHandle->Ib > 0 )
 80050fa:	234a      	movs	r3, #74	; 0x4a
 80050fc:	5ec3      	ldrsh	r3, [r0, r3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	dd60      	ble.n	80051c4 <PWMC_SetPhaseVoltage+0x1e4>
      pHandle->CntPhB += pHandle->DTCompCnt;
 8005102:	1912      	adds	r2, r2, r4
 8005104:	b292      	uxth	r2, r2
    if ( pHandle->Ic > 0 )
 8005106:	234c      	movs	r3, #76	; 0x4c
 8005108:	8682      	strh	r2, [r0, #52]	; 0x34
 800510a:	5ec3      	ldrsh	r3, [r0, r3]
 800510c:	2b00      	cmp	r3, #0
 800510e:	dd56      	ble.n	80051be <PWMC_SetPhaseVoltage+0x1de>
      pHandle->CntPhC += pHandle->DTCompCnt;
 8005110:	1909      	adds	r1, r1, r4
 8005112:	86c1      	strh	r1, [r0, #54]	; 0x36
 8005114:	e7aa      	b.n	800506c <PWMC_SetPhaseVoltage+0x8c>
        pHandle->Sector = SECTOR_4;
 8005116:	233a      	movs	r3, #58	; 0x3a
 8005118:	2103      	movs	r1, #3
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800511a:	1b3c      	subs	r4, r7, r4
        pHandle->Sector = SECTOR_4;
 800511c:	54c1      	strb	r1, [r0, r3]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800511e:	17e1      	asrs	r1, r4, #31
 8005120:	0389      	lsls	r1, r1, #14
 8005122:	0b8b      	lsrs	r3, r1, #14
        wTimePhB = wTimePhA + wZ / 131072;
 8005124:	17d1      	asrs	r1, r2, #31
 8005126:	0389      	lsls	r1, r1, #14
 8005128:	0b89      	lsrs	r1, r1, #14
 800512a:	188a      	adds	r2, r1, r2
        wTimePhC = wTimePhB - wX / 131072;
 800512c:	17f9      	asrs	r1, r7, #31
 800512e:	03c9      	lsls	r1, r1, #15
 8005130:	0bc9      	lsrs	r1, r1, #15
 8005132:	19cf      	adds	r7, r1, r7
        pHandle->highDuty = wTimePhA;
 8005134:	2140      	movs	r1, #64	; 0x40
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005136:	191b      	adds	r3, r3, r4
 8005138:	149b      	asrs	r3, r3, #18
 800513a:	08b6      	lsrs	r6, r6, #2
 800513c:	199b      	adds	r3, r3, r6
        wTimePhB = wTimePhA + wZ / 131072;
 800513e:	1492      	asrs	r2, r2, #18
 8005140:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhB - wX / 131072;
 8005142:	147d      	asrs	r5, r7, #17
 8005144:	1b55      	subs	r5, r2, r5
        pHandle->lowDuty = wTimePhC;
 8005146:	8785      	strh	r5, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005148:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800514a:	5243      	strh	r3, [r0, r1]
 800514c:	e77b      	b.n	8005046 <PWMC_SetPhaseVoltage+0x66>
        pHandle->Sector = SECTOR_6;
 800514e:	223a      	movs	r2, #58	; 0x3a
 8005150:	2405      	movs	r4, #5
 8005152:	5484      	strb	r4, [r0, r2]
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005154:	1bdc      	subs	r4, r3, r7
 8005156:	17e3      	asrs	r3, r4, #31
        wTimePhC = wTimePhA - wY / 131072;
 8005158:	17cd      	asrs	r5, r1, #31
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800515a:	039b      	lsls	r3, r3, #14
 800515c:	0b9b      	lsrs	r3, r3, #14
        wTimePhC = wTimePhA - wY / 131072;
 800515e:	03ad      	lsls	r5, r5, #14
 8005160:	0bad      	lsrs	r5, r5, #14
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005162:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhA - wY / 131072;
 8005164:	1869      	adds	r1, r5, r1
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005166:	149b      	asrs	r3, r3, #18
 8005168:	08b6      	lsrs	r6, r6, #2
 800516a:	199b      	adds	r3, r3, r6
        wTimePhC = wTimePhA - wY / 131072;
 800516c:	1489      	asrs	r1, r1, #18
 800516e:	1a5d      	subs	r5, r3, r1
        pHandle->highDuty = wTimePhB;
 8005170:	2140      	movs	r1, #64	; 0x40
        wTimePhB = wTimePhC + wX / 131072;
 8005172:	17fa      	asrs	r2, r7, #31
 8005174:	03d2      	lsls	r2, r2, #15
 8005176:	0bd2      	lsrs	r2, r2, #15
 8005178:	19d2      	adds	r2, r2, r7
 800517a:	1452      	asrs	r2, r2, #17
 800517c:	1952      	adds	r2, r2, r5
        pHandle->lowDuty = wTimePhA;
 800517e:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005180:	87c5      	strh	r5, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8005182:	5242      	strh	r2, [r0, r1]
 8005184:	e75f      	b.n	8005046 <PWMC_SetPhaseVoltage+0x66>
      pHandle->Sector = SECTOR_5;
 8005186:	253a      	movs	r5, #58	; 0x3a
 8005188:	2704      	movs	r7, #4
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800518a:	1b1c      	subs	r4, r3, r4
      pHandle->Sector = SECTOR_5;
 800518c:	5547      	strb	r7, [r0, r5]
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800518e:	17e5      	asrs	r5, r4, #31
 8005190:	03ad      	lsls	r5, r5, #14
 8005192:	0bab      	lsrs	r3, r5, #14
      wTimePhC = wTimePhA - wY / 131072;
 8005194:	17cd      	asrs	r5, r1, #31
 8005196:	03ad      	lsls	r5, r5, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005198:	191b      	adds	r3, r3, r4
      wTimePhC = wTimePhA - wY / 131072;
 800519a:	0bad      	lsrs	r5, r5, #14
 800519c:	1869      	adds	r1, r5, r1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800519e:	149b      	asrs	r3, r3, #18
 80051a0:	08b6      	lsrs	r6, r6, #2
 80051a2:	199b      	adds	r3, r3, r6
      wTimePhC = wTimePhA - wY / 131072;
 80051a4:	1489      	asrs	r1, r1, #18
 80051a6:	1a5d      	subs	r5, r3, r1
      pHandle->highDuty = wTimePhB;
 80051a8:	2140      	movs	r1, #64	; 0x40
      wTimePhB = wTimePhA + wZ / 131072;
 80051aa:	17d4      	asrs	r4, r2, #31
 80051ac:	03a4      	lsls	r4, r4, #14
 80051ae:	0ba4      	lsrs	r4, r4, #14
 80051b0:	18a2      	adds	r2, r4, r2
 80051b2:	1492      	asrs	r2, r2, #18
 80051b4:	18d2      	adds	r2, r2, r3
      pHandle->lowDuty = wTimePhC;
 80051b6:	8785      	strh	r5, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 80051b8:	87c3      	strh	r3, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 80051ba:	5242      	strh	r2, [r0, r1]
 80051bc:	e743      	b.n	8005046 <PWMC_SetPhaseVoltage+0x66>
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80051be:	1b09      	subs	r1, r1, r4
 80051c0:	86c1      	strh	r1, [r0, #54]	; 0x36
 80051c2:	e753      	b.n	800506c <PWMC_SetPhaseVoltage+0x8c>
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80051c4:	1b12      	subs	r2, r2, r4
 80051c6:	b292      	uxth	r2, r2
 80051c8:	e79d      	b.n	8005106 <PWMC_SetPhaseVoltage+0x126>
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80051ca:	2454      	movs	r4, #84	; 0x54
 80051cc:	5b04      	ldrh	r4, [r0, r4]
 80051ce:	1b1b      	subs	r3, r3, r4
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	e791      	b.n	80050f8 <PWMC_SetPhaseVoltage+0x118>

080051d4 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 80051d4:	b510      	push	{r4, lr}
  pHandle->pFctSwitchOffPwm( pHandle );
 80051d6:	6883      	ldr	r3, [r0, #8]
 80051d8:	4798      	blx	r3
}
 80051da:	bd10      	pop	{r4, pc}

080051dc <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	0004      	movs	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 80051e0:	2900      	cmp	r1, #0
 80051e2:	d011      	beq.n	8005208 <PWMC_CurrentReadingCalibr+0x2c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80051e4:	2901      	cmp	r1, #1
 80051e6:	d002      	beq.n	80051ee <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80051e8:	2500      	movs	r5, #0
  }
  else
  {
  }
  return retVal;
}
 80051ea:	0028      	movs	r0, r5
 80051ec:	bd70      	pop	{r4, r5, r6, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80051ee:	2244      	movs	r2, #68	; 0x44
 80051f0:	5a83      	ldrh	r3, [r0, r2]
      retVal = true;
 80051f2:	2501      	movs	r5, #1
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f8      	beq.n	80051ea <PWMC_CurrentReadingCalibr+0xe>
      pHandle->OffCalibrWaitTimeCounter--;
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	5283      	strh	r3, [r0, r2]
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f2      	bne.n	80051e8 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8005202:	6903      	ldr	r3, [r0, #16]
 8005204:	4798      	blx	r3
        retVal = true;
 8005206:	e7f0      	b.n	80051ea <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8005208:	f7ff ffe4 	bl	80051d4 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800520c:	2352      	movs	r3, #82	; 0x52
 800520e:	2244      	movs	r2, #68	; 0x44
 8005210:	5ae3      	ldrh	r3, [r4, r3]
 8005212:	52a3      	strh	r3, [r4, r2]
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e7      	bne.n	80051e8 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005218:	0020      	movs	r0, r4
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	4798      	blx	r3
      retVal = true;
 800521e:	2501      	movs	r5, #1
 8005220:	e7e3      	b.n	80051ea <PWMC_CurrentReadingCalibr+0xe>
 8005222:	46c0      	nop			; (mov r8, r8)

08005224 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 8005224:	b510      	push	{r4, lr}
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005226:	69c3      	ldr	r3, [r0, #28]
 8005228:	4798      	blx	r3
}
 800522a:	bd10      	pop	{r4, pc}

0800522c <R3_1_GetPhaseCurrents>:
 * @brief  It computes and return latest converted motor phase currents
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval ab_t Ia and Ib current in ab_t format
 */
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800522c:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800522e:	2470      	movs	r4, #112	; 0x70
 8005230:	4a59      	ldr	r2, [pc, #356]	; (8005398 <R3_1_GetPhaseCurrents+0x16c>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8005232:	2504      	movs	r5, #4
 8005234:	6853      	ldr	r3, [r2, #4]
 8005236:	43a3      	bics	r3, r4
 8005238:	6053      	str	r3, [r2, #4]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);

  bSector = ( uint8_t ) pHandle->_Super.Sector;
 800523a:	233a      	movs	r3, #58	; 0x3a
 800523c:	4c57      	ldr	r4, [pc, #348]	; (800539c <R3_1_GetPhaseCurrents+0x170>)
 800523e:	5cc2      	ldrb	r2, [r0, r3]
 8005240:	68e3      	ldr	r3, [r4, #12]
 8005242:	43ab      	bics	r3, r5
 8005244:	60e3      	str	r3, [r4, #12]

  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8005246:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8005248:	0093      	lsls	r3, r2, #2
 800524a:	46a4      	mov	ip, r4
 800524c:	4463      	add	r3, ip
 800524e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8005252:	8824      	ldrh	r4, [r4, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8005254:	881e      	ldrh	r6, [r3, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8005256:	b2a4      	uxth	r4, r4
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8005258:	b2b6      	uxth	r6, r6
  
  switch ( bSector )
 800525a:	2a04      	cmp	r2, #4
 800525c:	d822      	bhi.n	80052a4 <R3_1_GetPhaseCurrents+0x78>
 800525e:	2a02      	cmp	r2, #2
 8005260:	d841      	bhi.n	80052e6 <R3_1_GetPhaseCurrents+0xba>
 8005262:	2a00      	cmp	r2, #0
 8005264:	d027      	beq.n	80052b6 <R3_1_GetPhaseCurrents+0x8a>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) ------------------------------*/
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005266:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005268:	1b1a      	subs	r2, r3, r4

      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800526a:	4c4d      	ldr	r4, [pc, #308]	; (80053a0 <R3_1_GetPhaseCurrents+0x174>)
 800526c:	42a2      	cmp	r2, r4
 800526e:	da66      	bge.n	800533e <R3_1_GetPhaseCurrents+0x112>
      {
        pStator_Currents->a = -INT16_MAX;
 8005270:	0022      	movs	r2, r4
 8005272:	0027      	movs	r7, r4
 8005274:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <R3_1_GetPhaseCurrents+0x178>)
 8005276:	800c      	strh	r4, [r1, #0]

      /* Ic = PhaseCOffset - ADC converted value) ------------------------------*/
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );

      /* Ib = -Ic -Ia */
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8005278:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800527a:	1b35      	subs	r5, r6, r4

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 800527c:	2480      	movs	r4, #128	; 0x80
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 800527e:	1aad      	subs	r5, r5, r2
      if ( wAux > INT16_MAX )
 8005280:	0224      	lsls	r4, r4, #8
 8005282:	42a5      	cmp	r5, r4
 8005284:	da51      	bge.n	800532a <R3_1_GetPhaseCurrents+0xfe>
      {
        pStator_Currents->b = INT16_MAX;
      }
      else  if ( wAux < -INT16_MAX )
 8005286:	4c46      	ldr	r4, [pc, #280]	; (80053a0 <R3_1_GetPhaseCurrents+0x174>)
 8005288:	42a5      	cmp	r5, r4
 800528a:	db00      	blt.n	800528e <R3_1_GetPhaseCurrents+0x62>
 800528c:	e07c      	b.n	8005388 <R3_1_GetPhaseCurrents+0x15c>
      {
        pStator_Currents->b = -INT16_MAX;
 800528e:	4d45      	ldr	r5, [pc, #276]	; (80053a4 <R3_1_GetPhaseCurrents+0x178>)
 8005290:	804c      	strh	r4, [r1, #2]

    default:
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
 8005292:	2248      	movs	r2, #72	; 0x48
 8005294:	5287      	strh	r7, [r0, r2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005296:	195b      	adds	r3, r3, r5
  pHandle->_Super.Ib = pStator_Currents->b;
 8005298:	3202      	adds	r2, #2
 800529a:	5284      	strh	r4, [r0, r2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800529c:	425b      	negs	r3, r3
 800529e:	3202      	adds	r2, #2
 80052a0:	5283      	strh	r3, [r0, r2]
}
 80052a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch ( bSector )
 80052a4:	2a05      	cmp	r2, #5
 80052a6:	d006      	beq.n	80052b6 <R3_1_GetPhaseCurrents+0x8a>
  pHandle->_Super.Ia = pStator_Currents->a;
 80052a8:	2300      	movs	r3, #0
 80052aa:	5ecf      	ldrsh	r7, [r1, r3]
  pHandle->_Super.Ib = pStator_Currents->b;
 80052ac:	2302      	movs	r3, #2
 80052ae:	5ecc      	ldrsh	r4, [r1, r3]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80052b0:	884d      	ldrh	r5, [r1, #2]
 80052b2:	880b      	ldrh	r3, [r1, #0]
 80052b4:	e7ed      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80052b6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80052b8:	1b1a      	subs	r2, r3, r4
      if ( wAux < -INT16_MAX )
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <R3_1_GetPhaseCurrents+0x174>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	db23      	blt.n	8005308 <R3_1_GetPhaseCurrents+0xdc>
      else  if ( wAux > INT16_MAX )
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	429a      	cmp	r2, r3
 80052c6:	db57      	blt.n	8005378 <R3_1_GetPhaseCurrents+0x14c>
        pStator_Currents->b = INT16_MAX;
 80052c8:	4d37      	ldr	r5, [pc, #220]	; (80053a8 <R3_1_GetPhaseCurrents+0x17c>)
 80052ca:	002a      	movs	r2, r5
 80052cc:	002c      	movs	r4, r5
 80052ce:	804d      	strh	r5, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80052d0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80052d2:	1af6      	subs	r6, r6, r3
      if ( wAux > INT16_MAX )
 80052d4:	2380      	movs	r3, #128	; 0x80
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80052d6:	1ab2      	subs	r2, r6, r2
      if ( wAux > INT16_MAX )
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	429a      	cmp	r2, r3
 80052dc:	db1f      	blt.n	800531e <R3_1_GetPhaseCurrents+0xf2>
        pStator_Currents->a = INT16_MAX;
 80052de:	4b32      	ldr	r3, [pc, #200]	; (80053a8 <R3_1_GetPhaseCurrents+0x17c>)
 80052e0:	001f      	movs	r7, r3
 80052e2:	800b      	strh	r3, [r1, #0]
 80052e4:	e7d5      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80052e6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80052e8:	1b1c      	subs	r4, r3, r4
      if ( wAux < -INT16_MAX )
 80052ea:	4b2d      	ldr	r3, [pc, #180]	; (80053a0 <R3_1_GetPhaseCurrents+0x174>)
 80052ec:	429c      	cmp	r4, r3
 80052ee:	da20      	bge.n	8005332 <R3_1_GetPhaseCurrents+0x106>
        pStator_Currents->a = INT16_MAX;
 80052f0:	800b      	strh	r3, [r1, #0]
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80052f2:	6e03      	ldr	r3, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 80052f4:	4c2a      	ldr	r4, [pc, #168]	; (80053a0 <R3_1_GetPhaseCurrents+0x174>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80052f6:	1b9e      	subs	r6, r3, r6
      if ( wAux < -INT16_MAX )
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	da29      	bge.n	8005350 <R3_1_GetPhaseCurrents+0x124>
  pHandle->_Super.Ia = pStator_Currents->a;
 80052fc:	2300      	movs	r3, #0
 80052fe:	5ecf      	ldrsh	r7, [r1, r3]
 8005300:	4d28      	ldr	r5, [pc, #160]	; (80053a4 <R3_1_GetPhaseCurrents+0x178>)
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005302:	880b      	ldrh	r3, [r1, #0]
        pStator_Currents->b = -INT16_MAX;
 8005304:	804c      	strh	r4, [r1, #2]
 8005306:	e7c4      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = -INT16_MAX;
 8005308:	001a      	movs	r2, r3
 800530a:	001c      	movs	r4, r3
 800530c:	804b      	strh	r3, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 800530e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005310:	4d24      	ldr	r5, [pc, #144]	; (80053a4 <R3_1_GetPhaseCurrents+0x178>)
 8005312:	1af6      	subs	r6, r6, r3
      if ( wAux > INT16_MAX )
 8005314:	2380      	movs	r3, #128	; 0x80
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8005316:	1ab2      	subs	r2, r6, r2
      if ( wAux > INT16_MAX )
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	429a      	cmp	r2, r3
 800531c:	dadf      	bge.n	80052de <R3_1_GetPhaseCurrents+0xb2>
      else  if ( wAux < -INT16_MAX )
 800531e:	4f20      	ldr	r7, [pc, #128]	; (80053a0 <R3_1_GetPhaseCurrents+0x174>)
 8005320:	42ba      	cmp	r2, r7
 8005322:	da35      	bge.n	8005390 <R3_1_GetPhaseCurrents+0x164>
        pStator_Currents->a = -INT16_MAX;
 8005324:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <R3_1_GetPhaseCurrents+0x178>)
 8005326:	800f      	strh	r7, [r1, #0]
 8005328:	e7b3      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = INT16_MAX;
 800532a:	4d1f      	ldr	r5, [pc, #124]	; (80053a8 <R3_1_GetPhaseCurrents+0x17c>)
 800532c:	002c      	movs	r4, r5
 800532e:	804d      	strh	r5, [r1, #2]
 8005330:	e7af      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
      else  if ( wAux > INT16_MAX )
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	429c      	cmp	r4, r3
 8005338:	db15      	blt.n	8005366 <R3_1_GetPhaseCurrents+0x13a>
        pStator_Currents->a = INT16_MAX;
 800533a:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <R3_1_GetPhaseCurrents+0x17c>)
 800533c:	e7d8      	b.n	80052f0 <R3_1_GetPhaseCurrents+0xc4>
      else  if ( wAux > INT16_MAX )
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	429a      	cmp	r2, r3
 8005344:	db1c      	blt.n	8005380 <R3_1_GetPhaseCurrents+0x154>
        pStator_Currents->a = INT16_MAX;
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <R3_1_GetPhaseCurrents+0x17c>)
 8005348:	001a      	movs	r2, r3
 800534a:	001f      	movs	r7, r3
 800534c:	800b      	strh	r3, [r1, #0]
 800534e:	e793      	b.n	8005278 <R3_1_GetPhaseCurrents+0x4c>
      else  if ( wAux > INT16_MAX )
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	429e      	cmp	r6, r3
 8005356:	db08      	blt.n	800536a <R3_1_GetPhaseCurrents+0x13e>
        pStator_Currents->b = INT16_MAX;
 8005358:	4d13      	ldr	r5, [pc, #76]	; (80053a8 <R3_1_GetPhaseCurrents+0x17c>)
  pHandle->_Super.Ia = pStator_Currents->a;
 800535a:	2300      	movs	r3, #0
 800535c:	5ecf      	ldrsh	r7, [r1, r3]
 800535e:	002c      	movs	r4, r5
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005360:	880b      	ldrh	r3, [r1, #0]
        pStator_Currents->b = INT16_MAX;
 8005362:	804d      	strh	r5, [r1, #2]
 8005364:	e795      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->a = ( int16_t )wAux;
 8005366:	800c      	strh	r4, [r1, #0]
 8005368:	e7c3      	b.n	80052f2 <R3_1_GetPhaseCurrents+0xc6>
        pStator_Currents->b = ( int16_t )wAux;
 800536a:	b234      	sxth	r4, r6
  pHandle->_Super.Ia = pStator_Currents->a;
 800536c:	2300      	movs	r3, #0
 800536e:	5ecf      	ldrsh	r7, [r1, r3]
        pStator_Currents->b = ( int16_t )wAux;
 8005370:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005372:	880b      	ldrh	r3, [r1, #0]
 8005374:	b2b5      	uxth	r5, r6
 8005376:	e78c      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = ( int16_t )wAux;
 8005378:	b214      	sxth	r4, r2
 800537a:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800537c:	b295      	uxth	r5, r2
 800537e:	e7a7      	b.n	80052d0 <R3_1_GetPhaseCurrents+0xa4>
        pStator_Currents->a = ( int16_t )wAux;
 8005380:	b217      	sxth	r7, r2
 8005382:	800f      	strh	r7, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005384:	b293      	uxth	r3, r2
 8005386:	e777      	b.n	8005278 <R3_1_GetPhaseCurrents+0x4c>
        pStator_Currents->b = ( int16_t )wAux;
 8005388:	b22c      	sxth	r4, r5
 800538a:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800538c:	b2ad      	uxth	r5, r5
 800538e:	e780      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->a = ( int16_t )wAux;
 8005390:	b217      	sxth	r7, r2
 8005392:	800f      	strh	r7, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005394:	b293      	uxth	r3, r2
 8005396:	e77c      	b.n	8005292 <R3_1_GetPhaseCurrents+0x66>
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40012400 	.word	0x40012400
 80053a0:	ffff8001 	.word	0xffff8001
 80053a4:	00008001 	.word	0x00008001
 80053a8:	00007fff 	.word	0x00007fff

080053ac <R3_1_HFCurrentsCalibrationAB>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 80053ac:	2373      	movs	r3, #115	; 0x73
{
 80053ae:	b530      	push	{r4, r5, lr}
 80053b0:	2570      	movs	r5, #112	; 0x70
 80053b2:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <R3_1_HFCurrentsCalibrationAB+0x48>)
  uint8_t bSector = pHandle->CalibSector;
 80053b4:	5cc4      	ldrb	r4, [r0, r3]
 80053b6:	6853      	ldr	r3, [r2, #4]
 80053b8:	43ab      	bics	r3, r5
 80053ba:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80053bc:	2372      	movs	r3, #114	; 0x72
 80053be:	5cc2      	ldrb	r2, [r0, r3]
 80053c0:	2a0f      	cmp	r2, #15
 80053c2:	d813      	bhi.n	80053ec <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 80053c4:	00a2      	lsls	r2, r4, #2
 80053c6:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80053c8:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80053ca:	46a4      	mov	ip, r4
 80053cc:	4462      	add	r2, ip
 80053ce:	46ac      	mov	ip, r5
 80053d0:	6b54      	ldr	r4, [r2, #52]	; 0x34
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 80053d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 80053d4:	8824      	ldrh	r4, [r4, #0]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 80053d6:	8812      	ldrh	r2, [r2, #0]
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 80053d8:	4464      	add	r4, ip
 80053da:	65c4      	str	r4, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 80053dc:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80053de:	46a4      	mov	ip, r4
 80053e0:	4462      	add	r2, ip
 80053e2:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 80053e4:	5cc2      	ldrb	r2, [r0, r3]
 80053e6:	3201      	adds	r2, #1
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 80053f0:	804b      	strh	r3, [r1, #2]
}
 80053f2:	bd30      	pop	{r4, r5, pc}
 80053f4:	40012c00 	.word	0x40012c00

080053f8 <R3_1_HFCurrentsCalibrationC>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 80053f8:	2373      	movs	r3, #115	; 0x73
{
 80053fa:	b530      	push	{r4, r5, lr}
 80053fc:	2570      	movs	r5, #112	; 0x70
 80053fe:	4c0f      	ldr	r4, [pc, #60]	; (800543c <R3_1_HFCurrentsCalibrationC+0x44>)
  uint8_t bSector = pHandle->CalibSector;
 8005400:	5cc2      	ldrb	r2, [r0, r3]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	43ab      	bics	r3, r5
 8005406:	6063      	str	r3, [r4, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  pHandle->_Super.Sector = SECTOR_1;
 8005408:	233a      	movs	r3, #58	; 0x3a
 800540a:	2400      	movs	r4, #0
 800540c:	54c4      	strb	r4, [r0, r3]
  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800540e:	3338      	adds	r3, #56	; 0x38
 8005410:	5cc4      	ldrb	r4, [r0, r3]
 8005412:	2c0f      	cmp	r4, #15
 8005414:	d80e      	bhi.n	8005434 <R3_1_HFCurrentsCalibrationC+0x3c>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8005416:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8005418:	3212      	adds	r2, #18
 800541a:	46a4      	mov	ip, r4
 800541c:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800541e:	0092      	lsls	r2, r2, #2
 8005420:	4462      	add	r2, ip
 8005422:	46a4      	mov	ip, r4
 8005424:	6852      	ldr	r2, [r2, #4]
 8005426:	8812      	ldrh	r2, [r2, #0]
 8005428:	4462      	add	r2, ip
 800542a:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800542c:	5cc2      	ldrb	r2, [r0, r3]
 800542e:	3201      	adds	r2, #1
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8005438:	804b      	strh	r3, [r1, #2]
}
 800543a:	bd30      	pop	{r4, r5, pc}
 800543c:	40012c00 	.word	0x40012c00

08005440 <R3_1_Init>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005440:	2104      	movs	r1, #4
 8005442:	4a3b      	ldr	r2, [pc, #236]	; (8005530 <R3_1_Init+0xf0>)
{
 8005444:	b530      	push	{r4, r5, lr}
 8005446:	6853      	ldr	r3, [r2, #4]
 8005448:	0004      	movs	r4, r0
 800544a:	438b      	bics	r3, r1
 800544c:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800544e:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8005450:	6853      	ldr	r3, [r2, #4]
 8005452:	3104      	adds	r1, #4
 8005454:	438b      	bics	r3, r1
 8005456:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8005458:	6011      	str	r1, [r2, #0]
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	4b35      	ldr	r3, [pc, #212]	; (8005534 <R3_1_Init+0xf4>)
 800545e:	0309      	lsls	r1, r1, #12
 8005460:	6818      	ldr	r0, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005462:	2580      	movs	r5, #128	; 0x80
 8005464:	4301      	orrs	r1, r0
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005466:	2081      	movs	r0, #129	; 0x81
 8005468:	6019      	str	r1, [r3, #0]
 800546a:	4933      	ldr	r1, [pc, #204]	; (8005538 <R3_1_Init+0xf8>)
 800546c:	4240      	negs	r0, r0
 800546e:	6108      	str	r0, [r1, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005470:	68c8      	ldr	r0, [r1, #12]
 8005472:	b083      	sub	sp, #12
 8005474:	4328      	orrs	r0, r5
 8005476:	60c8      	str	r0, [r1, #12]
    LL_TIM_SetCounter( TIM1, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8005478:	206c      	movs	r0, #108	; 0x6c
 800547a:	5a20      	ldrh	r0, [r4, r0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 800547c:	3d7e      	subs	r5, #126	; 0x7e
 800547e:	3801      	subs	r0, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005480:	6248      	str	r0, [r1, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005482:	2080      	movs	r0, #128	; 0x80
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	03c0      	lsls	r0, r0, #15
 8005488:	4301      	orrs	r1, r0
 800548a:	6199      	str	r1, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800548c:	699b      	ldr	r3, [r3, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800548e:	492b      	ldr	r1, [pc, #172]	; (800553c <R3_1_Init+0xfc>)
 8005490:	4003      	ands	r3, r0
 8005492:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	68c8      	ldr	r0, [r1, #12]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	4303      	orrs	r3, r0
 800549e:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CR,
 80054a0:	6893      	ldr	r3, [r2, #8]
 80054a2:	4927      	ldr	r1, [pc, #156]	; (8005540 <R3_1_Init+0x100>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 80054a4:	2010      	movs	r0, #16
  MODIFY_REG(ADCx->CR,
 80054a6:	4019      	ands	r1, r3
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80054ae:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 80054b0:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80054b2:	6893      	ldr	r3, [r2, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	dbfc      	blt.n	80054b2 <R3_1_Init+0x72>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80054b8:	6893      	ldr	r3, [r2, #8]
 80054ba:	4219      	tst	r1, r3
 80054bc:	d1f9      	bne.n	80054b2 <R3_1_Init+0x72>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 80054be:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 80054c0:	4218      	tst	r0, r3
 80054c2:	d1f6      	bne.n	80054b2 <R3_1_Init+0x72>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 80054c4:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 80054c6:	421d      	tst	r5, r3
 80054c8:	d1f3      	bne.n	80054b2 <R3_1_Init+0x72>
  MODIFY_REG(ADCx->CR,
 80054ca:	6893      	ldr	r3, [r2, #8]
 80054cc:	491c      	ldr	r1, [pc, #112]	; (8005540 <R3_1_Init+0x100>)
 80054ce:	400b      	ands	r3, r1
 80054d0:	2101      	movs	r1, #1
 80054d2:	430b      	orrs	r3, r1
 80054d4:	6093      	str	r3, [r2, #8]
    while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 80054d6:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 80054d8:	4915      	ldr	r1, [pc, #84]	; (8005530 <R3_1_Init+0xf0>)
 80054da:	680b      	ldr	r3, [r1, #0]
 80054dc:	421a      	tst	r2, r3
 80054de:	d0fc      	beq.n	80054da <R3_1_Init+0x9a>
    LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )pHandle->ADC1_DMA_converted );
 80054e0:	0023      	movs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80054e2:	2003      	movs	r0, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80054e4:	4917      	ldr	r1, [pc, #92]	; (8005544 <R3_1_Init+0x104>)
 80054e6:	336e      	adds	r3, #110	; 0x6e
 80054e8:	60cb      	str	r3, [r1, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80054ea:	4b17      	ldr	r3, [pc, #92]	; (8005548 <R3_1_Init+0x108>)
    pHandle->ADCRegularLocked=false; 
 80054ec:	2500      	movs	r5, #0
 80054ee:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80054f0:	684b      	ldr	r3, [r1, #4]
 80054f2:	0c1b      	lsrs	r3, r3, #16
 80054f4:	041b      	lsls	r3, r3, #16
 80054f6:	4303      	orrs	r3, r0
 80054f8:	604b      	str	r3, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80054fa:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80054fc:	306d      	adds	r0, #109	; 0x6d
 80054fe:	4313      	orrs	r3, r2
 8005500:	600b      	str	r3, [r1, #0]
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <R3_1_Init+0xf8>)
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	4381      	bics	r1, r0
 8005508:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 800550a:	6a18      	ldr	r0, [r3, #32]
 800550c:	490f      	ldr	r1, [pc, #60]	; (800554c <R3_1_Init+0x10c>)
 800550e:	4301      	orrs	r1, r0
 8005510:	6219      	str	r1, [r3, #32]
    pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	00c9      	lsls	r1, r1, #3
 8005516:	66a1      	str	r1, [r4, #104]	; 0x68
    pHandle->OverCurrentFlag = false;
 8005518:	2074      	movs	r0, #116	; 0x74
 800551a:	2100      	movs	r1, #0
 800551c:	5221      	strh	r1, [r4, r0]
    pHandle->ADCRegularLocked=false; 
 800551e:	3003      	adds	r0, #3
 8005520:	5425      	strb	r5, [r4, r0]
    pHandle->_Super.DTTest = 0u;
 8005522:	3829      	subs	r0, #41	; 0x29
 8005524:	5221      	strh	r1, [r4, r0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
}
 800552c:	b003      	add	sp, #12
 800552e:	bd30      	pop	{r4, r5, pc}
 8005530:	40012400 	.word	0x40012400
 8005534:	40021000 	.word	0x40021000
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40015800 	.word	0x40015800
 8005540:	7fffffe8 	.word	0x7fffffe8
 8005544:	40020008 	.word	0x40020008
 8005548:	40012440 	.word	0x40012440
 800554c:	00000555 	.word	0x00000555

08005550 <R3_1_WriteTIMRegisters>:
{
 8005550:	0003      	movs	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005552:	6f82      	ldr	r2, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 8005554:	8e40      	ldrh	r0, [r0, #50]	; 0x32
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005556:	6812      	ldr	r2, [r2, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005558:	6350      	str	r0, [r2, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPhB );
 800555a:	8e98      	ldrh	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800555c:	6390      	str	r0, [r2, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPhC );
 800555e:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005560:	63d0      	str	r0, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005562:	6411      	str	r1, [r2, #64]	; 0x40
  if ( pHandle->_Super.SWerror == 1u )
 8005564:	8f18      	ldrh	r0, [r3, #56]	; 0x38
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005566:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8005568:	2801      	cmp	r0, #1
 800556a:	d005      	beq.n	8005578 <R3_1_WriteTIMRegisters+0x28>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800556c:	2070      	movs	r0, #112	; 0x70
 800556e:	4010      	ands	r0, r2
 8005570:	1e43      	subs	r3, r0, #1
 8005572:	4198      	sbcs	r0, r3
    hAux = MC_FOC_DURATION;
 8005574:	b280      	uxth	r0, r0
}
 8005576:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8005578:	2200      	movs	r2, #0
 800557a:	871a      	strh	r2, [r3, #56]	; 0x38
 800557c:	e7fb      	b.n	8005576 <R3_1_WriteTIMRegisters+0x26>
 800557e:	46c0      	nop			; (mov r8, r8)

08005580 <R3_1_SetADCSampPointCalibration>:
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	00db      	lsls	r3, r3, #3
{
 8005584:	b510      	push	{r4, lr}
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005586:	6683      	str	r3, [r0, #104]	; 0x68
  pHandle->_Super.Sector = pHandle->CalibSector;
 8005588:	2373      	movs	r3, #115	; 0x73
 800558a:	5cc2      	ldrb	r2, [r0, r3]
 800558c:	3b39      	subs	r3, #57	; 0x39
 800558e:	54c2      	strb	r2, [r0, r3]
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 8005590:	3332      	adds	r3, #50	; 0x32
 8005592:	5ac1      	ldrh	r1, [r0, r3]
 8005594:	3901      	subs	r1, #1
 8005596:	b289      	uxth	r1, r1
 8005598:	f7ff ffda 	bl	8005550 <R3_1_WriteTIMRegisters>
}
 800559c:	bd10      	pop	{r4, pc}
 800559e:	46c0      	nop			; (mov r8, r8)

080055a0 <R3_1_SetADCSampPointSectX>:
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80055a0:	236c      	movs	r3, #108	; 0x6c
 80055a2:	2166      	movs	r1, #102	; 0x66
{
 80055a4:	b570      	push	{r4, r5, r6, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80055a6:	6f86      	ldr	r6, [r0, #120]	; 0x78
  register uint16_t lowDuty = pHdl->lowDuty;
 80055a8:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80055aa:	5ac2      	ldrh	r2, [r0, r3]
 80055ac:	5a71      	ldrh	r1, [r6, r1]
 80055ae:	1b13      	subs	r3, r2, r4
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	428b      	cmp	r3, r1
 80055b4:	d907      	bls.n	80055c6 <R3_1_SetADCSampPointSectX+0x26>
    pHandle->_Super.Sector = SECTOR_5;
 80055b6:	2104      	movs	r1, #4
 80055b8:	233a      	movs	r3, #58	; 0x3a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80055ba:	3a01      	subs	r2, #1
    pHandle->_Super.Sector = SECTOR_5;
 80055bc:	54c1      	strb	r1, [r0, r3]
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80055be:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
 80055c0:	f7ff ffc6 	bl	8005550 <R3_1_WriteTIMRegisters>
}
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80055c6:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80055c8:	005b      	lsls	r3, r3, #1
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80055ca:	1b65      	subs	r5, r4, r5
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80055cc:	b2ad      	uxth	r5, r5
 80055ce:	429d      	cmp	r5, r3
 80055d0:	d904      	bls.n	80055dc <R3_1_SetADCSampPointSectX+0x3c>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80055d2:	2368      	movs	r3, #104	; 0x68
 80055d4:	5af1      	ldrh	r1, [r6, r3]
 80055d6:	1a61      	subs	r1, r4, r1
 80055d8:	b289      	uxth	r1, r1
 80055da:	e7f1      	b.n	80055c0 <R3_1_SetADCSampPointSectX+0x20>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80055dc:	1909      	adds	r1, r1, r4
 80055de:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80055e0:	428a      	cmp	r2, r1
 80055e2:	d8ed      	bhi.n	80055c0 <R3_1_SetADCSampPointSectX+0x20>
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80055e4:	2380      	movs	r3, #128	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80055e6:	0052      	lsls	r2, r2, #1
 80055e8:	3a01      	subs	r2, #1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80055ea:	011b      	lsls	r3, r3, #4
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80055ec:	1a51      	subs	r1, r2, r1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80055ee:	6683      	str	r3, [r0, #104]	; 0x68
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80055f0:	b289      	uxth	r1, r1
 80055f2:	e7e5      	b.n	80055c0 <R3_1_SetADCSampPointSectX+0x20>

080055f4 <R3_1_TurnOnLowSides>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = true;
 80055f4:	2342      	movs	r3, #66	; 0x42
 80055f6:	2201      	movs	r2, #1
 80055f8:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80055fa:	4a0f      	ldr	r2, [pc, #60]	; (8005638 <R3_1_TurnOnLowSides+0x44>)
 80055fc:	3b44      	subs	r3, #68	; 0x44
 80055fe:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005600:	2300      	movs	r3, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005602:	2101      	movs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005604:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005606:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005608:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800560a:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 800560c:	4219      	tst	r1, r3
 800560e:	d0fc      	beq.n	800560a <R3_1_TurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	430b      	orrs	r3, r1
 8005618:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800561a:	2272      	movs	r2, #114	; 0x72
 800561c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800561e:	5c9a      	ldrb	r2, [r3, r2]
 8005620:	2a02      	cmp	r2, #2
 8005622:	d108      	bne.n	8005636 <R3_1_TurnOnLowSides+0x42>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005624:	685a      	ldr	r2, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005626:	6919      	ldr	r1, [r3, #16]
 8005628:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	6959      	ldr	r1, [r3, #20]
 800562e:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	6193      	str	r3, [r2, #24]

  }
  return;
}
 8005636:	4770      	bx	lr
 8005638:	40012c00 	.word	0x40012c00

0800563c <R3_1_SwitchOnPWM>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = false;
 800563c:	2342      	movs	r3, #66	; 0x42
 800563e:	2200      	movs	r2, #0
{
 8005640:	b570      	push	{r4, r5, r6, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005642:	54c2      	strb	r2, [r0, r3]

  /* We forbid ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=true; 
 8005644:	3335      	adds	r3, #53	; 0x35
 8005646:	3201      	adds	r2, #1
 8005648:	54c2      	strb	r2, [r0, r3]
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
 800564a:	3b0b      	subs	r3, #11
 800564c:	5ac2      	ldrh	r2, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <R3_1_SwitchOnPWM+0xd8>)
 8005650:	0851      	lsrs	r1, r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8005652:	3a05      	subs	r2, #5
 8005654:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005656:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005658:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800565a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800565c:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800565e:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005660:	4252      	negs	r2, r2
 8005662:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005664:	691a      	ldr	r2, [r3, #16]

  /* Wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8005666:	4211      	tst	r1, r2
 8005668:	d0fc      	beq.n	8005664 <R3_1_SwitchOnPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800566a:	2202      	movs	r2, #2
 800566c:	4252      	negs	r2, r2
 800566e:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005670:	2280      	movs	r2, #128	; 0x80
 8005672:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005674:	00d2      	lsls	r2, r2, #3
 8005676:	430a      	orrs	r2, r1
 8005678:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800567e:	0212      	lsls	r2, r2, #8
 8005680:	430a      	orrs	r2, r1
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005682:	2172      	movs	r1, #114	; 0x72
 8005684:	645a      	str	r2, [r3, #68]	; 0x44
 8005686:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005688:	5c51      	ldrb	r1, [r2, r1]
 800568a:	2902      	cmp	r1, #2
 800568c:	d029      	beq.n	80056e2 <R3_1_SwitchOnPWM+0xa6>

	  
    /* Configuration of DMA and ADC to next conversions */
    /* It's possible write the CHSELR resgister because the ADC conversion
       is stopped by the R3_1_SwitchOffPWM function */
    LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 800568e:	236a      	movs	r3, #106	; 0x6a
 8005690:	5cd3      	ldrb	r3, [r2, r3]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8005692:	2207      	movs	r2, #7
 8005694:	4920      	ldr	r1, [pc, #128]	; (8005718 <R3_1_SwitchOnPWM+0xdc>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005696:	2502      	movs	r5, #2
 8005698:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800569a:	2603      	movs	r6, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800569c:	4390      	bics	r0, r2
 800569e:	4303      	orrs	r3, r0
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80056a0:	2001      	movs	r0, #1
 80056a2:	614b      	str	r3, [r1, #20]
 80056a4:	4b1d      	ldr	r3, [pc, #116]	; (800571c <R3_1_SwitchOnPWM+0xe0>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4382      	bics	r2, r0
 80056aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	0c12      	lsrs	r2, r2, #16
 80056b0:	0412      	lsls	r2, r2, #16
 80056b2:	432a      	orrs	r2, r5
 80056b4:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80056b6:	681c      	ldr	r4, [r3, #0]
 80056b8:	4304      	orrs	r4, r0
 80056ba:	601c      	str	r4, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80056bc:	2404      	movs	r4, #4
 80056be:	600c      	str	r4, [r1, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80056c0:	68ca      	ldr	r2, [r1, #12]
 80056c2:	43b2      	bics	r2, r6
 80056c4:	4302      	orrs	r2, r0
 80056c6:	60ca      	str	r2, [r1, #12]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <R3_1_SwitchOnPWM+0xe4>)
 80056ca:	6054      	str	r4, [r2, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	432a      	orrs	r2, r5
 80056d0:	601a      	str	r2, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80056d2:	2202      	movs	r2, #2
 80056d4:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <R3_1_SwitchOnPWM+0xd8>)
 80056d6:	4252      	negs	r2, r2
 80056d8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	4310      	orrs	r0, r2
 80056de:	60d8      	str	r0, [r3, #12]
    LL_TIM_ClearFlag_UPDATE( TIMx );
    /* Enable Update IRQ */
    LL_TIM_EnableIT_UPDATE( TIMx );
  
  return;
}
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	490f      	ldr	r1, [pc, #60]	; (8005724 <R3_1_SwitchOnPWM+0xe8>)
 80056e6:	400b      	ands	r3, r1
 80056e8:	428b      	cmp	r3, r1
 80056ea:	d009      	beq.n	8005700 <R3_1_SwitchOnPWM+0xc4>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80056ec:	6853      	ldr	r3, [r2, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80056ee:	6911      	ldr	r1, [r2, #16]
 80056f0:	6299      	str	r1, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80056f2:	6893      	ldr	r3, [r2, #8]
 80056f4:	6951      	ldr	r1, [r2, #20]
 80056f6:	6299      	str	r1, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80056f8:	68d3      	ldr	r3, [r2, #12]
 80056fa:	6991      	ldr	r1, [r2, #24]
 80056fc:	6299      	str	r1, [r3, #40]	; 0x28
}
 80056fe:	e7c6      	b.n	800568e <R3_1_SwitchOnPWM+0x52>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005700:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005702:	6911      	ldr	r1, [r2, #16]
 8005704:	6199      	str	r1, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005706:	6893      	ldr	r3, [r2, #8]
 8005708:	6951      	ldr	r1, [r2, #20]
 800570a:	6199      	str	r1, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800570c:	68d3      	ldr	r3, [r2, #12]
 800570e:	6991      	ldr	r1, [r2, #24]
 8005710:	6199      	str	r1, [r3, #24]
}
 8005712:	e7bc      	b.n	800568e <R3_1_SwitchOnPWM+0x52>
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40012400 	.word	0x40012400
 800571c:	40020008 	.word	0x40020008
 8005720:	40020000 	.word	0x40020000
 8005724:	00000555 	.word	0x00000555

08005728 <R3_1_SwitchOffPWM>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005728:	2101      	movs	r1, #1
 800572a:	4b22      	ldr	r3, [pc, #136]	; (80057b4 <R3_1_SwitchOffPWM+0x8c>)
  *         MOE bit and reset the TIM status
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800572c:	b510      	push	{r4, lr}
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	438a      	bics	r2, r1
 8005732:	60da      	str	r2, [r3, #12]
  TIM_TypeDef * TIMx = TIM1;

  /* Enable Update IRQ */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005734:	2100      	movs	r1, #0
 8005736:	2242      	movs	r2, #66	; 0x42
 8005738:	5481      	strb	r1, [r0, r2]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800573a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573c:	491e      	ldr	r1, [pc, #120]	; (80057b8 <R3_1_SwitchOffPWM+0x90>)
 800573e:	400a      	ands	r2, r1
 8005740:	645a      	str	r2, [r3, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if ( pHandle->BrakeActionLock == true )
 8005742:	2376      	movs	r3, #118	; 0x76
 8005744:	5cc3      	ldrb	r3, [r0, r3]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800574a:	2272      	movs	r2, #114	; 0x72
 800574c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800574e:	5c9a      	ldrb	r2, [r3, r2]
 8005750:	2a02      	cmp	r2, #2
 8005752:	d025      	beq.n	80057a0 <R3_1_SwitchOffPWM+0x78>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8005754:	2102      	movs	r1, #2
 8005756:	4a19      	ldr	r2, [pc, #100]	; (80057bc <R3_1_SwitchOffPWM+0x94>)
  MODIFY_REG(ADCx->CR,
 8005758:	4c19      	ldr	r4, [pc, #100]	; (80057c0 <R3_1_SwitchOffPWM+0x98>)
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	438b      	bics	r3, r1
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	4b18      	ldr	r3, [pc, #96]	; (80057c4 <R3_1_SwitchOffPWM+0x9c>)
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	4022      	ands	r2, r4
 8005766:	2410      	movs	r4, #16
 8005768:	4322      	orrs	r2, r4
 800576a:	609a      	str	r2, [r3, #8]
  LL_DMA_DisableIT_TC( DMA1, LL_DMA_CHANNEL_1 );

  LL_ADC_REG_StopConversion( ADC1 );

  /* Disable ADC DMA request*/
  ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	3c0f      	subs	r4, #15
 8005770:	43a2      	bics	r2, r4
 8005772:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8005774:	4a14      	ldr	r2, [pc, #80]	; (80057c8 <R3_1_SwitchOffPWM+0xa0>)
 8005776:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8005778:	2204      	movs	r2, #4
 800577a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	4913      	ldr	r1, [pc, #76]	; (80057cc <R3_1_SwitchOffPWM+0xa4>)
 8005780:	400a      	ands	r2, r1
 8005782:	60da      	str	r2, [r3, #12]

  /* The ADC is not triggered anymore by the PWM timer */
  LL_ADC_REG_SetTriggerSource (ADC1, LL_ADC_REG_TRIG_SOFTWARE);
  
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8005784:	2377      	movs	r3, #119	; 0x77
 8005786:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005788:	2101      	movs	r1, #1
 800578a:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800578c:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <R3_1_SwitchOffPWM+0x8c>)
 800578e:	3b79      	subs	r3, #121	; 0x79
 8005790:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005792:	6913      	ldr	r3, [r2, #16]

  /* Wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8005794:	4219      	tst	r1, r3
 8005796:	d0fc      	beq.n	8005792 <R3_1_SwitchOffPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005798:	2302      	movs	r3, #2
 800579a:	425b      	negs	r3, r3
 800579c:	6113      	str	r3, [r2, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 800579e:	bd10      	pop	{r4, pc}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80057a0:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 80057a2:	6919      	ldr	r1, [r3, #16]
 80057a4:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	6959      	ldr	r1, [r3, #20]
 80057aa:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80057b2:	e7cf      	b.n	8005754 <R3_1_SwitchOffPWM+0x2c>
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	ffff7fff 	.word	0xffff7fff
 80057bc:	40020008 	.word	0x40020008
 80057c0:	7fffffe8 	.word	0x7fffffe8
 80057c4:	40012400 	.word	0x40012400
 80057c8:	40020000 	.word	0x40020000
 80057cc:	fffff23f 	.word	0xfffff23f

080057d0 <R3_1_CurrentReadingCalibration>:
{
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	46de      	mov	lr, fp
 80057d4:	4657      	mov	r7, sl
 80057d6:	464e      	mov	r6, r9
 80057d8:	4645      	mov	r5, r8
  pHandle->PolarizationCounter = 0u;
 80057da:	2372      	movs	r3, #114	; 0x72
{
 80057dc:	b5e0      	push	{r5, r6, r7, lr}
  pHandle-> PhaseAOffset = 0u;
 80057de:	2600      	movs	r6, #0
  CLEAR_BIT(TIMx->CCER, Channels);
 80057e0:	4d3a      	ldr	r5, [pc, #232]	; (80058cc <R3_1_CurrentReadingCalibration+0xfc>)
 80057e2:	65c6      	str	r6, [r0, #92]	; 0x5c
  pHandle-> PhaseBOffset = 0u;
 80057e4:	6606      	str	r6, [r0, #96]	; 0x60
  pHandle-> PhaseCOffset = 0u;
 80057e6:	6646      	str	r6, [r0, #100]	; 0x64
  pHandle->PolarizationCounter = 0u;
 80057e8:	54c6      	strb	r6, [r0, r3]
 80057ea:	6a2b      	ldr	r3, [r5, #32]
 80057ec:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <R3_1_CurrentReadingCalibration+0x100>)
  pHandle->_Super.Sector = SECTOR_5;
 80057ee:	273a      	movs	r7, #58	; 0x3a
 80057f0:	4013      	ands	r3, r2
  pHandle->CalibSector = SECTOR_5;
 80057f2:	2273      	movs	r2, #115	; 0x73
 80057f4:	4693      	mov	fp, r2
 80057f6:	3a6f      	subs	r2, #111	; 0x6f
 80057f8:	4690      	mov	r8, r2
 80057fa:	465a      	mov	r2, fp
 80057fc:	4641      	mov	r1, r8
 80057fe:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8005800:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <R3_1_CurrentReadingCalibration+0x104>)
{
 8005802:	0004      	movs	r4, r0
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8005804:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8005806:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <R3_1_CurrentReadingCalibration+0x108>)
 8005808:	6183      	str	r3, [r0, #24]
  pHandle->CalibSector = SECTOR_5;
 800580a:	5481      	strb	r1, [r0, r2]
  pHandle->_Super.Sector = SECTOR_5;
 800580c:	55c1      	strb	r1, [r0, r7]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800580e:	f7ff ff15 	bl	800563c <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005812:	2238      	movs	r2, #56	; 0x38
 8005814:	4691      	mov	r9, r2
 8005816:	323a      	adds	r2, #58	; 0x3a
 8005818:	4692      	mov	sl, r2
 800581a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800581c:	44a1      	add	r9, r4
 800581e:	44a2      	add	sl, r4
 8005820:	3a07      	subs	r2, #7
 8005822:	4653      	mov	r3, sl
 8005824:	5c8a      	ldrb	r2, [r1, r2]
 8005826:	0028      	movs	r0, r5
 8005828:	4649      	mov	r1, r9
 800582a:	f7ff fbaf 	bl	8004f8c <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800582e:	0020      	movs	r0, r4
 8005830:	f7ff ff7a 	bl	8005728 <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8005834:	4b29      	ldr	r3, [pc, #164]	; (80058dc <R3_1_CurrentReadingCalibration+0x10c>)
  pHandle->CalibSector = SECTOR_1;
 8005836:	4659      	mov	r1, fp
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8005838:	6063      	str	r3, [r4, #4]
  pHandle->PolarizationCounter = 0;
 800583a:	2372      	movs	r3, #114	; 0x72
  pHandle->CalibSector = SECTOR_1;
 800583c:	5466      	strb	r6, [r4, r1]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800583e:	0020      	movs	r0, r4
  pHandle->_Super.Sector = SECTOR_1;
 8005840:	55e6      	strb	r6, [r4, r7]
  pHandle->PolarizationCounter = 0;
 8005842:	54e6      	strb	r6, [r4, r3]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8005844:	f7ff fefa 	bl	800563c <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005848:	226b      	movs	r2, #107	; 0x6b
 800584a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800584c:	4649      	mov	r1, r9
 800584e:	0028      	movs	r0, r5
 8005850:	5c9a      	ldrb	r2, [r3, r2]
 8005852:	4653      	mov	r3, sl
 8005854:	f7ff fb9a 	bl	8004f8c <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8005858:	0020      	movs	r0, r4
 800585a:	f7ff ff65 	bl	8005728 <R3_1_SwitchOffPWM>
  pHandle->_Super.Sector = SECTOR_5;
 800585e:	4643      	mov	r3, r8
 8005860:	55e3      	strb	r3, [r4, r7]
  pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8005862:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005864:	491e      	ldr	r1, [pc, #120]	; (80058e0 <R3_1_CurrentReadingCalibration+0x110>)
  pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	65e3      	str	r3, [r4, #92]	; 0x5c
  pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 800586a:	6e23      	ldr	r3, [r4, #96]	; 0x60
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800586c:	2008      	movs	r0, #8
  pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->PhaseCOffset = pHandle->PhaseCOffset / NB_CONVERSIONS;
 8005872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	6663      	str	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_GetPhaseCurrents;
 8005878:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <R3_1_CurrentReadingCalibration+0x114>)
 800587a:	6063      	str	r3, [r4, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800587c:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <R3_1_CurrentReadingCalibration+0x118>)
 800587e:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <R3_1_CurrentReadingCalibration+0x11c>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	400a      	ands	r2, r1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	400a      	ands	r2, r1
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	400a      	ands	r2, r1
 8005892:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8005894:	226c      	movs	r2, #108	; 0x6c
 8005896:	5aa2      	ldrh	r2, [r4, r2]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005898:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800589a:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800589c:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800589e:	69a9      	ldr	r1, [r5, #24]
 80058a0:	4301      	orrs	r1, r0
 80058a2:	61a9      	str	r1, [r5, #24]
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	69aa      	ldr	r2, [r5, #24]
 80058a8:	0109      	lsls	r1, r1, #4
 80058aa:	4311      	orrs	r1, r2
 80058ac:	61a9      	str	r1, [r5, #24]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4302      	orrs	r2, r0
 80058b2:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 80058b4:	6a2a      	ldr	r2, [r5, #32]
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <R3_1_CurrentReadingCalibration+0x120>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 80058bc:	2376      	movs	r3, #118	; 0x76
 80058be:	54e6      	strb	r6, [r4, r3]
}
 80058c0:	bcf0      	pop	{r4, r5, r6, r7}
 80058c2:	46bb      	mov	fp, r7
 80058c4:	46b2      	mov	sl, r6
 80058c6:	46a9      	mov	r9, r5
 80058c8:	46a0      	mov	r8, r4
 80058ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	fffffaaa 	.word	0xfffffaaa
 80058d4:	080053ad 	.word	0x080053ad
 80058d8:	08005581 	.word	0x08005581
 80058dc:	080053f9 	.word	0x080053f9
 80058e0:	fffff7ff 	.word	0xfffff7ff
 80058e4:	0800522d 	.word	0x0800522d
 80058e8:	080055a1 	.word	0x080055a1
 80058ec:	40012c1c 	.word	0x40012c1c
 80058f0:	00000555 	.word	0x00000555

080058f4 <R3_1_TIMx_UP_IRQHandler>:
  * @brief  It contains the TIMx Update event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 80058f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f6:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 80058f8:	4b18      	ldr	r3, [pc, #96]	; (800595c <R3_1_TIMx_UP_IRQHandler+0x68>)
  
  /* Set the trigger polarity as computed inside SetADCSampPointSectX*/
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 80058fa:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80058fc:	4c18      	ldr	r4, [pc, #96]	; (8005960 <R3_1_TIMx_UP_IRQHandler+0x6c>)
 80058fe:	68da      	ldr	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005900:	00ed      	lsls	r5, r5, #3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005902:	4022      	ands	r2, r4
 8005904:	430a      	orrs	r2, r1
 8005906:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	4916      	ldr	r1, [pc, #88]	; (8005964 <R3_1_TIMx_UP_IRQHandler+0x70>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800590c:	2404      	movs	r4, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800590e:	400a      	ands	r2, r1
 8005910:	432a      	orrs	r2, r5
 8005912:	60da      	str	r2, [r3, #12]
  /* set ADC trigger source */
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_TRGO);
  /* Set scan direction according to the sector */  
  LL_ADC_REG_SetSequencerScanDirection(ADC1, pHandle->pParams_str->ADCScandir[pHandle->_Super.Sector]<<ADC_CFGR1_SCANDIR_Pos);
 8005914:	223a      	movs	r2, #58	; 0x3a
 8005916:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8005918:	5c82      	ldrb	r2, [r0, r2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800591a:	68df      	ldr	r7, [r3, #12]
 800591c:	18b1      	adds	r1, r6, r2
 800591e:	316c      	adds	r1, #108	; 0x6c
 8005920:	7809      	ldrb	r1, [r1, #0]
 8005922:	43a7      	bics	r7, r4
 8005924:	0089      	lsls	r1, r1, #2
  /* Configure the ADC scheduler as selected inside SetADCSampPointSectX*/
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8005926:	3206      	adds	r2, #6
 8005928:	4339      	orrs	r1, r7
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	60d9      	str	r1, [r3, #12]
 800592e:	18b2      	adds	r2, r6, r2
 8005930:	6852      	ldr	r2, [r2, #4]
 8005932:	629a      	str	r2, [r3, #40]	; 0x28
  /* ReConfigure sampling time, as deconfigured by reg_conv_manager */
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 8005934:	226a      	movs	r2, #106	; 0x6a
 8005936:	5cb2      	ldrb	r2, [r6, r2]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8005938:	2607      	movs	r6, #7
 800593a:	6959      	ldr	r1, [r3, #20]
 800593c:	43b1      	bics	r1, r6
 800593e:	430a      	orrs	r2, r1
 8005940:	615a      	str	r2, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005942:	4a09      	ldr	r2, [pc, #36]	; (8005968 <R3_1_TIMx_UP_IRQHandler+0x74>)
 8005944:	3669      	adds	r6, #105	; 0x69
 8005946:	6851      	ldr	r1, [r2, #4]
 8005948:	4331      	orrs	r1, r6
 800594a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(ADCx->CR,
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	4907      	ldr	r1, [pc, #28]	; (800596c <R3_1_TIMx_UP_IRQHandler+0x78>)
 8005950:	400a      	ands	r2, r1
 8005952:	4322      	orrs	r2, r4
 8005954:	609a      	str	r2, [r3, #8]
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
  /* ADC needs to be restarted because DMA is configured as limited */
  LL_ADC_REG_StartConversion( ADC1 );

  /* Reset the ADC trigger edge for next conversion */
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005956:	6685      	str	r5, [r0, #104]	; 0x68

  return &pHandle->_Super.Motor;
 8005958:	3046      	adds	r0, #70	; 0x46
}
 800595a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595c:	40012400 	.word	0x40012400
 8005960:	fffff3ff 	.word	0xfffff3ff
 8005964:	fffff23f 	.word	0xfffff23f
 8005968:	40012c00 	.word	0x40012c00
 800596c:	7fffffe8 	.word	0x7fffffe8

08005970 <F0XX_BRK_IRQHandler>:
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
__weak void * F0XX_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005970:	2272      	movs	r2, #114	; 0x72
 8005972:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005974:	5c9a      	ldrb	r2, [r3, r2]
 8005976:	2a02      	cmp	r2, #2
 8005978:	d108      	bne.n	800598c <F0XX_BRK_IRQHandler+0x1c>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800597a:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 800597c:	6919      	ldr	r1, [r3, #16]
 800597e:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	6959      	ldr	r1, [r3, #20]
 8005984:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	6293      	str	r3, [r2, #40]	; 0x28
  }
  pHandle->OverCurrentFlag = true;
 800598c:	2374      	movs	r3, #116	; 0x74
 800598e:	2201      	movs	r2, #1
 8005990:	54c2      	strb	r2, [r0, r3]

  return MC_NULL;
}
 8005992:	2000      	movs	r0, #0
 8005994:	4770      	bx	lr
 8005996:	46c0      	nop			; (mov r8, r8)

08005998 <R3_1_IsOverCurrentOccurred>:
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  uint16_t retVal = MC_NO_FAULTS;


  if ( pHandle->OverVoltageFlag == true )
 8005998:	2275      	movs	r2, #117	; 0x75
{
 800599a:	b510      	push	{r4, lr}
  if ( pHandle->OverVoltageFlag == true )
 800599c:	5c81      	ldrb	r1, [r0, r2]
{
 800599e:	0003      	movs	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 80059a0:	2900      	cmp	r1, #0
 80059a2:	d00b      	beq.n	80059bc <R3_1_IsOverCurrentOccurred+0x24>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80059a4:	2100      	movs	r1, #0
 80059a6:	2442      	movs	r4, #66	; 0x42
 80059a8:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 80059aa:	2002      	movs	r0, #2
  }

  if ( pHandle->OverCurrentFlag == true )
 80059ac:	2274      	movs	r2, #116	; 0x74
 80059ae:	5c99      	ldrb	r1, [r3, r2]
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d002      	beq.n	80059ba <R3_1_IsOverCurrentOccurred+0x22>
  {
    retVal |= MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
 80059b4:	2100      	movs	r1, #0
    retVal |= MC_BREAK_IN;
 80059b6:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 80059b8:	5499      	strb	r1, [r3, r2]
  }
  return retVal;
}
 80059ba:	bd10      	pop	{r4, pc}
 80059bc:	2440      	movs	r4, #64	; 0x40
  uint16_t retVal = MC_NO_FAULTS;
 80059be:	2000      	movs	r0, #0
 80059c0:	e7f4      	b.n	80059ac <R3_1_IsOverCurrentOccurred+0x14>
 80059c2:	46c0      	nop			; (mov r8, r8)

080059c4 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80059c4:	8b83      	ldrh	r3, [r0, #28]
 80059c6:	8b42      	ldrh	r2, [r0, #26]
{
 80059c8:	b510      	push	{r4, lr}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80059ca:	18d2      	adds	r2, r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80059cc:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80059ce:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <RVBS_Clear+0x22>
 80059d4:	2300      	movs	r3, #0
  {
    pHandle->aBuffer[index] = aux;
 80059d6:	6a04      	ldr	r4, [r0, #32]
 80059d8:	0059      	lsls	r1, r3, #1
 80059da:	530a      	strh	r2, [r1, r4]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80059dc:	3301      	adds	r3, #1
 80059de:	8b01      	ldrh	r1, [r0, #24]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d8f8      	bhi.n	80059d8 <RVBS_Clear+0x14>
  }
  pHandle->_Super.LatestConv = aux;
 80059e6:	0413      	lsls	r3, r2, #16
 80059e8:	431a      	orrs	r2, r3
 80059ea:	6042      	str	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80059ec:	2325      	movs	r3, #37	; 0x25
 80059ee:	2200      	movs	r2, #0
 80059f0:	54c2      	strb	r2, [r0, r3]
}
 80059f2:	bd10      	pop	{r4, pc}

080059f4 <RVBS_Init>:
{
 80059f4:	b510      	push	{r4, lr}
 80059f6:	0004      	movs	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80059f8:	300c      	adds	r0, #12
 80059fa:	f7fb ff45 	bl	8001888 <RCM_RegisterRegConv>
 80059fe:	2326      	movs	r3, #38	; 0x26
 8005a00:	54e0      	strb	r0, [r4, r3]
  RVBS_Clear( pHandle );
 8005a02:	0020      	movs	r0, r4
 8005a04:	f7ff ffde 	bl	80059c4 <RVBS_Clear>
}
 8005a08:	bd10      	pop	{r4, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)

08005a0c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8005a0c:	88c3      	ldrh	r3, [r0, #6]
 8005a0e:	8b42      	ldrh	r2, [r0, #26]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d305      	bcc.n	8005a20 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005a14:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8005a16:	4283      	cmp	r3, r0
 8005a18:	4180      	sbcs	r0, r0
 8005a1a:	4240      	negs	r0, r0
 8005a1c:	0080      	lsls	r0, r0, #2
  }
  return fault;
}
 8005a1e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8005a20:	2002      	movs	r0, #2
 8005a22:	e7fc      	b.n	8005a1e <RVBS_CheckFaultState+0x12>

08005a24 <RVBS_CalcAvVbus>:
{
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005a26:	2326      	movs	r3, #38	; 0x26
{
 8005a28:	0004      	movs	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005a2a:	5cc0      	ldrb	r0, [r0, r3]
 8005a2c:	f7fb ffc6 	bl	80019bc <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8005a30:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <RVBS_CalcAvVbus+0x64>)
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005a32:	0006      	movs	r6, r0
  if ( hAux != 0xFFFF )
 8005a34:	4298      	cmp	r0, r3
 8005a36:	d01b      	beq.n	8005a70 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8005a38:	2325      	movs	r3, #37	; 0x25
 8005a3a:	5ce7      	ldrb	r7, [r4, r3]
 8005a3c:	6a21      	ldr	r1, [r4, #32]
 8005a3e:	007b      	lsls	r3, r7, #1
 8005a40:	5258      	strh	r0, [r3, r1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005a42:	8b25      	ldrh	r5, [r4, #24]
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	d018      	beq.n	8005a7a <RVBS_CalcAvVbus+0x56>
 8005a48:	2200      	movs	r2, #0
    wtemp = 0;
 8005a4a:	2000      	movs	r0, #0
      wtemp += pHandle->aBuffer[i];
 8005a4c:	0053      	lsls	r3, r2, #1
 8005a4e:	5a5b      	ldrh	r3, [r3, r1]
 8005a50:	18c0      	adds	r0, r0, r3
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005a52:	1c53      	adds	r3, r2, #1
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	42aa      	cmp	r2, r5
 8005a58:	d3f8      	bcc.n	8005a4c <RVBS_CalcAvVbus+0x28>
    wtemp /= pHandle->LowPassFilterBW;
 8005a5a:	0029      	movs	r1, r5
 8005a5c:	f7fa fb54 	bl	8000108 <__udivsi3>
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005a60:	3d01      	subs	r5, #1
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005a62:	80e0      	strh	r0, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8005a64:	80a6      	strh	r6, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005a66:	42af      	cmp	r7, r5
 8005a68:	da09      	bge.n	8005a7e <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8005a6a:	2325      	movs	r3, #37	; 0x25
 8005a6c:	3701      	adds	r7, #1
 8005a6e:	54e7      	strb	r7, [r4, r3]
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005a70:	0020      	movs	r0, r4
 8005a72:	f7ff ffcb 	bl	8005a0c <RVBS_CheckFaultState>
 8005a76:	8120      	strh	r0, [r4, #8]
}
 8005a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005a7a:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8005a7c:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8005a7e:	2325      	movs	r3, #37	; 0x25
 8005a80:	2200      	movs	r2, #0
 8005a82:	54e2      	strb	r2, [r4, r3]
 8005a84:	e7f4      	b.n	8005a70 <RVBS_CalcAvVbus+0x4c>
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	0000ffff 	.word	0x0000ffff

08005a8c <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8005a8c:	2300      	movs	r3, #0
{
 8005a8e:	b510      	push	{r4, lr}
  pHandle->Ext = 0;
 8005a90:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 8005a92:	6043      	str	r3, [r0, #4]
  pHandle->RampRemainingStep = 0u;
 8005a94:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005a96:	6103      	str	r3, [r0, #16]
  pHandle->ScalingFactor = 1u;
 8005a98:	3301      	adds	r3, #1
 8005a9a:	6143      	str	r3, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
 8005a9c:	3018      	adds	r0, #24
 8005a9e:	f000 fdc5 	bl	800662c <FD_Init>
#endif

}
 8005aa2:	bd10      	pop	{r4, pc}

08005aa4 <SPD_GetElAngle>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005aa8:	4770      	bx	lr
 8005aaa:	46c0      	nop			; (mov r8, r8)

08005aac <SPD_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
 8005aac:	230c      	movs	r3, #12
 8005aae:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005ab0:	4770      	bx	lr
 8005ab2:	46c0      	nop			; (mov r8, r8)

08005ab4 <SPD_GetInstElSpeedDpp>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005ab8:	4770      	bx	lr
 8005aba:	46c0      	nop			; (mov r8, r8)

08005abc <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8005abc:	b570      	push	{r4, r5, r6, lr}
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005abe:	2200      	movs	r2, #0
 8005ac0:	5e8a      	ldrsh	r2, [r1, r2]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005ac2:	78c5      	ldrb	r5, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005ac4:	7803      	ldrb	r3, [r0, #0]
  if ( *pMecSpeedUnit < 0 )
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	db24      	blt.n	8005b14 <SPD_IsMecSpeedReliable+0x58>
    hAux = -( *pMecSpeedUnit );
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8005aca:	b292      	uxth	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005acc:	8ac6      	ldrh	r6, [r0, #22]
  {
    SpeedError = true;
 8005ace:	2401      	movs	r4, #1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005ad0:	8a81      	ldrh	r1, [r0, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005ad2:	4296      	cmp	r6, r2
 8005ad4:	d802      	bhi.n	8005adc <SPD_IsMecSpeedReliable+0x20>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005ad6:	4291      	cmp	r1, r2
 8005ad8:	4192      	sbcs	r2, r2
 8005ada:	4254      	negs	r4, r2
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8005adc:	2212      	movs	r2, #18
 8005ade:	5e81      	ldrsh	r1, [r0, r2]
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	db14      	blt.n	8005b0e <SPD_IsMecSpeedReliable+0x52>
    hAux = -( pHandle->hMecAccelUnitP );
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8005ae4:	b289      	uxth	r1, r1
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005ae6:	8b02      	ldrh	r2, [r0, #24]
 8005ae8:	428a      	cmp	r2, r1
 8005aea:	d301      	bcc.n	8005af0 <SPD_IsMecSpeedReliable+0x34>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8005aec:	2c00      	cmp	r4, #0
 8005aee:	d009      	beq.n	8005b04 <SPD_IsMecSpeedReliable+0x48>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8005af0:	429d      	cmp	r5, r3
 8005af2:	d901      	bls.n	8005af8 <SPD_IsMecSpeedReliable+0x3c>
    {
      bSpeedErrorNumber++;
 8005af4:	3301      	adds	r3, #1
 8005af6:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005af8:	7003      	strb	r3, [r0, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8005afa:	1b58      	subs	r0, r3, r5
 8005afc:	1e42      	subs	r2, r0, #1
 8005afe:	4190      	sbcs	r0, r2

  return ( SpeedSensorReliability );
 8005b00:	b2c0      	uxtb	r0, r0
}
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
      bSpeedErrorNumber = 0u;
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	4164      	adcs	r4, r4
 8005b08:	4264      	negs	r4, r4
 8005b0a:	4023      	ands	r3, r4
 8005b0c:	e7f4      	b.n	8005af8 <SPD_IsMecSpeedReliable+0x3c>
    hAux = -( pHandle->hMecAccelUnitP );
 8005b0e:	4249      	negs	r1, r1
 8005b10:	b289      	uxth	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 8005b12:	e7e8      	b.n	8005ae6 <SPD_IsMecSpeedReliable+0x2a>
    hAux = -( *pMecSpeedUnit );
 8005b14:	4252      	negs	r2, r2
 8005b16:	b292      	uxth	r2, r2
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 8005b18:	e7d8      	b.n	8005acc <SPD_IsMecSpeedReliable+0x10>
 8005b1a:	46c0      	nop			; (mov r8, r8)

08005b1c <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	b510      	push	{r4, lr}
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 8005b20:	210c      	movs	r1, #12
 8005b22:	5e42      	ldrsh	r2, [r0, r1]
  wAux *= INT16_MAX;
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005b24:	2114      	movs	r1, #20
 8005b26:	5e59      	ldrsh	r1, [r3, r1]
  wAux *= INT16_MAX;
 8005b28:	03d0      	lsls	r0, r2, #15
 8005b2a:	1a80      	subs	r0, r0, r2
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005b2c:	f7fa fb76 	bl	800021c <__divsi3>
  return ( int16_t )wAux;
 8005b30:	b200      	sxth	r0, r0
}
 8005b32:	bd10      	pop	{r4, pc}

08005b34 <STC_Init>:
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
 8005b34:	232a      	movs	r3, #42	; 0x2a
  pHandle->SPD = SPD_Handle;
 8005b36:	6142      	str	r2, [r0, #20]
  pHandle->PISpeed = pPI;
 8005b38:	6101      	str	r1, [r0, #16]
  pHandle->Mode = pHandle->ModeDefault;
 8005b3a:	5cc3      	ldrb	r3, [r0, r3]
 8005b3c:	7003      	strb	r3, [r0, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005b3e:	222c      	movs	r2, #44	; 0x2c
 8005b40:	5e83      	ldrsh	r3, [r0, r2]
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	6043      	str	r3, [r0, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005b46:	222e      	movs	r2, #46	; 0x2e
 8005b48:	5e83      	ldrsh	r3, [r0, r2]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8005b52:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005b54:	6183      	str	r3, [r0, #24]
}
 8005b56:	4770      	bx	lr

08005b58 <STC_GetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
 8005b58:	6940      	ldr	r0, [r0, #20]
}
 8005b5a:	4770      	bx	lr

08005b5c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005b5c:	7803      	ldrb	r3, [r0, #0]
{
 8005b5e:	b510      	push	{r4, lr}
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d000      	beq.n	8005b66 <STC_Clear+0xa>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8005b64:	bd10      	pop	{r4, pc}
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005b66:	2100      	movs	r1, #0
 8005b68:	6900      	ldr	r0, [r0, #16]
 8005b6a:	f7ff f993 	bl	8004e94 <PID_SetIntegralTerm>
}
 8005b6e:	e7f9      	b.n	8005b64 <STC_Clear+0x8>

08005b70 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8005b70:	6842      	ldr	r2, [r0, #4]
 8005b72:	17d3      	asrs	r3, r2, #31
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	0c18      	lsrs	r0, r3, #16
 8005b78:	1880      	adds	r0, r0, r2
 8005b7a:	1400      	asrs	r0, r0, #16
}
 8005b7c:	4770      	bx	lr
 8005b7e:	46c0      	nop			; (mov r8, r8)

08005b80 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8005b80:	6882      	ldr	r2, [r0, #8]
 8005b82:	17d3      	asrs	r3, r2, #31
 8005b84:	041b      	lsls	r3, r3, #16
 8005b86:	0c18      	lsrs	r0, r3, #16
 8005b88:	1880      	adds	r0, r0, r2
 8005b8a:	1400      	asrs	r0, r0, #16
}
 8005b8c:	4770      	bx	lr
 8005b8e:	46c0      	nop			; (mov r8, r8)

08005b90 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005b90:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8005b92:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005b94:	60c3      	str	r3, [r0, #12]
}
 8005b96:	4770      	bx	lr

08005b98 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005b9a:	7803      	ldrb	r3, [r0, #0]
{
 8005b9c:	0004      	movs	r4, r0
 8005b9e:	000e      	movs	r6, r1
 8005ba0:	0017      	movs	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d016      	beq.n	8005bd4 <STC_ExecRamp+0x3c>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005ba6:	6840      	ldr	r0, [r0, #4]
 8005ba8:	17c3      	asrs	r3, r0, #31
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	181b      	adds	r3, r3, r0
 8005bb0:	141d      	asrs	r5, r3, #16

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005bb2:	8be3      	ldrh	r3, [r4, #30]
 8005bb4:	4299      	cmp	r1, r3
 8005bb6:	dd01      	ble.n	8005bbc <STC_ExecRamp+0x24>
      AllowedRange = false;
 8005bb8:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8005bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005bbc:	2224      	movs	r2, #36	; 0x24
 8005bbe:	5ea3      	ldrsh	r3, [r4, r2]
 8005bc0:	428b      	cmp	r3, r1
 8005bc2:	dcf9      	bgt.n	8005bb8 <STC_ExecRamp+0x20>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8005bc4:	8c23      	ldrh	r3, [r4, #32]
 8005bc6:	4299      	cmp	r1, r3
 8005bc8:	da0e      	bge.n	8005be8 <STC_ExecRamp+0x50>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005bca:	2222      	movs	r2, #34	; 0x22
 8005bcc:	5ea3      	ldrsh	r3, [r4, r2]
 8005bce:	428b      	cmp	r3, r1
 8005bd0:	dbf2      	blt.n	8005bb8 <STC_ExecRamp+0x20>
 8005bd2:	e009      	b.n	8005be8 <STC_ExecRamp+0x50>
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005bd4:	f7ff ffd4 	bl	8005b80 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005bd8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005bda:	0005      	movs	r5, r0
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005bdc:	429e      	cmp	r6, r3
 8005bde:	dceb      	bgt.n	8005bb8 <STC_ExecRamp+0x20>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005be0:	2228      	movs	r2, #40	; 0x28
 8005be2:	5ea3      	ldrsh	r3, [r4, r2]
 8005be4:	42b3      	cmp	r3, r6
 8005be6:	dce7      	bgt.n	8005bb8 <STC_ExecRamp+0x20>
    if ( hDurationms == 0u )
 8005be8:	2f00      	cmp	r7, #0
 8005bea:	d109      	bne.n	8005c00 <STC_ExecRamp+0x68>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005bec:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005bee:	0436      	lsls	r6, r6, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d015      	beq.n	8005c20 <STC_ExecRamp+0x88>
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8005bf4:	60a6      	str	r6, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005bfc:	61a3      	str	r3, [r4, #24]
 8005bfe:	e7dc      	b.n	8005bba <STC_ExecRamp+0x22>
      wAux /= 1000u;
 8005c00:	21fa      	movs	r1, #250	; 0xfa
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005c02:	8ba0      	ldrh	r0, [r4, #28]
      wAux /= 1000u;
 8005c04:	0089      	lsls	r1, r1, #2
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005c06:	4378      	muls	r0, r7
      pHandle->TargetFinal = hTargetFinal;
 8005c08:	8066      	strh	r6, [r4, #2]
      wAux /= 1000u;
 8005c0a:	f7fa fa7d 	bl	8000108 <__udivsi3>
      pHandle->RampRemainingStep++;
 8005c0e:	1c41      	adds	r1, r0, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005c10:	1b70      	subs	r0, r6, r5
      pHandle->RampRemainingStep++;
 8005c12:	60e1      	str	r1, [r4, #12]
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005c14:	0400      	lsls	r0, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8005c16:	f7fa fb01 	bl	800021c <__divsi3>
      pHandle->IncDecAmount = wAux1;
 8005c1a:	61a0      	str	r0, [r4, #24]
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	e7cc      	b.n	8005bba <STC_ExecRamp+0x22>
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005c20:	6066      	str	r6, [r4, #4]
 8005c22:	e7e8      	b.n	8005bf6 <STC_ExecRamp+0x5e>

08005c24 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005c28:	6183      	str	r3, [r0, #24]
}
 8005c2a:	4770      	bx	lr

08005c2c <STC_CalcTorqueReference>:
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005c2c:	7802      	ldrb	r2, [r0, #0]
{
 8005c2e:	b570      	push	{r4, r5, r6, lr}
 8005c30:	0005      	movs	r5, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d112      	bne.n	8005c5c <STC_CalcTorqueReference+0x30>
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005c36:	68eb      	ldr	r3, [r5, #12]
    wCurrentReference = pHandle->TorqueRef;
 8005c38:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d912      	bls.n	8005c64 <STC_CalcTorqueReference+0x38>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8005c3e:	69a9      	ldr	r1, [r5, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8005c40:	3b01      	subs	r3, #1
    wCurrentReference += pHandle->IncDecAmount;
 8005c42:	468c      	mov	ip, r1
 8005c44:	4466      	add	r6, ip
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005c46:	17f4      	asrs	r4, r6, #31
 8005c48:	0424      	lsls	r4, r4, #16
 8005c4a:	0c24      	lsrs	r4, r4, #16
 8005c4c:	19a4      	adds	r4, r4, r6
    pHandle->RampRemainingStep--;
 8005c4e:	60eb      	str	r3, [r5, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005c50:	1424      	asrs	r4, r4, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005c52:	2a01      	cmp	r2, #1
 8005c54:	d00f      	beq.n	8005c76 <STC_CalcTorqueReference+0x4a>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8005c56:	60ae      	str	r6, [r5, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005c58:	b220      	sxth	r0, r4
  }

  return hTorqueReference;
}
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 8005c5c:	68eb      	ldr	r3, [r5, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8005c5e:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d8ec      	bhi.n	8005c3e <STC_CalcTorqueReference+0x12>
  else if ( pHandle->RampRemainingStep == 1u )
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d012      	beq.n	8005c8e <STC_CalcTorqueReference+0x62>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005c68:	17f0      	asrs	r0, r6, #31
 8005c6a:	0400      	lsls	r0, r0, #16
 8005c6c:	0c00      	lsrs	r0, r0, #16
 8005c6e:	1980      	adds	r0, r0, r6
 8005c70:	1404      	asrs	r4, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005c72:	2a01      	cmp	r2, #1
 8005c74:	d1ef      	bne.n	8005c56 <STC_CalcTorqueReference+0x2a>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8005c76:	6968      	ldr	r0, [r5, #20]
 8005c78:	f7ff ff18 	bl	8005aac <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8005c7c:	1a20      	subs	r0, r4, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8005c7e:	b201      	sxth	r1, r0
 8005c80:	6928      	ldr	r0, [r5, #16]
 8005c82:	f7ff f913 	bl	8004eac <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005c86:	0403      	lsls	r3, r0, #16
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8005c88:	606e      	str	r6, [r5, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005c8a:	60ab      	str	r3, [r5, #8]
 8005c8c:	e7e5      	b.n	8005c5a <STC_CalcTorqueReference+0x2e>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	5eec      	ldrsh	r4, [r5, r3]
    pHandle->RampRemainingStep = 0u;
 8005c92:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005c94:	0426      	lsls	r6, r4, #16
    pHandle->RampRemainingStep = 0u;
 8005c96:	60eb      	str	r3, [r5, #12]
 8005c98:	e7db      	b.n	8005c52 <STC_CalcTorqueReference+0x26>
 8005c9a:	46c0      	nop			; (mov r8, r8)

08005c9c <STC_GetMecSpeedRefUnitDefault>:
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
 8005c9c:	232c      	movs	r3, #44	; 0x2c
 8005c9e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005ca0:	4770      	bx	lr
 8005ca2:	46c0      	nop			; (mov r8, r8)

08005ca4 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
 8005ca4:	8bc0      	ldrh	r0, [r0, #30]
}
 8005ca6:	4770      	bx	lr

08005ca8 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
 8005ca8:	2324      	movs	r3, #36	; 0x24
 8005caa:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005cac:	4770      	bx	lr
 8005cae:	46c0      	nop			; (mov r8, r8)

08005cb0 <STC_GetDefaultIqdref>:
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8005cb0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8005cb2:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 8005cb4:	041b      	lsls	r3, r3, #16
{
 8005cb6:	b082      	sub	sp, #8
  return IqdRefDefault;
 8005cb8:	4318      	orrs	r0, r3
}
 8005cba:	b002      	add	sp, #8
 8005cbc:	4770      	bx	lr
 8005cbe:	46c0      	nop			; (mov r8, r8)

08005cc0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	0004      	movs	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8005cc4:	6940      	ldr	r0, [r0, #20]
 8005cc6:	f7ff fef1 	bl	8005aac <SPD_GetAvrgMecSpeedUnit>
 8005cca:	0400      	lsls	r0, r0, #16
 8005ccc:	6060      	str	r0, [r4, #4]
}
 8005cce:	bd10      	pop	{r4, pc}

08005cd0 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8005cd4:	8043      	strh	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005cd6:	8083      	strh	r3, [r0, #4]
}
 8005cd8:	4770      	bx	lr
 8005cda:	46c0      	nop			; (mov r8, r8)

08005cdc <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8005cdc:	0003      	movs	r3, r0
 8005cde:	b510      	push	{r4, lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005ce0:	885c      	ldrh	r4, [r3, #2]
  State_t LocalState =  pHandle->bState;
 8005ce2:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005ce4:	430c      	orrs	r4, r1
 8005ce6:	4394      	bics	r4, r2
 8005ce8:	0022      	movs	r2, r4
 8005cea:	805c      	strh	r4, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005cec:	889c      	ldrh	r4, [r3, #4]
 8005cee:	4321      	orrs	r1, r4
 8005cf0:	8099      	strh	r1, [r3, #4]

  if ( LocalState == FAULT_NOW )
 8005cf2:	280a      	cmp	r0, #10
 8005cf4:	d006      	beq.n	8005d04 <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	d100      	bne.n	8005cfc <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8005cfa:	bd10      	pop	{r4, pc}
      pHandle->bState = FAULT_NOW;
 8005cfc:	220a      	movs	r2, #10
      LocalState = FAULT_NOW;
 8005cfe:	200a      	movs	r0, #10
      pHandle->bState = FAULT_NOW;
 8005d00:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 8005d02:	e7fa      	b.n	8005cfa <STM_FaultProcessing+0x1e>
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	d1f8      	bne.n	8005cfa <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 8005d08:	320b      	adds	r2, #11
 8005d0a:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	e7f4      	b.n	8005cfa <STM_FaultProcessing+0x1e>

08005d10 <STM_NextState>:
  switch ( bCurrentState )
 8005d10:	7803      	ldrb	r3, [r0, #0]
{
 8005d12:	b510      	push	{r4, lr}
 8005d14:	0004      	movs	r4, r0
  switch ( bCurrentState )
 8005d16:	2b14      	cmp	r3, #20
 8005d18:	d807      	bhi.n	8005d2a <STM_NextState+0x1a>
 8005d1a:	4a35      	ldr	r2, [pc, #212]	; (8005df0 <STM_NextState+0xe0>)
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	58d3      	ldr	r3, [r2, r3]
 8005d20:	469f      	mov	pc, r3
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005d22:	290e      	cmp	r1, #14
 8005d24:	d013      	beq.n	8005d4e <STM_NextState+0x3e>
      if ( bState == ANY_STOP )
 8005d26:	2907      	cmp	r1, #7
 8005d28:	d011      	beq.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	000a      	movs	r2, r1
 8005d2e:	439a      	bics	r2, r3
 8005d30:	0013      	movs	r3, r2
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d016      	beq.n	8005d64 <STM_NextState+0x54>
 8005d36:	2000      	movs	r0, #0
 8005d38:	2907      	cmp	r1, #7
 8005d3a:	d00a      	beq.n	8005d52 <STM_NextState+0x42>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2180      	movs	r1, #128	; 0x80
 8005d40:	0020      	movs	r0, r4
 8005d42:	f7ff ffcb 	bl	8005cdc <STM_FaultProcessing>
 8005d46:	2000      	movs	r0, #0
 8005d48:	e003      	b.n	8005d52 <STM_NextState+0x42>
      if ( bState == IDLE )
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d1ed      	bne.n	8005d2a <STM_NextState+0x1a>
    pHandle->bState = bNewState;
 8005d4e:	2001      	movs	r0, #1
 8005d50:	7021      	strb	r1, [r4, #0]
}
 8005d52:	bd10      	pop	{r4, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8005d54:	2911      	cmp	r1, #17
 8005d56:	d8f1      	bhi.n	8005d3c <STM_NextState+0x2c>
 8005d58:	4b26      	ldr	r3, [pc, #152]	; (8005df4 <STM_NextState+0xe4>)
 8005d5a:	40cb      	lsrs	r3, r1
 8005d5c:	07db      	lsls	r3, r3, #31
 8005d5e:	d4f6      	bmi.n	8005d4e <STM_NextState+0x3e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005d60:	2903      	cmp	r1, #3
 8005d62:	d1eb      	bne.n	8005d3c <STM_NextState+0x2c>
 8005d64:	2000      	movs	r0, #0
  return ( bChangeState );
 8005d66:	e7f4      	b.n	8005d52 <STM_NextState+0x42>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8005d68:	2907      	cmp	r1, #7
 8005d6a:	d0f0      	beq.n	8005d4e <STM_NextState+0x3e>
 8005d6c:	000b      	movs	r3, r1
 8005d6e:	3b0d      	subs	r3, #13
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d8da      	bhi.n	8005d2a <STM_NextState+0x1a>
 8005d74:	e7eb      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005d76:	2913      	cmp	r1, #19
 8005d78:	d0e9      	beq.n	8005d4e <STM_NextState+0x3e>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	000a      	movs	r2, r1
 8005d7e:	439a      	bics	r2, r3
 8005d80:	0013      	movs	r3, r2
 8005d82:	2a05      	cmp	r2, #5
 8005d84:	d1d5      	bne.n	8005d32 <STM_NextState+0x22>
 8005d86:	e7e2      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005d88:	000b      	movs	r3, r1
 8005d8a:	22fd      	movs	r2, #253	; 0xfd
 8005d8c:	3b12      	subs	r3, #18
 8005d8e:	4213      	tst	r3, r2
 8005d90:	d1c9      	bne.n	8005d26 <STM_NextState+0x16>
 8005d92:	e7dc      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005d94:	2911      	cmp	r1, #17
 8005d96:	d1c6      	bne.n	8005d26 <STM_NextState+0x16>
 8005d98:	e7d9      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8005d9a:	2902      	cmp	r1, #2
 8005d9c:	d1c3      	bne.n	8005d26 <STM_NextState+0x16>
 8005d9e:	e7d6      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005da0:	1f0b      	subs	r3, r1, #4
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d8bf      	bhi.n	8005d26 <STM_NextState+0x16>
 8005da6:	e7d2      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8005da8:	2904      	cmp	r1, #4
 8005daa:	d1bc      	bne.n	8005d26 <STM_NextState+0x16>
 8005dac:	e7cf      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8005dae:	2912      	cmp	r1, #18
 8005db0:	d1b9      	bne.n	8005d26 <STM_NextState+0x16>
 8005db2:	e7cc      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d0ca      	beq.n	8005d4e <STM_NextState+0x3e>
 8005db8:	290c      	cmp	r1, #12
 8005dba:	d1b6      	bne.n	8005d2a <STM_NextState+0x1a>
 8005dbc:	e7c7      	b.n	8005d4e <STM_NextState+0x3e>
      if ( bState == STOP_IDLE )
 8005dbe:	2909      	cmp	r1, #9
 8005dc0:	d1b3      	bne.n	8005d2a <STM_NextState+0x1a>
 8005dc2:	e7c4      	b.n	8005d4e <STM_NextState+0x3e>
      if ( bState == STOP )
 8005dc4:	2908      	cmp	r1, #8
 8005dc6:	d1b0      	bne.n	8005d2a <STM_NextState+0x1a>
 8005dc8:	e7c1      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8005dca:	1f8b      	subs	r3, r1, #6
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d8ac      	bhi.n	8005d2a <STM_NextState+0x1a>
 8005dd0:	e7bd      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	000a      	movs	r2, r1
 8005dd6:	439a      	bics	r2, r3
 8005dd8:	2a07      	cmp	r2, #7
 8005dda:	d1a6      	bne.n	8005d2a <STM_NextState+0x1a>
 8005ddc:	e7b7      	b.n	8005d4e <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005dde:	2302      	movs	r3, #2
 8005de0:	000a      	movs	r2, r1
 8005de2:	439a      	bics	r2, r3
 8005de4:	2a01      	cmp	r2, #1
 8005de6:	d0b2      	beq.n	8005d4e <STM_NextState+0x3e>
           || ( bState == ICLWAIT ) )
 8005de8:	290c      	cmp	r1, #12
 8005dea:	d1a4      	bne.n	8005d36 <STM_NextState+0x26>
 8005dec:	e7af      	b.n	8005d4e <STM_NextState+0x3e>
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	080074a4 	.word	0x080074a4
 8005df4:	00030092 	.word	0x00030092

08005df8 <STM_GetState>:
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
 8005df8:	7800      	ldrb	r0, [r0, #0]
}
 8005dfa:	4770      	bx	lr

08005dfc <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8005dfc:	7802      	ldrb	r2, [r0, #0]
{
 8005dfe:	0003      	movs	r3, r0
  bool bToBeReturned = false;
 8005e00:	2000      	movs	r0, #0
  if ( pHandle->bState == FAULT_OVER )
 8005e02:	2a0b      	cmp	r2, #11
 8005e04:	d103      	bne.n	8005e0e <STM_FaultAcknowledged+0x12>
  {
    pHandle->bState = STOP_IDLE;
 8005e06:	3a02      	subs	r2, #2
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005e08:	8098      	strh	r0, [r3, #4]
    pHandle->bState = STOP_IDLE;
 8005e0a:	701a      	strb	r2, [r3, #0]
    bToBeReturned = true;
 8005e0c:	3001      	adds	r0, #1
  }

  return ( bToBeReturned );
}
 8005e0e:	4770      	bx	lr

08005e10 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8005e10:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8005e12:	8840      	ldrh	r0, [r0, #2]
 8005e14:	0400      	lsls	r0, r0, #16
 8005e16:	4318      	orrs	r0, r3

  return LocalFaultState;
}
 8005e18:	4770      	bx	lr
 8005e1a:	46c0      	nop			; (mov r8, r8)

08005e1c <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 8005e1c:	b510      	push	{r4, lr}

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8005e1e:	f7fe fb71 	bl	8004504 <FCP_Init>
}
 8005e22:	bd10      	pop	{r4, pc}

08005e24 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005e24:	2197      	movs	r1, #151	; 0x97
{
 8005e26:	b510      	push	{r4, lr}
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005e28:	5c42      	ldrb	r2, [r0, r1]
{
 8005e2a:	0003      	movs	r3, r0
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	d018      	beq.n	8005e62 <UFCP_TX_IRQ_Handler+0x3e>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8005e30:	2298      	movs	r2, #152	; 0x98
 8005e32:	5c82      	ldrb	r2, [r0, r2]
 8005e34:	2a00      	cmp	r2, #0
 8005e36:	d00c      	beq.n	8005e52 <UFCP_TX_IRQ_Handler+0x2e>
 8005e38:	2a01      	cmp	r2, #1
 8005e3a:	d028      	beq.n	8005e8e <UFCP_TX_IRQ_Handler+0x6a>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005e3c:	7d40      	ldrb	r0, [r0, #21]
 8005e3e:	3001      	adds	r0, #1
 8005e40:	4282      	cmp	r2, r0
 8005e42:	dc0f      	bgt.n	8005e64 <UFCP_TX_IRQ_Handler+0x40>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8005e44:	1899      	adds	r1, r3, r2
 8005e46:	7d08      	ldrb	r0, [r1, #20]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005e48:	2190      	movs	r1, #144	; 0x90
 8005e4a:	0049      	lsls	r1, r1, #1
 8005e4c:	5859      	ldr	r1, [r3, r1]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8005e4e:	8508      	strh	r0, [r1, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005e50:	e004      	b.n	8005e5c <UFCP_TX_IRQ_Handler+0x38>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8005e52:	7d01      	ldrb	r1, [r0, #20]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005e54:	2090      	movs	r0, #144	; 0x90
 8005e56:	0040      	lsls	r0, r0, #1
 8005e58:	5818      	ldr	r0, [r3, r0]
 8005e5a:	8501      	strh	r1, [r0, #40]	; 0x28
    {
      pBaseHandle->TxFrameLevel++;
 8005e5c:	2198      	movs	r1, #152	; 0x98
 8005e5e:	3201      	adds	r2, #1
 8005e60:	545a      	strb	r2, [r3, r1]

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8005e62:	bd10      	pop	{r4, pc}
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 8005e64:	2296      	movs	r2, #150	; 0x96
 8005e66:	5c98      	ldrb	r0, [r3, r2]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005e68:	328a      	adds	r2, #138	; 0x8a
 8005e6a:	589a      	ldr	r2, [r3, r2]
 8005e6c:	8510      	strh	r0, [r2, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e6e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e72:	2001      	movs	r0, #1
 8005e74:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005e78:	2480      	movs	r4, #128	; 0x80
 8005e7a:	6810      	ldr	r0, [r2, #0]
 8005e7c:	43a0      	bics	r0, r4
 8005e7e:	6010      	str	r0, [r2, #0]
 8005e80:	f38c 8810 	msr	PRIMASK, ip
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8005e84:	2200      	movs	r2, #0
 8005e86:	545a      	strb	r2, [r3, r1]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005e88:	cb09      	ldmia	r3, {r0, r3}
 8005e8a:	4798      	blx	r3
 8005e8c:	e7e9      	b.n	8005e62 <UFCP_TX_IRQ_Handler+0x3e>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8005e8e:	7d41      	ldrb	r1, [r0, #21]
        break;
 8005e90:	e7e0      	b.n	8005e54 <UFCP_TX_IRQ_Handler+0x30>
 8005e92:	46c0      	nop			; (mov r8, r8)

08005e94 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005e94:	228e      	movs	r2, #142	; 0x8e
 8005e96:	0052      	lsls	r2, r2, #1
 8005e98:	5c81      	ldrb	r1, [r0, r2]
{
 8005e9a:	0003      	movs	r3, r0
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005e9c:	2001      	movs	r0, #1
  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	d10d      	bne.n	8005ebe <UFCP_Receive+0x2a>
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005ea2:	5298      	strh	r0, [r3, r2]
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8005ea4:	3204      	adds	r2, #4
 8005ea6:	589a      	ldr	r2, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eac:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005eb0:	6813      	ldr	r3, [r2, #0]
 8005eb2:	301f      	adds	r0, #31
 8005eb4:	4303      	orrs	r3, r0
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	f381 8810 	msr	PRIMASK, r1
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8005ebc:	381e      	subs	r0, #30
  }

  return ret_val;
}
 8005ebe:	4770      	bx	lr

08005ec0 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	0005      	movs	r5, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005ec4:	2097      	movs	r0, #151	; 0x97
 8005ec6:	5c2c      	ldrb	r4, [r5, r0]
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005ec8:	3896      	subs	r0, #150	; 0x96
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	d000      	beq.n	8005ed0 <UFCP_Send+0x10>
  }

  return ret_val;
}
 8005ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005ed0:	0028      	movs	r0, r5
    while ( size-- ) *dest++ = *buffer++;
 8005ed2:	1e5e      	subs	r6, r3, #1
    pHandle->TxFrame.Code = code;
 8005ed4:	7529      	strb	r1, [r5, #20]
    while ( size-- ) *dest++ = *buffer++;
 8005ed6:	b2f1      	uxtb	r1, r6
 8005ed8:	468c      	mov	ip, r1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005eda:	3016      	adds	r0, #22
    pHandle->TxFrame.Size = size;
 8005edc:	756b      	strb	r3, [r5, #21]
    while ( size-- ) *dest++ = *buffer++;
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02d      	beq.n	8005f3e <UFCP_Send+0x7e>
 8005ee2:	2102      	movs	r1, #2
 8005ee4:	1c57      	adds	r7, r2, #1
 8005ee6:	1bc7      	subs	r7, r0, r7
 8005ee8:	42b9      	cmp	r1, r7
 8005eea:	4189      	sbcs	r1, r1
 8005eec:	2708      	movs	r7, #8
 8005eee:	4567      	cmp	r7, ip
 8005ef0:	41bf      	sbcs	r7, r7
 8005ef2:	4249      	negs	r1, r1
 8005ef4:	427f      	negs	r7, r7
 8005ef6:	420f      	tst	r7, r1
 8005ef8:	d03b      	beq.n	8005f72 <UFCP_Send+0xb2>
 8005efa:	0001      	movs	r1, r0
 8005efc:	4311      	orrs	r1, r2
 8005efe:	0789      	lsls	r1, r1, #30
 8005f00:	d137      	bne.n	8005f72 <UFCP_Send+0xb2>
 8005f02:	2100      	movs	r1, #0
 8005f04:	089f      	lsrs	r7, r3, #2
 8005f06:	5856      	ldr	r6, [r2, r1]
 8005f08:	3401      	adds	r4, #1
 8005f0a:	b2e4      	uxtb	r4, r4
 8005f0c:	5046      	str	r6, [r0, r1]
 8005f0e:	3104      	adds	r1, #4
 8005f10:	42a7      	cmp	r7, r4
 8005f12:	d1f8      	bne.n	8005f06 <UFCP_Send+0x46>
 8005f14:	2103      	movs	r1, #3
 8005f16:	001c      	movs	r4, r3
 8005f18:	438c      	bics	r4, r1
 8005f1a:	0021      	movs	r1, r4
 8005f1c:	1912      	adds	r2, r2, r4
 8005f1e:	1900      	adds	r0, r0, r4
 8005f20:	4664      	mov	r4, ip
 8005f22:	1a66      	subs	r6, r4, r1
 8005f24:	b2f6      	uxtb	r6, r6
 8005f26:	428b      	cmp	r3, r1
 8005f28:	d009      	beq.n	8005f3e <UFCP_Send+0x7e>
 8005f2a:	7813      	ldrb	r3, [r2, #0]
 8005f2c:	7003      	strb	r3, [r0, #0]
 8005f2e:	2e00      	cmp	r6, #0
 8005f30:	d005      	beq.n	8005f3e <UFCP_Send+0x7e>
 8005f32:	7853      	ldrb	r3, [r2, #1]
 8005f34:	7043      	strb	r3, [r0, #1]
 8005f36:	2e01      	cmp	r6, #1
 8005f38:	d001      	beq.n	8005f3e <UFCP_Send+0x7e>
 8005f3a:	7893      	ldrb	r3, [r2, #2]
 8005f3c:	7083      	strb	r3, [r0, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005f3e:	0028      	movs	r0, r5
 8005f40:	3014      	adds	r0, #20
 8005f42:	f7fe faf9 	bl	8004538 <FCP_CalcCRC>
 8005f46:	2396      	movs	r3, #150	; 0x96
    pHandle->TxFrameLevel = 0;
 8005f48:	2200      	movs	r2, #0
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005f4a:	54e8      	strb	r0, [r5, r3]
    pHandle->TxFrameLevel = 0;
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	54ea      	strb	r2, [r5, r3]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005f50:	3b97      	subs	r3, #151	; 0x97
 8005f52:	3297      	adds	r2, #151	; 0x97
 8005f54:	54ab      	strb	r3, [r5, r2]
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8005f56:	3289      	adds	r2, #137	; 0x89
 8005f58:	58aa      	ldr	r2, [r5, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005f62:	2080      	movs	r0, #128	; 0x80
 8005f64:	6813      	ldr	r3, [r2, #0]
 8005f66:	4303      	orrs	r3, r0
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	f381 8810 	msr	PRIMASK, r1
 8005f6e:	387e      	subs	r0, #126	; 0x7e
 8005f70:	e7ad      	b.n	8005ece <UFCP_Send+0xe>
    while ( size-- ) *dest++ = *buffer++;
 8005f72:	2100      	movs	r1, #0
 8005f74:	5c54      	ldrb	r4, [r2, r1]
 8005f76:	5444      	strb	r4, [r0, r1]
 8005f78:	3101      	adds	r1, #1
 8005f7a:	b2cc      	uxtb	r4, r1
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	d1f9      	bne.n	8005f74 <UFCP_Send+0xb4>
 8005f80:	e7dd      	b.n	8005f3e <UFCP_Send+0x7e>
 8005f82:	46c0      	nop			; (mov r8, r8)

08005f84 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005f84:	228e      	movs	r2, #142	; 0x8e
{
 8005f86:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005f88:	0052      	lsls	r2, r2, #1
 8005f8a:	5c83      	ldrb	r3, [r0, r2]
{
 8005f8c:	0004      	movs	r4, r0
 8005f8e:	b083      	sub	sp, #12
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d011      	beq.n	8005fb8 <UFCP_RX_IRQ_Handler+0x34>
    switch ( pBaseHandle->RxFrameLevel )
 8005f94:	201e      	movs	r0, #30
 8005f96:	30ff      	adds	r0, #255	; 0xff
 8005f98:	5c23      	ldrb	r3, [r4, r0]
    uint8_t rx_byte = (uint8_t) rx_data;
 8005f9a:	b2cd      	uxtb	r5, r1
    switch ( pBaseHandle->RxFrameLevel )
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <UFCP_RX_IRQ_Handler+0x3a>
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d03b      	beq.n	800601c <UFCP_RX_IRQ_Handler+0x98>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8005fa4:	269a      	movs	r6, #154	; 0x9a
 8005fa6:	5da1      	ldrb	r1, [r4, r6]
 8005fa8:	3101      	adds	r1, #1
 8005faa:	428b      	cmp	r3, r1
 8005fac:	dc0f      	bgt.n	8005fce <UFCP_RX_IRQ_Handler+0x4a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005fae:	18e2      	adds	r2, r4, r3
 8005fb0:	3299      	adds	r2, #153	; 0x99
          pBaseHandle->RxFrameLevel++;
 8005fb2:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005fb4:	7015      	strb	r5, [r2, #0]
          pBaseHandle->RxFrameLevel++;
 8005fb6:	5423      	strb	r3, [r4, r0]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005fb8:	4823      	ldr	r0, [pc, #140]	; (8006048 <UFCP_RX_IRQ_Handler+0xc4>)
}
 8005fba:	b003      	add	sp, #12
 8005fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pBaseHandle->RxFrame.Code = rx_byte;
 8005fbe:	2399      	movs	r3, #153	; 0x99
 8005fc0:	54e5      	strb	r5, [r4, r3]
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8005fc2:	8a23      	ldrh	r3, [r4, #16]
 8005fc4:	8263      	strh	r3, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	5423      	strb	r3, [r4, r0]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8005fca:	4820      	ldr	r0, [pc, #128]	; (800604c <UFCP_RX_IRQ_Handler+0xc8>)
        break;
 8005fcc:	e7f5      	b.n	8005fba <UFCP_RX_IRQ_Handler+0x36>
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8005fce:	271c      	movs	r7, #28
          pBaseHandle->RxTimeoutCountdown = 0;
 8005fd0:	2300      	movs	r3, #0
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8005fd2:	37ff      	adds	r7, #255	; 0xff
 8005fd4:	55e5      	strb	r5, [r4, r7]
          pBaseHandle->RxTimeoutCountdown = 0;
 8005fd6:	8263      	strh	r3, [r4, #18]
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8005fd8:	3321      	adds	r3, #33	; 0x21
 8005fda:	33ff      	adds	r3, #255	; 0xff
 8005fdc:	58e1      	ldr	r1, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fde:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	3b20      	subs	r3, #32
 8005fe4:	3bff      	subs	r3, #255	; 0xff
 8005fe6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005fea:	2520      	movs	r5, #32
 8005fec:	680b      	ldr	r3, [r1, #0]
 8005fee:	43ab      	bics	r3, r5
 8005ff0:	600b      	str	r3, [r1, #0]
 8005ff2:	f380 8810 	msr	PRIMASK, r0
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005ff6:	2300      	movs	r3, #0
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005ff8:	0020      	movs	r0, r4
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005ffa:	54a3      	strb	r3, [r4, r2]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005ffc:	3099      	adds	r0, #153	; 0x99
 8005ffe:	f7fe fa9b 	bl	8004538 <FCP_CalcCRC>
 8006002:	5de3      	ldrb	r3, [r4, r7]
 8006004:	4283      	cmp	r3, r0
 8006006:	d114      	bne.n	8006032 <UFCP_RX_IRQ_Handler+0xae>
                                                      pBaseHandle->RxFrame.Buffer,
 8006008:	0022      	movs	r2, r4
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800600a:	2199      	movs	r1, #153	; 0x99
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	5da3      	ldrb	r3, [r4, r6]
 8006010:	5c61      	ldrb	r1, [r4, r1]
                                                      pBaseHandle->RxFrame.Buffer,
 8006012:	329b      	adds	r2, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8006014:	68a4      	ldr	r4, [r4, #8]
 8006016:	47a0      	blx	r4
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006018:	480d      	ldr	r0, [pc, #52]	; (8006050 <UFCP_RX_IRQ_Handler+0xcc>)
 800601a:	e7ce      	b.n	8005fba <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxFrame.Size = rx_byte;
 800601c:	239a      	movs	r3, #154	; 0x9a
 800601e:	54e5      	strb	r5, [r4, r3]
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006020:	060b      	lsls	r3, r1, #24
 8006022:	d402      	bmi.n	800602a <UFCP_RX_IRQ_Handler+0xa6>
        pBaseHandle->RxFrameLevel++;
 8006024:	2302      	movs	r3, #2
 8006026:	5423      	strb	r3, [r4, r0]
 8006028:	e7c6      	b.n	8005fb8 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 800602a:	2300      	movs	r3, #0
 800602c:	5423      	strb	r3, [r4, r0]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800602e:	4806      	ldr	r0, [pc, #24]	; (8006048 <UFCP_RX_IRQ_Handler+0xc4>)
 8006030:	e7c3      	b.n	8005fba <UFCP_RX_IRQ_Handler+0x36>
            error_code = FCP_MSG_RX_BAD_CRC;
 8006032:	466b      	mov	r3, sp
 8006034:	1dda      	adds	r2, r3, #7
 8006036:	230a      	movs	r3, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006038:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 800603a:	7013      	strb	r3, [r2, #0]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800603c:	0020      	movs	r0, r4
 800603e:	3b09      	subs	r3, #9
 8006040:	f7ff ff3e 	bl	8005ec0 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006044:	4802      	ldr	r0, [pc, #8]	; (8006050 <UFCP_RX_IRQ_Handler+0xcc>)
  return ret_val;
 8006046:	e7b8      	b.n	8005fba <UFCP_RX_IRQ_Handler+0x36>
 8006048:	080074f8 	.word	0x080074f8
 800604c:	080074fa 	.word	0x080074fa
 8006050:	080074fc 	.word	0x080074fc

08006054 <UFCP_OVR_IRQ_Handler>:
{
 8006054:	b500      	push	{lr}
 8006056:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8006058:	466b      	mov	r3, sp
 800605a:	1dda      	adds	r2, r3, #7
 800605c:	2308      	movs	r3, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800605e:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8006060:	7013      	strb	r3, [r2, #0]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006062:	3b07      	subs	r3, #7
 8006064:	f7ff ff2c 	bl	8005ec0 <UFCP_Send>
}
 8006068:	b003      	add	sp, #12
 800606a:	bd00      	pop	{pc}

0800606c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800606c:	238e      	movs	r3, #142	; 0x8e
 800606e:	2200      	movs	r2, #0
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	54c2      	strb	r2, [r0, r3]
}
 8006074:	4770      	bx	lr
 8006076:	46c0      	nop			; (mov r8, r8)

08006078 <RUC_SetPhaseDurationms>:
 8006078:	004b      	lsls	r3, r1, #1
 800607a:	1859      	adds	r1, r3, r1
 800607c:	0089      	lsls	r1, r1, #2
 800607e:	1841      	adds	r1, r0, r1
 8006080:	818a      	strh	r2, [r1, #12]
 8006082:	4770      	bx	lr

08006084 <RUC_SetPhaseFinalMecSpeedUnit>:
 8006084:	004b      	lsls	r3, r1, #1
 8006086:	1859      	adds	r1, r3, r1
 8006088:	0089      	lsls	r1, r1, #2
 800608a:	1841      	adds	r1, r0, r1
 800608c:	81ca      	strh	r2, [r1, #14]
 800608e:	4770      	bx	lr

08006090 <RUC_SetPhaseFinalTorque>:
 8006090:	004b      	lsls	r3, r1, #1
 8006092:	1859      	adds	r1, r3, r1
 8006094:	0089      	lsls	r1, r1, #2
 8006096:	1841      	adds	r1, r0, r1
 8006098:	820a      	strh	r2, [r1, #16]
 800609a:	4770      	bx	lr

0800609c <RUC_GetPhaseDurationms>:
 800609c:	004b      	lsls	r3, r1, #1
 800609e:	1859      	adds	r1, r3, r1
 80060a0:	0089      	lsls	r1, r1, #2
 80060a2:	1841      	adds	r1, r0, r1
 80060a4:	8988      	ldrh	r0, [r1, #12]
 80060a6:	4770      	bx	lr

080060a8 <RUC_GetPhaseFinalMecSpeedUnit>:
 80060a8:	004b      	lsls	r3, r1, #1
 80060aa:	1859      	adds	r1, r3, r1
 80060ac:	0089      	lsls	r1, r1, #2
 80060ae:	1841      	adds	r1, r0, r1
 80060b0:	230e      	movs	r3, #14
 80060b2:	5ec8      	ldrsh	r0, [r1, r3]
 80060b4:	4770      	bx	lr
 80060b6:	46c0      	nop			; (mov r8, r8)

080060b8 <RUC_GetPhaseFinalTorque>:
 80060b8:	004b      	lsls	r3, r1, #1
 80060ba:	1859      	adds	r1, r3, r1
 80060bc:	0089      	lsls	r1, r1, #2
 80060be:	1841      	adds	r1, r0, r1
 80060c0:	2310      	movs	r3, #16
 80060c2:	5ec8      	ldrsh	r0, [r1, r3]
 80060c4:	4770      	bx	lr
 80060c6:	46c0      	nop			; (mov r8, r8)

080060c8 <RUC_GetNumberOfPhases>:
 80060c8:	2348      	movs	r3, #72	; 0x48
 80060ca:	5cc0      	ldrb	r0, [r0, r3]
 80060cc:	4770      	bx	lr
 80060ce:	46c0      	nop			; (mov r8, r8)

080060d0 <STO_PLL_CalcElAngle>:
 80060d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d2:	4645      	mov	r5, r8
 80060d4:	46de      	mov	lr, fp
 80060d6:	4657      	mov	r7, sl
 80060d8:	464e      	mov	r6, r9
 80060da:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80060dc:	b5e0      	push	{r5, r6, r7, lr}
 80060de:	4698      	mov	r8, r3
 80060e0:	222e      	movs	r2, #46	; 0x2e
 80060e2:	5e83      	ldrsh	r3, [r0, r2]
 80060e4:	b08f      	sub	sp, #60	; 0x3c
 80060e6:	03dd      	lsls	r5, r3, #15
 80060e8:	0004      	movs	r4, r0
 80060ea:	1aea      	subs	r2, r5, r3
 80060ec:	4590      	cmp	r8, r2
 80060ee:	dc00      	bgt.n	80060f2 <STO_PLL_CalcElAngle+0x22>
 80060f0:	e0da      	b.n	80062a8 <STO_PLL_CalcElAngle+0x1d8>
 80060f2:	4690      	mov	r8, r2
 80060f4:	6682      	str	r2, [r0, #104]	; 0x68
 80060f6:	208f      	movs	r0, #143	; 0x8f
 80060f8:	4646      	mov	r6, r8
 80060fa:	0040      	lsls	r0, r0, #1
 80060fc:	5a20      	ldrh	r0, [r4, r0]
 80060fe:	4106      	asrs	r6, r0
 8006100:	9603      	str	r6, [sp, #12]
 8006102:	b236      	sxth	r6, r6
 8006104:	46b3      	mov	fp, r6
 8006106:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8006108:	9601      	str	r6, [sp, #4]
 800610a:	42b2      	cmp	r2, r6
 800610c:	db00      	blt.n	8006110 <STO_PLL_CalcElAngle+0x40>
 800610e:	e0e3      	b.n	80062d8 <STO_PLL_CalcElAngle+0x208>
 8006110:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006112:	9201      	str	r2, [sp, #4]
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006118:	4103      	asrs	r3, r0
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	b21b      	sxth	r3, r3
 800611e:	469a      	mov	sl, r3
 8006120:	202c      	movs	r0, #44	; 0x2c
 8006122:	5e23      	ldrsh	r3, [r4, r0]
 8006124:	03dd      	lsls	r5, r3, #15
 8006126:	1ae8      	subs	r0, r5, r3
 8006128:	4282      	cmp	r2, r0
 800612a:	dc00      	bgt.n	800612e <STO_PLL_CalcElAngle+0x5e>
 800612c:	e0cd      	b.n	80062ca <STO_PLL_CalcElAngle+0x1fa>
 800612e:	0002      	movs	r2, r0
 8006130:	6620      	str	r0, [r4, #96]	; 0x60
 8006132:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8006134:	9602      	str	r6, [sp, #8]
 8006136:	42b0      	cmp	r0, r6
 8006138:	db00      	blt.n	800613c <STO_PLL_CalcElAngle+0x6c>
 800613a:	e0bf      	b.n	80062bc <STO_PLL_CalcElAngle+0x1ec>
 800613c:	6660      	str	r0, [r4, #100]	; 0x64
 800613e:	9002      	str	r0, [sp, #8]
 8006140:	238e      	movs	r3, #142	; 0x8e
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	5ae0      	ldrh	r0, [r4, r3]
 8006146:	0013      	movs	r3, r2
 8006148:	9d02      	ldr	r5, [sp, #8]
 800614a:	4103      	asrs	r3, r0
 800614c:	4105      	asrs	r5, r0
 800614e:	9505      	str	r5, [sp, #20]
 8006150:	8908      	ldrh	r0, [r1, #8]
 8006152:	2700      	movs	r7, #0
 8006154:	5fcd      	ldrsh	r5, [r1, r7]
 8006156:	2602      	movs	r6, #2
 8006158:	5f8f      	ldrsh	r7, [r1, r6]
 800615a:	4345      	muls	r5, r0
 800615c:	4378      	muls	r0, r7
 800615e:	1400      	asrs	r0, r0, #16
 8006160:	9006      	str	r0, [sp, #24]
 8006162:	2720      	movs	r7, #32
 8006164:	5fe0      	ldrsh	r0, [r4, r7]
 8006166:	b21f      	sxth	r7, r3
 8006168:	4347      	muls	r7, r0
 800616a:	1bd2      	subs	r2, r2, r7
 800616c:	2622      	movs	r6, #34	; 0x22
 800616e:	5fa7      	ldrsh	r7, [r4, r6]
 8006170:	142d      	asrs	r5, r5, #16
 8006172:	003e      	movs	r6, r7
 8006174:	888f      	ldrh	r7, [r1, #4]
 8006176:	9607      	str	r6, [sp, #28]
 8006178:	1bdb      	subs	r3, r3, r7
 800617a:	0037      	movs	r7, r6
 800617c:	b21b      	sxth	r3, r3
 800617e:	435f      	muls	r7, r3
 8006180:	46bc      	mov	ip, r7
 8006182:	4494      	add	ip, r2
 8006184:	2628      	movs	r6, #40	; 0x28
 8006186:	5fa2      	ldrsh	r2, [r4, r6]
 8006188:	2624      	movs	r6, #36	; 0x24
 800618a:	5fa7      	ldrsh	r7, [r4, r6]
 800618c:	4355      	muls	r5, r2
 800618e:	4465      	add	r5, ip
 8006190:	46bc      	mov	ip, r7
 8006192:	465f      	mov	r7, fp
 8006194:	4666      	mov	r6, ip
 8006196:	4377      	muls	r7, r6
 8006198:	1bee      	subs	r6, r5, r7
 800619a:	960a      	str	r6, [sp, #40]	; 0x28
 800619c:	2626      	movs	r6, #38	; 0x26
 800619e:	5fa5      	ldrsh	r5, [r4, r6]
 80061a0:	8e67      	ldrh	r7, [r4, #50]	; 0x32
 80061a2:	9508      	str	r5, [sp, #32]
 80061a4:	436b      	muls	r3, r5
 80061a6:	4655      	mov	r5, sl
 80061a8:	413d      	asrs	r5, r7
 80061aa:	9709      	str	r7, [sp, #36]	; 0x24
 80061ac:	272a      	movs	r7, #42	; 0x2a
 80061ae:	5fe6      	ldrsh	r6, [r4, r7]
 80061b0:	4443      	add	r3, r8
 80061b2:	4375      	muls	r5, r6
 80061b4:	46b1      	mov	r9, r6
 80061b6:	270e      	movs	r7, #14
 80061b8:	5fe6      	ldrsh	r6, [r4, r7]
 80061ba:	4375      	muls	r5, r6
 80061bc:	18ed      	adds	r5, r5, r3
 80061be:	950b      	str	r5, [sp, #44]	; 0x2c
 80061c0:	9d05      	ldr	r5, [sp, #20]
 80061c2:	88c9      	ldrh	r1, [r1, #6]
 80061c4:	b22b      	sxth	r3, r5
 80061c6:	4358      	muls	r0, r3
 80061c8:	9b02      	ldr	r3, [sp, #8]
 80061ca:	1a69      	subs	r1, r5, r1
 80061cc:	1a1f      	subs	r7, r3, r0
 80061ce:	9b08      	ldr	r3, [sp, #32]
 80061d0:	9807      	ldr	r0, [sp, #28]
 80061d2:	b209      	sxth	r1, r1
 80061d4:	4348      	muls	r0, r1
 80061d6:	4359      	muls	r1, r3
 80061d8:	9b01      	ldr	r3, [sp, #4]
 80061da:	46b0      	mov	r8, r6
 80061dc:	18ce      	adds	r6, r1, r3
 80061de:	4659      	mov	r1, fp
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	19c7      	adds	r7, r0, r7
 80061e4:	4119      	asrs	r1, r3
 80061e6:	464b      	mov	r3, r9
 80061e8:	9806      	ldr	r0, [sp, #24]
 80061ea:	4359      	muls	r1, r3
 80061ec:	4342      	muls	r2, r0
 80061ee:	4650      	mov	r0, sl
 80061f0:	19d7      	adds	r7, r2, r7
 80061f2:	4662      	mov	r2, ip
 80061f4:	4643      	mov	r3, r8
 80061f6:	4342      	muls	r2, r0
 80061f8:	4359      	muls	r1, r3
 80061fa:	1abf      	subs	r7, r7, r2
 80061fc:	2370      	movs	r3, #112	; 0x70
 80061fe:	465a      	mov	r2, fp
 8006200:	52e2      	strh	r2, [r4, r3]
 8006202:	3302      	adds	r3, #2
 8006204:	52e0      	strh	r0, [r4, r3]
 8006206:	33b2      	adds	r3, #178	; 0xb2
 8006208:	56e3      	ldrsb	r3, [r4, r3]
 800620a:	1a76      	subs	r6, r6, r1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d152      	bne.n	80062b6 <STO_PLL_CalcElAngle+0x1e6>
 8006210:	4643      	mov	r3, r8
 8006212:	17db      	asrs	r3, r3, #31
 8006214:	4698      	mov	r8, r3
 8006216:	4642      	mov	r2, r8
 8006218:	4b34      	ldr	r3, [pc, #208]	; (80062ec <STO_PLL_CalcElAngle+0x21c>)
 800621a:	4013      	ands	r3, r2
 800621c:	3301      	adds	r3, #1
 800621e:	4698      	mov	r8, r3
 8006220:	2304      	movs	r3, #4
 8006222:	5ee0      	ldrsh	r0, [r4, r3]
 8006224:	f7fa fc7e 	bl	8000b24 <MCM_Trig_Functions>
 8006228:	4643      	mov	r3, r8
 800622a:	4642      	mov	r2, r8
 800622c:	9904      	ldr	r1, [sp, #16]
 800622e:	4359      	muls	r1, r3
 8006230:	4249      	negs	r1, r1
 8006232:	b203      	sxth	r3, r0
 8006234:	b209      	sxth	r1, r1
 8006236:	4359      	muls	r1, r3
 8006238:	13c9      	asrs	r1, r1, #15
 800623a:	b20b      	sxth	r3, r1
 800623c:	9903      	ldr	r1, [sp, #12]
 800623e:	1400      	asrs	r0, r0, #16
 8006240:	4351      	muls	r1, r2
 8006242:	b209      	sxth	r1, r1
 8006244:	4348      	muls	r0, r1
 8006246:	13c0      	asrs	r0, r0, #15
 8006248:	b201      	sxth	r1, r0
 800624a:	0020      	movs	r0, r4
 800624c:	1a59      	subs	r1, r3, r1
 800624e:	3034      	adds	r0, #52	; 0x34
 8006250:	f7fe fe2c 	bl	8004eac <PI_Controller>
 8006254:	23f4      	movs	r3, #244	; 0xf4
 8006256:	2287      	movs	r2, #135	; 0x87
 8006258:	8220      	strh	r0, [r4, #16]
 800625a:	5ce3      	ldrb	r3, [r4, r3]
 800625c:	0052      	lsls	r2, r2, #1
 800625e:	3301      	adds	r3, #1
 8006260:	5ca2      	ldrb	r2, [r4, r2]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	429a      	cmp	r2, r3
 8006266:	d03e      	beq.n	80062e6 <STO_PLL_CalcElAngle+0x216>
 8006268:	001a      	movs	r2, r3
 800626a:	2174      	movs	r1, #116	; 0x74
 800626c:	0052      	lsls	r2, r2, #1
 800626e:	18a2      	adds	r2, r4, r2
 8006270:	4689      	mov	r9, r1
 8006272:	5e55      	ldrsh	r5, [r2, r1]
 8006274:	46a8      	mov	r8, r5
 8006276:	2586      	movs	r5, #134	; 0x86
 8006278:	4641      	mov	r1, r8
 800627a:	006d      	lsls	r5, r5, #1
 800627c:	5361      	strh	r1, [r4, r5]
 800627e:	4649      	mov	r1, r9
 8006280:	5250      	strh	r0, [r2, r1]
 8006282:	22f4      	movs	r2, #244	; 0xf4
 8006284:	54a3      	strb	r3, [r4, r2]
 8006286:	88a3      	ldrh	r3, [r4, #4]
 8006288:	6667      	str	r7, [r4, #100]	; 0x64
 800628a:	18c0      	adds	r0, r0, r3
 800628c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628e:	b200      	sxth	r0, r0
 8006290:	6623      	str	r3, [r4, #96]	; 0x60
 8006292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006294:	80a0      	strh	r0, [r4, #4]
 8006296:	66a3      	str	r3, [r4, #104]	; 0x68
 8006298:	66e6      	str	r6, [r4, #108]	; 0x6c
 800629a:	b00f      	add	sp, #60	; 0x3c
 800629c:	bc3c      	pop	{r2, r3, r4, r5}
 800629e:	4690      	mov	r8, r2
 80062a0:	4699      	mov	r9, r3
 80062a2:	46a2      	mov	sl, r4
 80062a4:	46ab      	mov	fp, r5
 80062a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a8:	1b58      	subs	r0, r3, r5
 80062aa:	4580      	cmp	r8, r0
 80062ac:	dd00      	ble.n	80062b0 <STO_PLL_CalcElAngle+0x1e0>
 80062ae:	e722      	b.n	80060f6 <STO_PLL_CalcElAngle+0x26>
 80062b0:	66a0      	str	r0, [r4, #104]	; 0x68
 80062b2:	4680      	mov	r8, r0
 80062b4:	e71f      	b.n	80060f6 <STO_PLL_CalcElAngle+0x26>
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4698      	mov	r8, r3
 80062ba:	e7b1      	b.n	8006220 <STO_PLL_CalcElAngle+0x150>
 80062bc:	1b5b      	subs	r3, r3, r5
 80062be:	429e      	cmp	r6, r3
 80062c0:	dd00      	ble.n	80062c4 <STO_PLL_CalcElAngle+0x1f4>
 80062c2:	e73d      	b.n	8006140 <STO_PLL_CalcElAngle+0x70>
 80062c4:	6663      	str	r3, [r4, #100]	; 0x64
 80062c6:	9302      	str	r3, [sp, #8]
 80062c8:	e73a      	b.n	8006140 <STO_PLL_CalcElAngle+0x70>
 80062ca:	1b5f      	subs	r7, r3, r5
 80062cc:	42ba      	cmp	r2, r7
 80062ce:	dd00      	ble.n	80062d2 <STO_PLL_CalcElAngle+0x202>
 80062d0:	e72f      	b.n	8006132 <STO_PLL_CalcElAngle+0x62>
 80062d2:	6627      	str	r7, [r4, #96]	; 0x60
 80062d4:	003a      	movs	r2, r7
 80062d6:	e72c      	b.n	8006132 <STO_PLL_CalcElAngle+0x62>
 80062d8:	1b5b      	subs	r3, r3, r5
 80062da:	429e      	cmp	r6, r3
 80062dc:	dd00      	ble.n	80062e0 <STO_PLL_CalcElAngle+0x210>
 80062de:	e719      	b.n	8006114 <STO_PLL_CalcElAngle+0x44>
 80062e0:	66e3      	str	r3, [r4, #108]	; 0x6c
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	e716      	b.n	8006114 <STO_PLL_CalcElAngle+0x44>
 80062e6:	2200      	movs	r2, #0
 80062e8:	2300      	movs	r3, #0
 80062ea:	e7be      	b.n	800626a <STO_PLL_CalcElAngle+0x19a>
 80062ec:	0000fffe 	.word	0x0000fffe

080062f0 <STO_PLL_CalcAvrgMecSpeedUnit>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	46ce      	mov	lr, r9
 80062f4:	4647      	mov	r7, r8
 80062f6:	2387      	movs	r3, #135	; 0x87
 80062f8:	b580      	push	{r7, lr}
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	5cc3      	ldrb	r3, [r0, r3]
 80062fe:	0006      	movs	r6, r0
 8006300:	4689      	mov	r9, r1
 8006302:	4698      	mov	r8, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d100      	bne.n	800630a <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
 8006308:	e0a2      	b.n	8006450 <STO_PLL_CalcAvrgMecSpeedUnit+0x160>
 800630a:	0005      	movs	r5, r0
 800630c:	0002      	movs	r2, r0
 800630e:	3574      	adds	r5, #116	; 0x74
 8006310:	002c      	movs	r4, r5
 8006312:	2000      	movs	r0, #0
 8006314:	3b01      	subs	r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	3276      	adds	r2, #118	; 0x76
 800631c:	189b      	adds	r3, r3, r2
 800631e:	2100      	movs	r1, #0
 8006320:	5e62      	ldrsh	r2, [r4, r1]
 8006322:	3402      	adds	r4, #2
 8006324:	1880      	adds	r0, r0, r2
 8006326:	42a3      	cmp	r3, r4
 8006328:	d1f9      	bne.n	800631e <STO_PLL_CalcAvrgMecSpeedUnit+0x2e>
 800632a:	4641      	mov	r1, r8
 800632c:	f7f9 ff76 	bl	800021c <__divsi3>
 8006330:	0007      	movs	r7, r0
 8006332:	2000      	movs	r0, #0
 8006334:	2200      	movs	r2, #0
 8006336:	5eab      	ldrsh	r3, [r5, r2]
 8006338:	3502      	adds	r5, #2
 800633a:	1bdb      	subs	r3, r3, r7
 800633c:	435b      	muls	r3, r3
 800633e:	18c0      	adds	r0, r0, r3
 8006340:	42ac      	cmp	r4, r5
 8006342:	d1f7      	bne.n	8006334 <STO_PLL_CalcAvrgMecSpeedUnit+0x44>
 8006344:	4641      	mov	r1, r8
 8006346:	f7f9 ff69 	bl	800021c <__divsi3>
 800634a:	003c      	movs	r4, r7
 800634c:	0005      	movs	r5, r0
 800634e:	437c      	muls	r4, r7
 8006350:	2388      	movs	r3, #136	; 0x88
 8006352:	8b70      	ldrh	r0, [r6, #26]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4347      	muls	r7, r0
 8006358:	78b0      	ldrb	r0, [r6, #2]
 800635a:	5af3      	ldrh	r3, [r6, r3]
 800635c:	69f1      	ldr	r1, [r6, #28]
 800635e:	4378      	muls	r0, r7
 8006360:	435c      	muls	r4, r3
 8006362:	f7f9 ff5b 	bl	800021c <__divsi3>
 8006366:	7871      	ldrb	r1, [r6, #1]
 8006368:	f7f9 ff58 	bl	800021c <__divsi3>
 800636c:	464a      	mov	r2, r9
 800636e:	b203      	sxth	r3, r0
 8006370:	8013      	strh	r3, [r2, #0]
 8006372:	11e4      	asrs	r4, r4, #7
 8006374:	81b3      	strh	r3, [r6, #12]
 8006376:	2301      	movs	r3, #1
 8006378:	42ac      	cmp	r4, r5
 800637a:	dc00      	bgt.n	800637e <STO_PLL_CalcAvrgMecSpeedUnit+0x8e>
 800637c:	2300      	movs	r3, #0
 800637e:	22f5      	movs	r2, #245	; 0xf5
 8006380:	54b3      	strb	r3, [r6, r2]
 8006382:	23f8      	movs	r3, #248	; 0xf8
 8006384:	5cf7      	ldrb	r7, [r6, r3]
 8006386:	330c      	adds	r3, #12
 8006388:	5cf3      	ldrb	r3, [r6, r3]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d113      	bne.n	80063b6 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 800638e:	2f00      	cmp	r7, #0
 8006390:	d02d      	beq.n	80063ee <STO_PLL_CalcAvrgMecSpeedUnit+0xfe>
 8006392:	42ac      	cmp	r4, r5
 8006394:	dc28      	bgt.n	80063e8 <STO_PLL_CalcAvrgMecSpeedUnit+0xf8>
 8006396:	22f7      	movs	r2, #247	; 0xf7
 8006398:	2118      	movs	r1, #24
 800639a:	5cb3      	ldrb	r3, [r6, r2]
 800639c:	31ff      	adds	r1, #255	; 0xff
 800639e:	3301      	adds	r3, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	54b3      	strb	r3, [r6, r2]
 80063a4:	5c71      	ldrb	r1, [r6, r1]
 80063a6:	4299      	cmp	r1, r3
 80063a8:	d821      	bhi.n	80063ee <STO_PLL_CalcAvrgMecSpeedUnit+0xfe>
 80063aa:	2300      	movs	r3, #0
 80063ac:	54b3      	strb	r3, [r6, r2]
 80063ae:	78f3      	ldrb	r3, [r6, #3]
 80063b0:	2000      	movs	r0, #0
 80063b2:	7033      	strb	r3, [r6, #0]
 80063b4:	e01f      	b.n	80063f6 <STO_PLL_CalcAvrgMecSpeedUnit+0x106>
 80063b6:	17c3      	asrs	r3, r0, #31
 80063b8:	18c0      	adds	r0, r0, r3
 80063ba:	4058      	eors	r0, r3
 80063bc:	238d      	movs	r3, #141	; 0x8d
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	5af3      	ldrh	r3, [r6, r3]
 80063c2:	4283      	cmp	r3, r0
 80063c4:	dc1b      	bgt.n	80063fe <STO_PLL_CalcAvrgMecSpeedUnit+0x10e>
 80063c6:	2200      	movs	r2, #0
 80063c8:	2300      	movs	r3, #0
 80063ca:	2000      	movs	r0, #0
 80063cc:	4690      	mov	r8, r2
 80063ce:	22f9      	movs	r2, #249	; 0xf9
 80063d0:	4641      	mov	r1, r8
 80063d2:	54b3      	strb	r3, [r6, r2]
 80063d4:	3203      	adds	r2, #3
 80063d6:	50b1      	str	r1, [r6, r2]
 80063d8:	3204      	adds	r2, #4
 80063da:	50b0      	str	r0, [r6, r2]
 80063dc:	2f00      	cmp	r7, #0
 80063de:	d006      	beq.n	80063ee <STO_PLL_CalcAvrgMecSpeedUnit+0xfe>
 80063e0:	42ac      	cmp	r4, r5
 80063e2:	ddd8      	ble.n	8006396 <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0d6      	beq.n	8006396 <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 80063e8:	23f7      	movs	r3, #247	; 0xf7
 80063ea:	2200      	movs	r2, #0
 80063ec:	54f2      	strb	r2, [r6, r3]
 80063ee:	4649      	mov	r1, r9
 80063f0:	0030      	movs	r0, r6
 80063f2:	f7ff fb63 	bl	8005abc <SPD_IsMecSpeedReliable>
 80063f6:	bc0c      	pop	{r2, r3}
 80063f8:	4690      	mov	r8, r2
 80063fa:	4699      	mov	r9, r3
 80063fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063fe:	2370      	movs	r3, #112	; 0x70
 8006400:	5ef3      	ldrsh	r3, [r6, r3]
 8006402:	2272      	movs	r2, #114	; 0x72
 8006404:	5eb2      	ldrsh	r2, [r6, r2]
 8006406:	435b      	muls	r3, r3
 8006408:	4352      	muls	r2, r2
 800640a:	4690      	mov	r8, r2
 800640c:	4498      	add	r8, r3
 800640e:	03c3      	lsls	r3, r0, #15
 8006410:	1a18      	subs	r0, r3, r0
 8006412:	2314      	movs	r3, #20
 8006414:	5ef1      	ldrsh	r1, [r6, r3]
 8006416:	f7f9 ff01 	bl	800021c <__divsi3>
 800641a:	231a      	movs	r3, #26
 800641c:	33ff      	adds	r3, #255	; 0xff
 800641e:	5cf1      	ldrb	r1, [r6, r3]
 8006420:	3bda      	subs	r3, #218	; 0xda
 8006422:	4341      	muls	r1, r0
 8006424:	17ca      	asrs	r2, r1, #31
 8006426:	401a      	ands	r2, r3
 8006428:	1852      	adds	r2, r2, r1
 800642a:	1192      	asrs	r2, r2, #6
 800642c:	4350      	muls	r0, r2
 800642e:	17c2      	asrs	r2, r0, #31
 8006430:	4013      	ands	r3, r2
 8006432:	228c      	movs	r2, #140	; 0x8c
 8006434:	0052      	lsls	r2, r2, #1
 8006436:	181b      	adds	r3, r3, r0
 8006438:	5cb2      	ldrb	r2, [r6, r2]
 800643a:	119b      	asrs	r3, r3, #6
 800643c:	435a      	muls	r2, r3
 800643e:	2301      	movs	r3, #1
 8006440:	1a82      	subs	r2, r0, r2
 8006442:	4590      	cmp	r8, r2
 8006444:	dd01      	ble.n	800644a <STO_PLL_CalcAvrgMecSpeedUnit+0x15a>
 8006446:	b2db      	uxtb	r3, r3
 8006448:	e7c1      	b.n	80063ce <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
 800644a:	2300      	movs	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	e7be      	b.n	80063ce <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
 8006450:	2400      	movs	r4, #0
 8006452:	2500      	movs	r5, #0
 8006454:	2700      	movs	r7, #0
 8006456:	e77b      	b.n	8006350 <STO_PLL_CalcAvrgMecSpeedUnit+0x60>

08006458 <STO_PLL_CalcAvrgElSpeedDpp>:
 8006458:	23f4      	movs	r3, #244	; 0xf4
 800645a:	b570      	push	{r4, r5, r6, lr}
 800645c:	5cc6      	ldrb	r6, [r0, r3]
 800645e:	331a      	adds	r3, #26
 8006460:	0032      	movs	r2, r6
 8006462:	3238      	adds	r2, #56	; 0x38
 8006464:	5cc4      	ldrb	r4, [r0, r3]
 8006466:	0052      	lsls	r2, r2, #1
 8006468:	2310      	movs	r3, #16
 800646a:	1882      	adds	r2, r0, r2
 800646c:	2104      	movs	r1, #4
 800646e:	5e51      	ldrsh	r1, [r2, r1]
 8006470:	2284      	movs	r2, #132	; 0x84
 8006472:	33ff      	adds	r3, #255	; 0xff
 8006474:	5cc3      	ldrb	r3, [r0, r3]
 8006476:	b2a5      	uxth	r5, r4
 8006478:	0052      	lsls	r2, r2, #1
 800647a:	1aeb      	subs	r3, r5, r3
 800647c:	5882      	ldr	r2, [r0, r2]
 800647e:	b29b      	uxth	r3, r3
 8006480:	1889      	adds	r1, r1, r2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <STO_PLL_CalcAvrgElSpeedDpp+0x60>
 8006486:	199b      	adds	r3, r3, r6
 8006488:	b29b      	uxth	r3, r3
 800648a:	b21a      	sxth	r2, r3
 800648c:	4294      	cmp	r4, r2
 800648e:	dd10      	ble.n	80064b2 <STO_PLL_CalcAvrgElSpeedDpp+0x5a>
 8006490:	0013      	movs	r3, r2
 8006492:	3338      	adds	r3, #56	; 0x38
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	18c3      	adds	r3, r0, r3
 8006498:	2204      	movs	r2, #4
 800649a:	5e9b      	ldrsh	r3, [r3, r2]
 800649c:	1acb      	subs	r3, r1, r3
 800649e:	2290      	movs	r2, #144	; 0x90
 80064a0:	0019      	movs	r1, r3
 80064a2:	0052      	lsls	r2, r2, #1
 80064a4:	5a82      	ldrh	r2, [r0, r2]
 80064a6:	4111      	asrs	r1, r2
 80064a8:	2284      	movs	r2, #132	; 0x84
 80064aa:	0052      	lsls	r2, r2, #1
 80064ac:	81c1      	strh	r1, [r0, #14]
 80064ae:	5083      	str	r3, [r0, r2]
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	1b5b      	subs	r3, r3, r5
 80064b4:	b21a      	sxth	r2, r3
 80064b6:	e7eb      	b.n	8006490 <STO_PLL_CalcAvrgElSpeedDpp+0x38>
 80064b8:	330d      	adds	r3, #13
 80064ba:	33ff      	adds	r3, #255	; 0xff
 80064bc:	5ec3      	ldrsh	r3, [r0, r3]
 80064be:	1acb      	subs	r3, r1, r3
 80064c0:	e7ed      	b.n	800649e <STO_PLL_CalcAvrgElSpeedDpp+0x46>
 80064c2:	46c0      	nop			; (mov r8, r8)

080064c4 <STO_PLL_Clear>:
 80064c4:	2300      	movs	r3, #0
 80064c6:	21f6      	movs	r1, #246	; 0xf6
 80064c8:	2200      	movs	r2, #0
 80064ca:	b510      	push	{r4, lr}
 80064cc:	6603      	str	r3, [r0, #96]	; 0x60
 80064ce:	6643      	str	r3, [r0, #100]	; 0x64
 80064d0:	6683      	str	r3, [r0, #104]	; 0x68
 80064d2:	66c3      	str	r3, [r0, #108]	; 0x6c
 80064d4:	8083      	strh	r3, [r0, #4]
 80064d6:	81c3      	strh	r3, [r0, #14]
 80064d8:	5243      	strh	r3, [r0, r1]
 80064da:	3102      	adds	r1, #2
 80064dc:	5442      	strb	r2, [r0, r1]
 80064de:	3101      	adds	r1, #1
 80064e0:	5442      	strb	r2, [r0, r1]
 80064e2:	3103      	adds	r1, #3
 80064e4:	5043      	str	r3, [r0, r1]
 80064e6:	3104      	adds	r1, #4
 80064e8:	5043      	str	r3, [r0, r1]
 80064ea:	3108      	adds	r1, #8
 80064ec:	5043      	str	r3, [r0, r1]
 80064ee:	3323      	adds	r3, #35	; 0x23
 80064f0:	33ff      	adds	r3, #255	; 0xff
 80064f2:	54c2      	strb	r2, [r0, r3]
 80064f4:	2324      	movs	r3, #36	; 0x24
 80064f6:	33ff      	adds	r3, #255	; 0xff
 80064f8:	54c2      	strb	r2, [r0, r3]
 80064fa:	3b15      	subs	r3, #21
 80064fc:	5cc3      	ldrb	r3, [r0, r3]
 80064fe:	0004      	movs	r4, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <STO_PLL_Clear+0x50>
 8006504:	3b01      	subs	r3, #1
 8006506:	b2da      	uxtb	r2, r3
 8006508:	3201      	adds	r2, #1
 800650a:	0052      	lsls	r2, r2, #1
 800650c:	2100      	movs	r1, #0
 800650e:	3074      	adds	r0, #116	; 0x74
 8006510:	f000 f8cb 	bl	80066aa <memset>
 8006514:	2300      	movs	r3, #0
 8006516:	22f4      	movs	r2, #244	; 0xf4
 8006518:	0020      	movs	r0, r4
 800651a:	54a3      	strb	r3, [r4, r2]
 800651c:	3218      	adds	r2, #24
 800651e:	52a3      	strh	r3, [r4, r2]
 8006520:	3034      	adds	r0, #52	; 0x34
 8006522:	2100      	movs	r1, #0
 8006524:	f7fe fcb6 	bl	8004e94 <PID_SetIntegralTerm>
 8006528:	bd10      	pop	{r4, pc}
 800652a:	46c0      	nop			; (mov r8, r8)

0800652c <STO_PLL_Init>:
 800652c:	238b      	movs	r3, #139	; 0x8b
 800652e:	b570      	push	{r4, r5, r6, lr}
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	5cc2      	ldrb	r2, [r0, r3]
 8006534:	3b20      	subs	r3, #32
 8006536:	54c2      	strb	r2, [r0, r3]
 8006538:	2201      	movs	r2, #1
 800653a:	330e      	adds	r3, #14
 800653c:	54c2      	strb	r2, [r0, r3]
 800653e:	2300      	movs	r3, #0
 8006540:	8643      	strh	r3, [r0, #50]	; 0x32
 8006542:	232e      	movs	r3, #46	; 0x2e
 8006544:	5ec5      	ldrsh	r5, [r0, r3]
 8006546:	0004      	movs	r4, r0
 8006548:	0029      	movs	r1, r5
 800654a:	4813      	ldr	r0, [pc, #76]	; (8006598 <STO_PLL_Init+0x6c>)
 800654c:	f7f9 fe66 	bl	800021c <__divsi3>
 8006550:	b200      	sxth	r0, r0
 8006552:	2800      	cmp	r0, #0
 8006554:	d01e      	beq.n	8006594 <STO_PLL_Init+0x68>
 8006556:	2101      	movs	r1, #1
 8006558:	2201      	movs	r2, #1
 800655a:	e000      	b.n	800655e <STO_PLL_Init+0x32>
 800655c:	0019      	movs	r1, r3
 800655e:	0fc3      	lsrs	r3, r0, #31
 8006560:	1818      	adds	r0, r3, r0
 8006562:	1c4b      	adds	r3, r1, #1
 8006564:	1040      	asrs	r0, r0, #1
 8006566:	0052      	lsls	r2, r2, #1
 8006568:	b29b      	uxth	r3, r3
 800656a:	2800      	cmp	r0, #0
 800656c:	d1f6      	bne.n	800655c <STO_PLL_Init+0x30>
 800656e:	b212      	sxth	r2, r2
 8006570:	4355      	muls	r5, r2
 8006572:	8661      	strh	r1, [r4, #50]	; 0x32
 8006574:	8622      	strh	r2, [r4, #48]	; 0x30
 8006576:	4909      	ldr	r1, [pc, #36]	; (800659c <STO_PLL_Init+0x70>)
 8006578:	0028      	movs	r0, r5
 800657a:	f7f9 fe4f 	bl	800021c <__divsi3>
 800657e:	8560      	strh	r0, [r4, #42]	; 0x2a
 8006580:	0020      	movs	r0, r4
 8006582:	f7ff ff9f 	bl	80064c4 <STO_PLL_Clear>
 8006586:	0020      	movs	r0, r4
 8006588:	3034      	adds	r0, #52	; 0x34
 800658a:	f7fe fc6f 	bl	8004e6c <PID_HandleInit>
 800658e:	2300      	movs	r3, #0
 8006590:	8263      	strh	r3, [r4, #18]
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	2201      	movs	r2, #1
 8006596:	e7ed      	b.n	8006574 <STO_PLL_Init+0x48>
 8006598:	000fea5e 	.word	0x000fea5e
 800659c:	000028be 	.word	0x000028be

080065a0 <STO_PLL_GetEstimatedBemf>:
 80065a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80065a2:	b082      	sub	sp, #8
 80065a4:	0c1a      	lsrs	r2, r3, #16
 80065a6:	0418      	lsls	r0, r3, #16
 80065a8:	0412      	lsls	r2, r2, #16
 80065aa:	0c00      	lsrs	r0, r0, #16
 80065ac:	4310      	orrs	r0, r2
 80065ae:	b002      	add	sp, #8
 80065b0:	4770      	bx	lr
 80065b2:	46c0      	nop			; (mov r8, r8)

080065b4 <STO_PLL_GetEstimatedCurrent>:
 80065b4:	238e      	movs	r3, #142	; 0x8e
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	5ac2      	ldrh	r2, [r0, r3]
 80065ba:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80065bc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80065be:	4113      	asrs	r3, r2
 80065c0:	4110      	asrs	r0, r2
 80065c2:	0400      	lsls	r0, r0, #16
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	0c00      	lsrs	r0, r0, #16
 80065c8:	b082      	sub	sp, #8
 80065ca:	4318      	orrs	r0, r3
 80065cc:	b002      	add	sp, #8
 80065ce:	4770      	bx	lr

080065d0 <STO_PLL_GetObserverGains>:
 80065d0:	b510      	push	{r4, lr}
 80065d2:	2422      	movs	r4, #34	; 0x22
 80065d4:	5f03      	ldrsh	r3, [r0, r4]
 80065d6:	800b      	strh	r3, [r1, #0]
 80065d8:	2126      	movs	r1, #38	; 0x26
 80065da:	5e43      	ldrsh	r3, [r0, r1]
 80065dc:	8013      	strh	r3, [r2, #0]
 80065de:	bd10      	pop	{r4, pc}

080065e0 <STO_PLL_SetObserverGains>:
 80065e0:	8441      	strh	r1, [r0, #34]	; 0x22
 80065e2:	84c2      	strh	r2, [r0, #38]	; 0x26
 80065e4:	4770      	bx	lr
 80065e6:	46c0      	nop			; (mov r8, r8)

080065e8 <STO_GetPLLGains>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	3034      	adds	r0, #52	; 0x34
 80065ec:	000e      	movs	r6, r1
 80065ee:	0015      	movs	r5, r2
 80065f0:	0004      	movs	r4, r0
 80065f2:	f7fe fc47 	bl	8004e84 <PID_GetKP>
 80065f6:	8030      	strh	r0, [r6, #0]
 80065f8:	0020      	movs	r0, r4
 80065fa:	f7fe fc47 	bl	8004e8c <PID_GetKI>
 80065fe:	8028      	strh	r0, [r5, #0]
 8006600:	bd70      	pop	{r4, r5, r6, pc}
 8006602:	46c0      	nop			; (mov r8, r8)

08006604 <STO_SetPLLGains>:
 8006604:	3034      	adds	r0, #52	; 0x34
 8006606:	b570      	push	{r4, r5, r6, lr}
 8006608:	0015      	movs	r5, r2
 800660a:	0004      	movs	r4, r0
 800660c:	f7fe fc36 	bl	8004e7c <PID_SetKP>
 8006610:	0029      	movs	r1, r5
 8006612:	0020      	movs	r0, r4
 8006614:	f7fe fc34 	bl	8004e80 <PID_SetKI>
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	46c0      	nop			; (mov r8, r8)

0800661c <STO_PLL_GetEstimatedBemfLevel>:
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	58c0      	ldr	r0, [r0, r3]
 8006622:	4770      	bx	lr

08006624 <STO_PLL_GetObservedBemfLevel>:
 8006624:	23fc      	movs	r3, #252	; 0xfc
 8006626:	58c0      	ldr	r0, [r0, r3]
 8006628:	4770      	bx	lr
 800662a:	46c0      	nop			; (mov r8, r8)

0800662c <FD_Init>:
 800662c:	2300      	movs	r3, #0
 800662e:	7003      	strb	r3, [r0, #0]
 8006630:	6043      	str	r3, [r0, #4]
 8006632:	6083      	str	r3, [r0, #8]
 8006634:	60c3      	str	r3, [r0, #12]
 8006636:	6103      	str	r3, [r0, #16]
 8006638:	6143      	str	r3, [r0, #20]
 800663a:	6183      	str	r3, [r0, #24]
 800663c:	61c3      	str	r3, [r0, #28]
 800663e:	6203      	str	r3, [r0, #32]
 8006640:	6243      	str	r3, [r0, #36]	; 0x24
 8006642:	6283      	str	r3, [r0, #40]	; 0x28
 8006644:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006646:	6303      	str	r3, [r0, #48]	; 0x30
 8006648:	6343      	str	r3, [r0, #52]	; 0x34
 800664a:	6383      	str	r3, [r0, #56]	; 0x38
 800664c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800664e:	4770      	bx	lr

08006650 <__libc_init_array>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	2600      	movs	r6, #0
 8006654:	4d0c      	ldr	r5, [pc, #48]	; (8006688 <__libc_init_array+0x38>)
 8006656:	4c0d      	ldr	r4, [pc, #52]	; (800668c <__libc_init_array+0x3c>)
 8006658:	1b64      	subs	r4, r4, r5
 800665a:	10a4      	asrs	r4, r4, #2
 800665c:	42a6      	cmp	r6, r4
 800665e:	d109      	bne.n	8006674 <__libc_init_array+0x24>
 8006660:	2600      	movs	r6, #0
 8006662:	f000 f82b 	bl	80066bc <_init>
 8006666:	4d0a      	ldr	r5, [pc, #40]	; (8006690 <__libc_init_array+0x40>)
 8006668:	4c0a      	ldr	r4, [pc, #40]	; (8006694 <__libc_init_array+0x44>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	42a6      	cmp	r6, r4
 8006670:	d105      	bne.n	800667e <__libc_init_array+0x2e>
 8006672:	bd70      	pop	{r4, r5, r6, pc}
 8006674:	00b3      	lsls	r3, r6, #2
 8006676:	58eb      	ldr	r3, [r5, r3]
 8006678:	4798      	blx	r3
 800667a:	3601      	adds	r6, #1
 800667c:	e7ee      	b.n	800665c <__libc_init_array+0xc>
 800667e:	00b3      	lsls	r3, r6, #2
 8006680:	58eb      	ldr	r3, [r5, r3]
 8006682:	4798      	blx	r3
 8006684:	3601      	adds	r6, #1
 8006686:	e7f2      	b.n	800666e <__libc_init_array+0x1e>
 8006688:	08007500 	.word	0x08007500
 800668c:	08007500 	.word	0x08007500
 8006690:	08007500 	.word	0x08007500
 8006694:	08007504 	.word	0x08007504

08006698 <memcpy>:
 8006698:	2300      	movs	r3, #0
 800669a:	b510      	push	{r4, lr}
 800669c:	429a      	cmp	r2, r3
 800669e:	d100      	bne.n	80066a2 <memcpy+0xa>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	5ccc      	ldrb	r4, [r1, r3]
 80066a4:	54c4      	strb	r4, [r0, r3]
 80066a6:	3301      	adds	r3, #1
 80066a8:	e7f8      	b.n	800669c <memcpy+0x4>

080066aa <memset>:
 80066aa:	0003      	movs	r3, r0
 80066ac:	1882      	adds	r2, r0, r2
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d100      	bne.n	80066b4 <memset+0xa>
 80066b2:	4770      	bx	lr
 80066b4:	7019      	strb	r1, [r3, #0]
 80066b6:	3301      	adds	r3, #1
 80066b8:	e7f9      	b.n	80066ae <memset+0x4>
	...

080066bc <_init>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr

080066c8 <_fini>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr
